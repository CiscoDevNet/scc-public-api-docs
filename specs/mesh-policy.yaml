components:
  schemas:
    AddressApi:
      properties:
        address:
          description: Valid IPV4 addresses
          example: 1.1.1.1/32
          type: string
      type: object
    AddressWithExactMatch:
      properties:
        addresses:
          items:
            $ref: '#/components/schemas/AddressWithZoneMatch'
          type: array
        parentZone:
          type: string
      required:
        - addresses
      type: object
    AddressWithTagsToZones:
      properties:
        addressWithTags:
          type: string
        zones:
          items:
            type: string
          type: array
      type: object
    AddressWithZoneMatch:
      properties:
        exactMatch:
          type: boolean
        value:
          description: Valid IPV4 address
          example: 1.1.1.1/32
          type: string
      type: object
    AddressWithZoneMatchApi:
      properties:
        addresses:
          items:
            $ref: '#/components/schemas/AddressWithZoneMatch'
          type: array
      type: object
    AddressesApi:
      properties:
        addresses:
          description: List of valid IPV4 addresses
          example:
            - value: 1.1.1.1/32
          items:
            $ref: '#/components/schemas/StringValue'
          type: array
      type: object
    AddressesWithTags:
      properties:
        addressesWithTags:
          items:
            $ref: '#/components/schemas/StringValue'
          type: array
      type: object
    AddressesWithTagsToZones:
      properties:
        addressesWithTagsToZones:
          items:
            $ref: '#/components/schemas/AddressWithTagsToZones'
          type: array
      type: object
    AdjacentZoneToGatewaySet:
      properties:
        gatewaySetId:
          type: string
        zoneOneId:
          type: string
        zoneTwoId:
          type: string
      required:
        - gatewaySetId
        - zoneOneId
        - zoneTwoId
      type: object
    AdjacentZones:
      properties:
        adjacentZones:
          items:
            $ref: '#/components/schemas/ZonePair'
          type: array
      type: object
    AdjacentZonesToGatewaySets:
      properties:
        adjacentZonesToGatewaySets:
          items:
            $ref: '#/components/schemas/AdjacentZoneToGatewaySet'
          type: array
      type: object
    ApiRequest:
      properties:
        id:
          example: 03502bc3-c140-4951-b467-bd17312a9b0b
          type: string
      type: object
    AppChange:
      properties:
        action:
          enum:
            - CREATE
            - UPDATE
            - DELETE
          type: string
        body:
          $ref: '#/components/schemas/AppChangeBody'
        extId:
          type: string
        id:
          format: uuid
          type: string
      required:
        - action
        - id
      type: object
    AppChangeBody:
      properties:
        info:
          $ref: '#/components/schemas/AppInfoChange'
      required:
        - info
      type: object
    AppChangeError:
      properties:
        duplicateId:
          type: boolean
        duplicateName:
          type: boolean
        id:
          format: uuid
          type: string
        missing:
          type: boolean
        ticketError:
          $ref: '#/components/schemas/TicketError'
        undeletedRelErrs:
          $ref: '#/components/schemas/UndeletedAppRelationshipErrors'
      required:
        - id
      type: object
    AppGroupApi:
      properties:
        description:
          type: string
        id:
          example: id1
          format: 'Id should match this regex: ^[A-Za-z-_0-9~.]+$'
          type: string
        memberApps:
          example:
            - 6_ignore_80_80_null
          format: MemberApps should be a valid list of service strings
          items:
            example: '["6_ignore_80_80_null"]'
            format: MemberApps should be a valid list of service strings
            type: string
          type: array
        memberGroups:
          example:
            - memberGroup1
          format: 'MemberGroups should match this regex: ^[A-Za-z-_0-9~.]+$'
          items:
            example: '["memberGroup1"]'
            format: 'MemberGroups should match this regex: ^[A-Za-z-_0-9~.]+$'
            type: string
          type: array
        revision:
          format: int32
          type: integer
      type: object
    AppGroupChange:
      properties:
        action:
          enum:
            - CREATE
            - UPDATE
            - DELETE
          type: string
        body:
          $ref: '#/components/schemas/AppGroupChangeBody'
        extId:
          type: string
        id:
          format: uuid
          type: string
      required:
        - action
        - id
      type: object
    AppGroupChangeBody:
      properties:
        apgs:
          $ref: '#/components/schemas/RelationshipChanges'
        aps:
          $ref: '#/components/schemas/RelationshipChanges'
        info:
          $ref: '#/components/schemas/AppGroupInfoChange'
      type: object
    AppGroupChangeError:
      properties:
        apErrs:
          $ref: '#/components/schemas/RelationshipChanges'
        apgErrs:
          $ref: '#/components/schemas/RelationshipChanges'
        duplicateId:
          type: boolean
        duplicateName:
          type: boolean
        id:
          format: uuid
          type: string
        missing:
          type: boolean
        ticketError:
          $ref: '#/components/schemas/TicketError'
        undeletedRelErrs:
          $ref: '#/components/schemas/UndeletedAppRelationshipErrors'
      required:
        - id
      type: object
    AppGroupInfoChange:
      properties:
        description:
          type: string
        name:
          type: string
      type: object
    AppGroupUserApi:
      properties:
        description:
          type: string
        memberApps:
          example:
            - 6_ignore_80_80_null
          format: MemberApps should be a valid list of service strings
          items:
            example: '["6_ignore_80_80_null"]'
            format: MemberApps should be a valid list of service strings
            type: string
          type: array
        memberGroups:
          example:
            - memberGroup1
          format: 'MemberGroups should match this regex: ^[A-Za-z-_0-9~.]+$'
          items:
            example: '["memberGroup1"]'
            format: 'MemberGroups should match this regex: ^[A-Za-z-_0-9~.]+$'
            type: string
          type: array
      type: object
    AppInfoChange:
      properties:
        description:
          type: string
        name:
          type: string
        value:
          type: string
      type: object
    ApplicationProtocolEnumObj:
      properties:
        applicationProtocolName:
          type: string
        validProtocols:
          items:
            $ref: '#/components/schemas/ProtocolEnumObj'
          type: array
      type: object
    ApplicationProtocolImpl:
      properties:
        applicationProtocolType:
          enum:
            - '{"applicationProtocolName":"ftp","validProtocols":[{"number":6,"name":"tcp"}]}'
            - '{"applicationProtocolName":"sqlnetv2","validProtocols":[{"number":6,"name":"tcp"}]}'
            - '{"applicationProtocolName":"tftp","validProtocols":[{"number":17,"name":"udp"}]}'
            - '{"applicationProtocolName":"sip","validProtocols":[{"number":6,"name":"tcp"},{"number":17,"name":"udp"}]}'
            - '{"applicationProtocolName":"rtsp","validProtocols":[{"number":6,"name":"tcp"}]}'
            - '{"applicationProtocolName":"sunrpc","validProtocols":[{"number":6,"name":"tcp"},{"number":17,"name":"udp"}]}'
            - '{"applicationProtocolName":"msrpc","validProtocols":[{"number":6,"name":"tcp"},{"number":17,"name":"udp"}]}'
            - '{"applicationProtocolName":"dns","validProtocols":[{"number":6,"name":"tcp"},{"number":17,"name":"udp"}]}'
          type: string
        protocolWithPort:
          $ref: '#/components/schemas/ProtocolWithPort'
      type: object
    AsaImportTypeDetails:
      format: Payload in ASA/CSM format
      properties:
        credentialName:
          type: string
        deviceName:
          type: string
        hostname:
          type: string
        port:
          format: int32
          type: integer
        uriScheme:
          enum:
            - http
            - https
          type: string
      type: object
    CMCDCredentialDetails:
      properties:
        accountName:
          type: string
        apiKeyId:
          type: string
        apiKeySecret:
          type: string
        url:
          type: string
      type: object
    CdoAsaGatewaySetRequest:
      properties:
        deviceName:
          type: string
        direction:
          enum:
            - INBOUND
            - OUTBOUND
          type: string
        interfaceName:
          type: string
        intermediaryManagerId:
          type: string
        isGlobal:
          type: boolean
        status:
          enum:
            - ACTIVE
            - HELD
            - SKIPPED
            - UNMANAGED
          type: string
      type: object
    CdoAsaGatewaySetResponse:
      properties:
        gatewaySetId:
          type: string
      required:
        - gatewaySetId
      type: object
    CdoManagerRequest:
      properties:
        credentialName:
          type: string
        hostDetails:
          items:
            $ref: '#/components/schemas/IntermediaryManagerHostDetails'
          type: array
        id:
          type: string
        metadata:
          $ref: '#/components/schemas/IntermediaryManagerMetadata'
        parentZoneId:
          type: string
        status:
          description: Monitoring Status
          enum:
            - INACTIVE
            - ACTIVE
          type: string
      required:
        - hostDetails
        - id
        - status
      type: object
    ChildRequestApi:
      properties:
        requestId:
          format: uuid
          type: string
        requestingSystem:
          enum:
            - PCM
            - SDI
            - MPM
            - RED
            - SEEDING
            - TOPOLOGY
            - PCM_TOPOLOGY_CHANGE
            - SDI_TOPOLOGY_CHANGE
            - MPM_SECURITY_TOPOLOGY_CHANGE
            - MPM_POLICY_IMPORT
            - ZONE_PATH_TOPOLOGY_CHANGE
            - MPM_MULTI_POLICY_PUSH
            - GOVERNANCE_POLICY_DYNAMIC_GROUP_CHANGE
          type: string
      type: object
    ChildRequestStatusResponse:
      properties:
        requestingSystem:
          enum:
            - PCM
            - SDI
            - MPM
            - RED
            - SEEDING
            - TOPOLOGY
            - PCM_TOPOLOGY_CHANGE
            - SDI_TOPOLOGY_CHANGE
            - MPM_SECURITY_TOPOLOGY_CHANGE
            - MPM_POLICY_IMPORT
            - ZONE_PATH_TOPOLOGY_CHANGE
            - MPM_MULTI_POLICY_PUSH
            - GOVERNANCE_POLICY_DYNAMIC_GROUP_CHANGE
          type: string
        status:
          $ref: '#/components/schemas/RequestStatusResponse'
      type: object
    ChildRequestsResponse:
      properties:
        childRequests:
          items:
            $ref: '#/components/schemas/ChildRequestApi'
          type: array
      type: object
    ChildZoneIds:
      properties:
        childZoneIds:
          items:
            type: string
          type: array
      type: object
    ClientCredentials:
      properties:
        integrationCredentials:
          additionalProperties:
            $ref: '#/components/schemas/CredentialDetails'
          type: object
      type: object
    CreateZonePathApiResponse:
      properties:
        gatewaySetPushRequests:
          items:
            $ref: '#/components/schemas/ReqIdAndReqSystem'
          type: array
        zonePathId:
          format: uuid
          type: string
      type: object
    CredentialDetails:
      properties:
        cmcdCredentials:
          $ref: '#/components/schemas/CMCDCredentialDetails'
        tokenCredentials:
          $ref: '#/components/schemas/TokenCredentialDetails'
        type:
          enum:
            - USERNAME_PASSWORD
            - TOKEN
            - CMCD_CREDENTIALS
          type: string
        usernamePasswordCredentials:
          $ref: '#/components/schemas/UsernamePasswordCredentialDetails'
      type: object
    CredentialNameRequest:
      properties:
        credentialName:
          type: string
      type: object
    DecomGwQueueEntry:
      properties:
        createdTime:
          format: date-time
          type: string
        gwSetId:
          type: string
        updatedTime:
          format: date-time
          type: string
      type: object
    DecommissionQueueIdPage:
      properties:
        cursor:
          type: string
        gwSetIds:
          items:
            $ref: '#/components/schemas/DecomGwQueueEntry'
          type: array
      type: object
    DeleteZonePathApiResponse:
      properties:
        gatewaySetPushRequests:
          items:
            $ref: '#/components/schemas/ReqIdAndReqSystem'
          type: array
      type: object
    DestinationNat:
      properties:
        original:
          items:
            $ref: '#/components/schemas/IpV4Address'
          type: array
        translation:
          $ref: '#/components/schemas/IpV4Address'
        type:
          enum:
            - MATCH
            - STATIC
          type: string
      type: object
    EndpointChange:
      properties:
        action:
          enum:
            - CREATE
            - UPDATE
            - DELETE
          type: string
        body:
          $ref: '#/components/schemas/EndpointChangeBody'
        extId:
          type: string
        id:
          format: uuid
          type: string
      required:
        - action
        - id
      type: object
    EndpointChangeBody:
      properties:
        info:
          $ref: '#/components/schemas/EndpointInfoChange'
      required:
        - info
      type: object
    EndpointChangeError:
      properties:
        duplicateId:
          type: boolean
        duplicateName:
          type: boolean
        id:
          format: uuid
          type: string
        missing:
          type: boolean
        ticketError:
          $ref: '#/components/schemas/TicketError'
        undeletedRelErrs:
          $ref: '#/components/schemas/UndeletedEndpointRelationshipErrors'
      required:
        - id
      type: object
    EndpointGroupApi:
      properties:
        description:
          type: string
        id:
          example: id1
          format: 'Id should match this regex: ^[A-Za-z-_0-9~.]+$'
          type: string
        memberEndpoints:
          items:
            $ref: '#/components/schemas/EndpointWithTagApi'
          type: array
        memberGroups:
          example:
            - memberGroup1
          format: 'MemberGroups should match this regex: ^[A-Za-z-_0-9~.]+$'
          items:
            example: '["memberGroup1"]'
            format: 'MemberGroups should match this regex: ^[A-Za-z-_0-9~.]+$'
            type: string
          type: array
        revision:
          format: int32
          type: integer
      type: object
    EndpointGroupChange:
      properties:
        action:
          enum:
            - CREATE
            - UPDATE
            - DELETE
          type: string
        body:
          $ref: '#/components/schemas/EndpointGroupChangeBody'
        extId:
          type: string
        id:
          format: uuid
          type: string
      required:
        - action
        - id
      type: object
    EndpointGroupChangeBody:
      properties:
        epgs:
          $ref: '#/components/schemas/RelationshipChanges'
        eps:
          $ref: '#/components/schemas/RelationshipChanges'
        info:
          $ref: '#/components/schemas/EndpointGroupInfoChange'
      type: object
    EndpointGroupChangeError:
      properties:
        duplicateId:
          type: boolean
        duplicateName:
          type: boolean
        epErrs:
          $ref: '#/components/schemas/RelationshipChanges'
        epgErrs:
          $ref: '#/components/schemas/RelationshipChanges'
        id:
          format: uuid
          type: string
        missing:
          type: boolean
        ticketError:
          $ref: '#/components/schemas/TicketError'
        undeletedRelErrs:
          $ref: '#/components/schemas/UndeletedEndpointRelationshipErrors'
      required:
        - id
      type: object
    EndpointGroupIdListUserApi:
      properties:
        endpointGroupIds:
          items:
            type: string
          type: array
      type: object
    EndpointGroupIdPageApi:
      properties:
        cursor:
          type: string
        epgs:
          items:
            $ref: '#/components/schemas/IdValue'
          type: array
      type: object
    EndpointGroupInfoChange:
      properties:
        description:
          type: string
        name:
          type: string
      type: object
    EndpointGroupListApi:
      properties:
        epgs:
          items:
            $ref: '#/components/schemas/EndpointGroupApi'
          type: array
      type: object
    EndpointGroupPageApi:
      properties:
        cursor:
          type: string
        epgs:
          items:
            $ref: '#/components/schemas/EndpointGroupApi'
          type: array
      type: object
    EndpointGroupUserApi:
      properties:
        description:
          type: string
        memberEndpoints:
          items:
            $ref: '#/components/schemas/EndpointWithTagApi'
          type: array
        memberGroups:
          example:
            - memberGroup1
          format: 'MemberGroups should match this regex: ^[A-Za-z-_0-9~.]+$'
          items:
            example: '["memberGroup1"]'
            format: 'MemberGroups should match this regex: ^[A-Za-z-_0-9~.]+$'
            type: string
          type: array
      type: object
    EndpointInfoChange:
      properties:
        description:
          type: string
        name:
          type: string
        value:
          type: string
      type: object
    EndpointWithTagApi:
      properties:
        ip:
          example: 1.1.1.1/32
          format: IP should be valid IPV4 address in CIDR notation
          type: string
        tags:
          example:
            - key:value
          format: 'Tag should match this regex: ^[A-Za-z0-9~.]+:[A-Za-z0-9~.]+$'
          items:
            example: '["key:value"]'
            format: 'Tag should match this regex: ^[A-Za-z0-9~.]+:[A-Za-z0-9~.]+$'
            type: string
          type: array
      required:
        - ip
      type: object
    ExistingAndMissingEndpointGroupsApi:
      properties:
        existingEpgs:
          items:
            $ref: '#/components/schemas/EndpointGroupApi'
          type: array
        missingEpgs:
          items:
            $ref: '#/components/schemas/IdValue'
          type: array
      type: object
    FortiManagerImportTypeDetails:
      format: Payload in Fortinet format
      properties:
        credentialName:
          type: string
        hostname:
          type: string
        port:
          format: int32
          type: integer
        uriScheme:
          enum:
            - http
            - https
          type: string
      type: object
    FromToZone:
      properties:
        fromZoneId:
          type: string
        toZoneId:
          type: string
      required:
        - fromZoneId
        - toZoneId
      type: object
    FullRequestDetails:
      properties:
        details:
          $ref: '#/components/schemas/RequestingSystemRequestDetails'
        errCode:
          enum:
            - INPUT_VALIDATION_ERROR
            - INPUT_VALIDATION_ERROR_OBJECT_DOES_NOT_EXIST
            - INPUT_VALIDATION_ERROR_OBJECT_ALREADY_EXISTS
            - INPUT_VALIDATION_ERROR_INVALID_REVISION
            - INPUT_VALIDATION_ERROR_EP_WITH_NO_ZONE
            - INPUT_VALIDATION_ERROR_PARSING_FAILED
          type: string
        errMsg:
          type: string
        reqId:
          format: uuid
          type: string
        reqStatus:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
        reqSystem:
          enum:
            - PCM
            - SDI
            - MPM
            - RED
            - SEEDING
            - TOPOLOGY
            - PCM_TOPOLOGY_CHANGE
            - SDI_TOPOLOGY_CHANGE
            - MPM_SECURITY_TOPOLOGY_CHANGE
            - MPM_POLICY_IMPORT
            - ZONE_PATH_TOPOLOGY_CHANGE
            - MPM_MULTI_POLICY_PUSH
            - GOVERNANCE_POLICY_DYNAMIC_GROUP_CHANGE
          type: string
        username:
          type: string
      type: object
    GatewaySetApi:
      properties:
        credentialName:
          type: string
        deviceType:
          enum:
            - PALO_ALTO
            - JUNIPER
            - PENSANDO_DSC
            - PENSANDO_DSS
            - FORTI_GATE
            - PENSANDO_DSC_PDT
            - CMCD
            - ASA_INTERFACE
            - ASA_GLOBAL
          type: string
        id:
          type: string
        networkDevices:
          items:
            $ref: '#/components/schemas/NetworkDevice'
          type: array
        status:
          enum:
            - ACTIVE
            - HELD
            - SKIPPED
            - UNMANAGED
          type: string
        useBuckets:
          type: boolean
      required:
        - deviceType
        - networkDevices
        - status
      type: object
    GatewaySetDetails:
      properties:
        errMsg:
          type: string
        gwSetId:
          type: string
        subRequestStatus:
          type: string
      type: object
    GatewaySetResp:
      properties:
        credentialName:
          type: string
        deviceType:
          enum:
            - PALO_ALTO
            - JUNIPER
            - PENSANDO_DSC
            - PENSANDO_DSS
            - FORTI_GATE
            - PENSANDO_DSC_PDT
            - CMCD
            - ASA_INTERFACE
            - ASA_GLOBAL
          type: string
        enforcementPointIds:
          items:
            type: string
          type: array
        id:
          type: string
        networkDevices:
          items:
            $ref: '#/components/schemas/NetworkDevice'
          type: array
        status:
          enum:
            - ACTIVE
            - HELD
            - SKIPPED
            - UNMANAGED
          type: string
        useBuckets:
          type: boolean
      required:
        - deviceType
        - networkDevices
        - status
      type: object
    GatewaySetRespPage:
      properties:
        cursor:
          type: string
        gatewaySets:
          items:
            $ref: '#/components/schemas/GatewaySetResp'
          type: array
      type: object
    GatewaySets:
      properties:
        gatewaySets:
          items:
            $ref: '#/components/schemas/IdValue'
          type: array
      type: object
    GroupReferences:
      properties:
        groupIds:
          items:
            type: string
          type: array
          uniqueItems: true
        policies:
          items:
            $ref: '#/components/schemas/PolicyReference'
          type: array
      type: object
    GwSetPolicyResponse:
      properties:
        credentialName:
          type: string
        gwSetId:
          type: string
        modifiedTime:
          format: date-time
          type: string
        policy:
          $ref: '#/components/schemas/Policy'
      type: object
    Icmp:
      properties:
        code:
          format: int32
          type: integer
        protocol:
          enum:
            - '{"number":1,"name":"icmp"}'
            - '{"number":2,"name":"igmp"}'
            - '{"number":89,"name":"ospfigp"}'
            - '{"number":112,"name":"vrrp"}'
            - '{"number":57,"name":"skip"}'
            - '{"number":103,"name":"pim"}'
            - '{"number":47,"name":"gre"}'
            - '{"number":50,"name":"esp"}'
            - '{"number":51,"name":"ah"}'
            - '{"number":6,"name":"tcp"}'
            - '{"number":17,"name":"udp"}'
          type: string
        timeout:
          format: int32
          type: integer
        type:
          format: int32
          type: integer
      type: object
    IdValue:
      properties:
        id:
          type: string
      type: object
    ImmutableListPbacPrivilege:
      items:
        $ref: '#/components/schemas/PbacPrivilege'
      properties:
        empty:
          type: boolean
      type: array
    ImmutableListPbacPrivilegeActionAndEntities:
      items:
        $ref: '#/components/schemas/PbacPrivilegeActionAndEntities'
      properties:
        empty:
          type: boolean
      type: array
    ImmutableListPbacPrivilegeActionAndRoles:
      items:
        $ref: '#/components/schemas/PbacPrivilegeActionAndRoles'
      properties:
        empty:
          type: boolean
      type: array
    ImmutableListPbacRole:
      items:
        $ref: '#/components/schemas/PbacRole'
      properties:
        empty:
          type: boolean
      type: array
    ImmutableListString:
      items:
        type: string
      properties:
        empty:
          type: boolean
      type: array
    ImmutableListUUID:
      items:
        format: uuid
        type: string
      properties:
        empty:
          type: boolean
      type: array
    ImportDetails:
      format: Import details containing payload in one of the supported format and import type
      properties:
        asaImportTypeDetails:
          $ref: '#/components/schemas/AsaImportTypeDetails'
        fortiManagerImportTypeDetails:
          $ref: '#/components/schemas/FortiManagerImportTypeDetails'
        payloadImportTypeDetails:
          $ref: '#/components/schemas/PayloadImportTypeDetails'
        type:
          enum:
            - PAYLOAD
            - FORTINET
            - ASA
          example: FORTINET
          format: 'Type should reflect the vendor  '
          type: string
      type: object
    IntermediaryManagerHostDetails:
      properties:
        hostname:
          type: string
        port:
          format: int32
          type: integer
        priority:
          default: 1
          format: int32
          minimum: 1
          type: integer
      required:
        - hostname
        - port
      type: object
    IntermediaryManagerIdPage:
      properties:
        cursor:
          type: string
        managerIds:
          items:
            type: string
          type: array
      type: object
    IntermediaryManagerIdResponse:
      properties:
        id:
          type: string
      required:
        - id
      type: object
    IntermediaryManagerInfo:
      properties:
        hostname:
          type: string
        id:
          type: string
        port:
          format: int32
          type: integer
      type: object
    IntermediaryManagerMetadata:
      properties:
        lastMonitoredTimestamp:
          format: date-time
          type: string
        modifiedTimestamp:
          format: date-time
          type: string
        monitorMessage:
          type: string
        monitorRetryCount:
          format: int32
          type: integer
      type: object
    IntermediaryManagerStatusRequest:
      properties:
        status:
          enum:
            - INACTIVE
            - ACTIVE
          type: string
      type: object
    IntermediaryManagerUpdateApi:
      properties:
        hostDetails:
          items:
            $ref: '#/components/schemas/IntermediaryManagerHostDetails'
          type: array
        id:
          type: string
      required:
        - hostDetails
        - id
      type: object
    IntermediaryManagersResponse:
      properties:
        intermediaryManagers:
          items:
            $ref: '#/components/schemas/IntermediaryManagerInfo'
          type: array
      type: object
    IpV4Address:
      properties:
        address:
          type: string
        addressSpace:
          format: int64
          type: integer
        addressType:
          enum:
            - PREFIX
            - RANGE
          type: string
        anyAddress:
          type: boolean
        binaryString:
          type: string
        longRange:
          $ref: '#/components/schemas/LongRange'
        mask:
          format: int32
          type: integer
        type:
          enum:
            - PREFIX
            - RANGE
          type: string
      type: object
    LongRange:
      properties:
        endLong:
          format: int64
          type: integer
        singularAddress:
          type: boolean
        startLong:
          format: int64
          type: integer
      type: object
    ManagerChange:
      properties:
        action:
          enum:
            - CREATE
            - UPDATE
            - DELETE
          type: string
        body:
          $ref: '#/components/schemas/ManagerChangeBody'
        extId:
          type: string
        id:
          format: uuid
          type: string
      required:
        - action
        - id
      type: object
    ManagerChangeBody:
      properties:
        apgs:
          items:
            $ref: '#/components/schemas/AppGroupChange'
          type: array
        aps:
          items:
            $ref: '#/components/schemas/AppChange'
          type: array
        epgs:
          items:
            $ref: '#/components/schemas/EndpointGroupChange'
          type: array
        eps:
          items:
            $ref: '#/components/schemas/EndpointChange'
          type: array
        info:
          $ref: '#/components/schemas/ManagerInfoChange'
        policies:
          items:
            $ref: '#/components/schemas/PolicyChange'
          type: array
      type: object
    ManagerChangeError:
      properties:
        apErrs:
          items:
            $ref: '#/components/schemas/AppChangeError'
          type: array
        apgErrs:
          items:
            $ref: '#/components/schemas/AppGroupChangeError'
          type: array
        duplicateId:
          type: boolean
        duplicateName:
          type: boolean
        epErrs:
          items:
            $ref: '#/components/schemas/EndpointChangeError'
          type: array
        epgErrs:
          items:
            $ref: '#/components/schemas/EndpointGroupChangeError'
          type: array
        id:
          format: uuid
          type: string
        missing:
          type: boolean
        policyErrs:
          items:
            $ref: '#/components/schemas/PolicyChangeError'
          type: array
        ticketError:
          $ref: '#/components/schemas/TicketError'
        undeletedDeviceSetErrs:
          items:
            type: string
          type: array
      required:
        - id
      type: object
    ManagerInfoChange:
      properties:
        description:
          type: string
        name:
          type: string
      type: object
    MpmAppGroupObj:
      properties:
        aps:
          items:
            $ref: '#/components/schemas/MpmAppObj'
          type: array
        description:
          type: string
        id:
          format: uuid
          type: string
        name:
          type: string
      type: object
    MpmAppGroupRevisionDiff:
      properties:
        action:
          enum:
            - CREATE
            - UPDATE
            - DELETE
            - NO_DIFF
          type: string
        body:
          $ref: '#/components/schemas/MpmAppGroupRevisionDiffBody'
        id:
          format: uuid
          type: string
      type: object
    MpmAppGroupRevisionDiffBody:
      properties:
        apgs:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        aps:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        info:
          $ref: '#/components/schemas/AppGroupInfoChange'
      type: object
    MpmAppGroupsPage:
      properties:
        appGroups:
          items:
            $ref: '#/components/schemas/MpmAppGroupObj'
          type: array
        cursor:
          type: string
      type: object
    MpmAppObj:
      properties:
        alg:
          type: string
        anyApp:
          type: boolean
        description:
          type: string
        ianaProtocol:
          format: int32
          type: integer
        icmpCode:
          format: int32
          type: integer
        icmpType:
          format: int32
          type: integer
        id:
          format: uuid
          type: string
        name:
          type: string
        portEnd:
          format: int32
          type: integer
        portStart:
          format: int32
          type: integer
        timeout:
          format: int32
          type: integer
        value:
          type: string
      type: object
    MpmAppRevisionDiff:
      properties:
        action:
          enum:
            - CREATE
            - UPDATE
            - DELETE
            - NO_DIFF
          type: string
        body:
          $ref: '#/components/schemas/AppChangeBody'
        id:
          format: uuid
          type: string
      type: object
    MpmAppsAndAppGroupsResult:
      properties:
        appGroups:
          items:
            $ref: '#/components/schemas/MpmAppGroupObj'
          type: array
          uniqueItems: true
        apps:
          items:
            $ref: '#/components/schemas/MpmAppObj'
          type: array
          uniqueItems: true
      type: object
    MpmAppsPage:
      properties:
        apps:
          items:
            $ref: '#/components/schemas/MpmAppObj'
          type: array
        cursor:
          type: string
      type: object
    MpmChangeset:
      properties:
        action:
          enum:
            - CREATE
            - REBASE
            - RESOLVE_CONFLICT
            - VALIDATE
            - RESOLVE_ERROR
            - COMMIT
          type: string
        baseRevision:
          format: int32
          type: integer
        changesetContent:
          $ref: '#/components/schemas/MpmChangesetContent'
        changesetId:
          format: uuid
          type: string
        createdBy:
          type: string
        createdTime:
          format: date-time
          type: string
        description:
          type: string
        modifiedTime:
          format: date-time
          type: string
        name:
          type: string
        newRevision:
          format: int32
          type: integer
        receivedTime:
          format: date-time
          type: string
        status:
          enum:
            - DRAFT
            - SUBMITTED
            - CONFLICT_DETECTED
            - ERROR_DETECTED
            - COMMITTED
          type: string
      type: object
    MpmChangesetContent:
      properties:
        extIds:
          items:
            type: string
          type: array
        managers:
          items:
            $ref: '#/components/schemas/ManagerChange'
          type: array
      required:
        - managers
      type: object
    MpmChangesetContentError:
      properties:
        managerErrs:
          items:
            $ref: '#/components/schemas/ManagerChangeError'
          type: array
      type: object
    MpmChangesetErrorUpdate:
      properties:
        content:
          $ref: '#/components/schemas/MpmChangesetContent'
        error:
          $ref: '#/components/schemas/MpmChangesetContentError'
      type: object
    MpmChangesetMeta:
      properties:
        action:
          enum:
            - CREATE
            - REBASE
            - RESOLVE_CONFLICT
            - VALIDATE
            - RESOLVE_ERROR
            - COMMIT
          type: string
        baseRevision:
          format: int32
          type: integer
        changesetId:
          format: uuid
          type: string
        createdBy:
          type: string
        createdTime:
          format: date-time
          type: string
        description:
          type: string
        modifiedTime:
          format: date-time
          type: string
        name:
          type: string
        newRevision:
          format: int32
          type: integer
        receivedTime:
          format: date-time
          type: string
        status:
          enum:
            - DRAFT
            - SUBMITTED
            - CONFLICT_DETECTED
            - ERROR_DETECTED
            - COMMITTED
          type: string
      type: object
    MpmChangesetUserApi:
      properties:
        description:
          type: string
        name:
          type: string
      required:
        - name
      type: object
    MpmChangesetsPage:
      properties:
        changesets:
          items:
            $ref: '#/components/schemas/MpmChangesetMeta'
          type: array
        lastChangesetId:
          format: uuid
          type: string
        lastModifiedTimestamp:
          format: date-time
          type: string
      type: object
    MpmConflict:
      properties:
        managers:
          items:
            $ref: '#/components/schemas/MpmManagerConflict'
          type: array
      type: object
    MpmConflictUpdate:
      properties:
        conflict:
          $ref: '#/components/schemas/MpmConflict'
        content:
          $ref: '#/components/schemas/MpmChangesetContent'
      type: object
    MpmCreateChangesetWithContentApi:
      properties:
        changesetContent:
          $ref: '#/components/schemas/MpmChangesetContent'
        description:
          type: string
        name:
          type: string
      required:
        - changesetContent
        - name
      type: object
    MpmDynamicGroupMpmRulesPage:
      properties:
        cursor:
          type: string
        dynamicGroupIds:
          items:
            $ref: '#/components/schemas/IdValue'
          type: array
      type: object
    MpmDynamicGroupRelation:
      properties:
        managerId:
          format: uuid
          type: string
        policyId:
          format: uuid
          type: string
        ruleId:
          format: uuid
          type: string
      type: object
    MpmDynamicGroupRelations:
      properties:
        relations:
          items:
            $ref: '#/components/schemas/MpmDynamicGroupRelation'
          type: array
        revision:
          format: int32
          type: integer
      type: object
    MpmDynamicGroupRelationshipChangeError:
      properties:
        add:
          items:
            type: string
          type: array
        rem:
          items:
            type: string
          type: array
        ticketError:
          $ref: '#/components/schemas/TicketError'
      type: object
    MpmDynamicGroupRelationshipChanges:
      properties:
        add:
          items:
            type: string
          type: array
        rem:
          items:
            type: string
          type: array
      type: object
    MpmDynamicGroupRelationshipRevisionDiff:
      properties:
        added:
          items:
            type: string
          type: array
          uniqueItems: true
        removed:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    MpmEndpointGroupObj:
      properties:
        description:
          type: string
        epgs:
          items:
            $ref: '#/components/schemas/MpmEndpointGroupObj'
          type: array
        eps:
          items:
            $ref: '#/components/schemas/MpmEndpointObj'
          type: array
        id:
          format: uuid
          type: string
        name:
          type: string
      type: object
    MpmEndpointGroupRevisionDiff:
      properties:
        action:
          enum:
            - CREATE
            - UPDATE
            - DELETE
            - NO_DIFF
          type: string
        body:
          $ref: '#/components/schemas/MpmEndpointGroupRevisionDiffBody'
        id:
          format: uuid
          type: string
      type: object
    MpmEndpointGroupRevisionDiffBody:
      properties:
        epgs:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        eps:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        info:
          $ref: '#/components/schemas/EndpointGroupInfoChange'
      type: object
    MpmEndpointGroupsPage:
      properties:
        cursor:
          type: string
        endpointGroups:
          items:
            $ref: '#/components/schemas/MpmEndpointGroupObj'
          type: array
      type: object
    MpmEndpointObj:
      properties:
        addressEnd:
          format: int64
          type: integer
        addressStart:
          format: int64
          type: integer
        description:
          type: string
        id:
          format: uuid
          type: string
        name:
          type: string
        value:
          type: string
      type: object
    MpmEndpointRevisionDiff:
      properties:
        action:
          enum:
            - CREATE
            - UPDATE
            - DELETE
            - NO_DIFF
          type: string
        body:
          $ref: '#/components/schemas/EndpointChangeBody'
        id:
          format: uuid
          type: string
      type: object
    MpmEndpointsAndEndpointGroupsResult:
      properties:
        endpointGroups:
          items:
            $ref: '#/components/schemas/MpmEndpointGroupObj'
          type: array
          uniqueItems: true
        endpoints:
          items:
            $ref: '#/components/schemas/MpmEndpointObj'
          type: array
          uniqueItems: true
      type: object
    MpmEndpointsPage:
      properties:
        cursor:
          type: string
        endpoints:
          items:
            $ref: '#/components/schemas/MpmEndpointObj'
          type: array
      type: object
    MpmEntityImport:
      properties:
        description:
          type: string
        name:
          type: string
        value:
          type: string
      type: object
    MpmEntityRelations:
      properties:
        appGroups:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        endpointGroups:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        policyToRules:
          items:
            $ref: '#/components/schemas/MpmPolicyMetadataToRules'
          type: array
      type: object
    MpmGatewayResp:
      properties:
        hostname:
          type: string
        managementIp:
          type: string
        name:
          type: string
      type: object
    MpmGatewaySetResp:
      properties:
        createdTimestamp:
          format: date-time
          type: string
        deviceType:
          enum:
            - PALO_ALTO
            - JUNIPER
            - PENSANDO_DSC
            - PENSANDO_DSS
            - FORTI_GATE
            - PENSANDO_DSC_PDT
            - CMCD
            - ASA_INTERFACE
            - ASA_GLOBAL
          type: string
        gateways:
          items:
            $ref: '#/components/schemas/MpmGatewayResp'
          type: array
        id:
          type: string
        modifiedTimestamp:
          format: date-time
          type: string
        policies:
          items:
            $ref: '#/components/schemas/MpmPolicy'
          type: array
        status:
          enum:
            - ACTIVE
            - HELD
            - SKIPPED
            - UNMANAGED
          type: string
      type: object
    MpmGatewaySetsPage:
      properties:
        cursor:
          type: string
        gatewaySets:
          items:
            $ref: '#/components/schemas/MpmGatewaySetResp'
          type: array
      type: object
    MpmGovernancePolicyDynamicGroupRequest:
      properties:
        createdTime:
          format: date-time
          type: string
        dynamicGroupId:
          type: string
        id:
          format: uuid
          type: string
        managedStatus:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
        modifiedTime:
          format: date-time
          type: string
      type: object
    MpmGroupEntityImport:
      properties:
        description:
          type: string
        memberGroups:
          items:
            type: string
          type: array
        members:
          items:
            type: string
          type: array
        name:
          type: string
      type: object
    MpmManagerConflict:
      properties:
        impactedApIds:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        impactedApgIds:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        impactedEpIds:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        impactedEpgIds:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        impactedPolicyIds:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        managerId:
          format: uuid
          type: string
      required:
        - managerId
      type: object
    MpmManagerObj:
      properties:
        description:
          type: string
        id:
          format: uuid
          type: string
        name:
          type: string
      type: object
    MpmManagersPage:
      properties:
        cursor:
          type: string
        managers:
          items:
            $ref: '#/components/schemas/MpmManagerObj'
          type: array
      type: object
    MpmMultiPolicyPushRequestApi:
      properties:
        gatewaySetId:
          type: string
        policyIdentifiers:
          items:
            $ref: '#/components/schemas/MpmPolicyIdentifier'
          type: array
      required:
        - gatewaySetId
        - policyIdentifiers
      type: object
    MpmNatRuleImport:
      properties:
        appMatch:
          items:
            type: string
          type: array
        appNatType:
          enum:
            - MATCH
            - STATIC
          type: string
        appTranslated:
          type: string
        description:
          type: string
        destinationMatchEp:
          items:
            type: string
          type: array
        destinationMatchEpg:
          items:
            type: string
          type: array
        destinationNatType:
          enum:
            - MATCH
            - STATIC
          type: string
        destinationTranslated:
          type: string
        enabled:
          type: boolean
        ruleGroup:
          type: string
        ruleNumber:
          format: int32
          type: integer
        sourceMatchEp:
          items:
            type: string
          type: array
        sourceMatchEpg:
          items:
            type: string
          type: array
        sourceNatType:
          enum:
            - MATCH
            - STATIC
            - HIDE
          type: string
        sourceTranslated:
          type: string
      type: object
    MpmNatRuleObj:
      properties:
        apTranslated:
          $ref: '#/components/schemas/MpmAppObj'
        apgsMatch:
          items:
            $ref: '#/components/schemas/MpmAppGroupObj'
          type: array
        appNatType:
          enum:
            - MATCH
            - STATIC
          type: string
        apsMatch:
          items:
            $ref: '#/components/schemas/MpmAppObj'
          type: array
        description:
          type: string
        dstEpTranslated:
          $ref: '#/components/schemas/MpmEndpointObj'
        dstEpgsMatch:
          items:
            $ref: '#/components/schemas/MpmEndpointGroupObj'
          type: array
        dstEpsMatch:
          items:
            $ref: '#/components/schemas/MpmEndpointObj'
          type: array
        dstNatType:
          enum:
            - MATCH
            - STATIC
          type: string
        enabled:
          type: boolean
        id:
          format: uuid
          type: string
        srcEpTranslated:
          $ref: '#/components/schemas/MpmEndpointObj'
        srcEpgsMatch:
          items:
            $ref: '#/components/schemas/MpmEndpointGroupObj'
          type: array
        srcEpsMatch:
          items:
            $ref: '#/components/schemas/MpmEndpointObj'
          type: array
        srcNatType:
          enum:
            - MATCH
            - STATIC
            - HIDE
          type: string
      type: object
    MpmNatRuleRevisionDiff:
      properties:
        action:
          enum:
            - CREATE
            - UPDATE
            - DELETE
            - NO_DIFF
          type: string
        body:
          $ref: '#/components/schemas/MpmNatRuleRevisionDiffBody'
        id:
          format: uuid
          type: string
      type: object
    MpmNatRuleRevisionDiffBody:
      properties:
        apMatch:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        apTranslated:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        apgMatch:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        dstEpMatch:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        dstEpTranslated:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        dstEpgMatch:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        info:
          $ref: '#/components/schemas/NatRuleInfoChange'
        srcEpMatch:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        srcEpTranslated:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        srcEpgMatch:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
      type: object
    MpmPoliciesPage:
      properties:
        cursor:
          type: string
        policies:
          items:
            $ref: '#/components/schemas/MpmPolicyWithoutRulesObj'
          type: array
      type: object
    MpmPolicy:
      properties:
        deleted:
          type: boolean
        description:
          type: string
        managerId:
          format: uuid
          type: string
        name:
          type: string
        policyId:
          format: uuid
          type: string
        policyType:
          enum:
            - SECURITY
            - GOVERNANCE_PREPEND
            - GOVERNANCE_APPEND
            - NAT
          type: string
        revisionId:
          format: int32
          type: integer
      type: object
    MpmPolicyIdentifier:
      properties:
        managerId:
          format: uuid
          type: string
        policyId:
          format: uuid
          type: string
        policyType:
          enum:
            - SECURITY
            - GOVERNANCE_PREPEND
            - GOVERNANCE_APPEND
            - NAT
          type: string
        revisionId:
          format: int32
          type: integer
      required:
        - managerId
        - policyId
        - policyType
        - revisionId
      type: object
    MpmPolicyImportApi:
      properties:
        importDetails:
          $ref: '#/components/schemas/ImportDetails'
        managerName:
          format: The name of the manager the policy is being imported from
          type: string
        policyName:
          format: Name of policy being imported
          type: string
        targetManagerName:
          format: The name of the manager the policy is being imported into
          type: string
        targetPolicyName:
          format: The Name of policy that will be created with the content of imported policy
          type: string
      type: object
    MpmPolicyImportBase:
      properties:
        appGroups:
          items:
            $ref: '#/components/schemas/MpmGroupEntityImport'
          type: array
        apps:
          items:
            $ref: '#/components/schemas/MpmEntityImport'
          type: array
        endpointGroups:
          items:
            $ref: '#/components/schemas/MpmGroupEntityImport'
          type: array
        endpoints:
          items:
            $ref: '#/components/schemas/MpmEntityImport'
          type: array
        installTargets:
          items:
            type: string
          type: array
        natRules:
          items:
            $ref: '#/components/schemas/MpmNatRuleImport'
          type: array
        rules:
          items:
            $ref: '#/components/schemas/MpmRuleImport'
          type: array
      type: object
    MpmPolicyImportRequestResp:
      properties:
        childChangeSetIds:
          items:
            $ref: '#/components/schemas/IdValue'
          type: array
        createdTime:
          format: date-time
          type: string
        details:
          type: string
        id:
          format: uuid
          type: string
        managerName:
          type: string
        modifiedTime:
          format: date-time
          type: string
        policyName:
          type: string
        targetManagerName:
          type: string
        targetPolicyName:
          type: string
      type: object
    MpmPolicyImportRequestStatusApi:
      properties:
        details:
          $ref: '#/components/schemas/MpmPolicyImportRequestResp'
        errCode:
          enum:
            - INPUT_VALIDATION_ERROR
            - INPUT_VALIDATION_ERROR_OBJECT_DOES_NOT_EXIST
            - INPUT_VALIDATION_ERROR_OBJECT_ALREADY_EXISTS
            - INPUT_VALIDATION_ERROR_INVALID_REVISION
            - INPUT_VALIDATION_ERROR_EP_WITH_NO_ZONE
            - INPUT_VALIDATION_ERROR_PARSING_FAILED
          type: string
        errMsg:
          type: string
        id:
          type: string
        importType:
          enum:
            - PAYLOAD
            - FORTINET
            - ASA
          type: string
        requestSystem:
          enum:
            - PCM
            - SDI
            - MPM
            - RED
            - SEEDING
            - TOPOLOGY
            - PCM_TOPOLOGY_CHANGE
            - SDI_TOPOLOGY_CHANGE
            - MPM_SECURITY_TOPOLOGY_CHANGE
            - MPM_POLICY_IMPORT
            - ZONE_PATH_TOPOLOGY_CHANGE
            - MPM_MULTI_POLICY_PUSH
            - GOVERNANCE_POLICY_DYNAMIC_GROUP_CHANGE
          type: string
        status:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
      type: object
    MpmPolicyMetadataToRules:
      properties:
        description:
          type: string
        name:
          type: string
        policyId:
          format: uuid
          type: string
        ruleIds:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
      type: object
    MpmPolicyObj:
      properties:
        description:
          type: string
        id:
          format: uuid
          type: string
        installTargets:
          items:
            type: string
          type: array
        name:
          type: string
        natRules:
          items:
            $ref: '#/components/schemas/MpmNatRuleObj'
          type: array
        policyType:
          enum:
            - SECURITY
            - GOVERNANCE_PREPEND
            - GOVERNANCE_APPEND
            - NAT
          type: string
        rules:
          items:
            $ref: '#/components/schemas/MpmRuleObj'
          type: array
      type: object
    MpmPolicyPushRequestApi:
      properties:
        gatewaySetId:
          type: string
        managerId:
          format: uuid
          type: string
        policyId:
          format: uuid
          type: string
        policyType:
          enum:
            - SECURITY
            - GOVERNANCE_PREPEND
            - GOVERNANCE_APPEND
            - NAT
          type: string
        revisionId:
          format: int32
          type: integer
      required:
        - gatewaySetId
        - managerId
        - policyId
        - policyType
        - revisionId
      type: object
    MpmPolicyPushRequestsPage:
      properties:
        lastRequestId:
          format: uuid
          type: string
        lastTimestampInMillis:
          format: int64
          type: integer
        multiReqCursorId:
          format: uuid
          type: string
        requests:
          items:
            $ref: '#/components/schemas/MpmRequestInfo'
          type: array
      type: object
    MpmPolicyRevisionDiff:
      properties:
        action:
          enum:
            - CREATE
            - UPDATE
            - DELETE
            - NO_DIFF
          type: string
        body:
          $ref: '#/components/schemas/MpmPolicyRevisionDiffBody'
        id:
          format: uuid
          type: string
      type: object
    MpmPolicyRevisionDiffBody:
      properties:
        info:
          $ref: '#/components/schemas/PolicyInfoChange'
        natRules:
          items:
            $ref: '#/components/schemas/MpmNatRuleRevisionDiff'
          type: array
        ruleOrder:
          $ref: '#/components/schemas/PolicyRuleOrderChange'
        rules:
          items:
            $ref: '#/components/schemas/MpmRuleRevisionDiff'
          type: array
        targets:
          $ref: '#/components/schemas/MpmTargetRelationshipDiff'
      type: object
    MpmPolicyWithoutRulesObj:
      properties:
        description:
          type: string
        id:
          format: uuid
          type: string
        installTargets:
          items:
            type: string
          type: array
        name:
          type: string
        policyType:
          enum:
            - SECURITY
            - GOVERNANCE_PREPEND
            - GOVERNANCE_APPEND
            - NAT
          type: string
      type: object
    MpmRelationshipRevisionDiff:
      properties:
        added:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        removed:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        updated:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
      type: object
    MpmRequest:
      properties:
        createdBy:
          type: string
        createdTime:
          format: date-time
          type: string
        gatewaySetId:
          type: string
        id:
          format: uuid
          type: string
        lockAcquired:
          type: boolean
        managedStatus:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
        managerId:
          format: uuid
          type: string
        modifiedTime:
          format: date-time
          type: string
        policyId:
          format: uuid
          type: string
        policyType:
          enum:
            - SECURITY
            - GOVERNANCE_PREPEND
            - GOVERNANCE_APPEND
            - NAT
          type: string
        revisionId:
          format: int32
          type: integer
      type: object
    MpmRequestInfo:
      properties:
        createdBy:
          type: string
        createdTime:
          format: date-time
          type: string
        gatewaySetId:
          type: string
        id:
          format: uuid
          type: string
        lockAcquired:
          type: boolean
        managedStatus:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
        managerId:
          format: uuid
          type: string
        modifiedTime:
          format: date-time
          type: string
        multiReqCursorId:
          format: uuid
          type: string
        policyId:
          format: uuid
          type: string
        policyType:
          enum:
            - SECURITY
            - GOVERNANCE_PREPEND
            - GOVERNANCE_APPEND
            - NAT
          type: string
        revisionId:
          format: int32
          type: integer
        subRequests:
          items:
            $ref: '#/components/schemas/SubRequest'
          type: array
        tasks:
          items:
            $ref: '#/components/schemas/Task'
          type: array
      type: object
    MpmRevision:
      properties:
        createdBy:
          type: string
        createdTime:
          format: date-time
          type: string
        description:
          type: string
        revisionId:
          format: int32
          type: integer
      type: object
    MpmRuleImport:
      properties:
        action:
          enum:
            - PERMIT
            - DENY
          type: string
        appGroups:
          items:
            type: string
          type: array
        apps:
          items:
            type: string
          type: array
        description:
          type: string
        destinationGroups:
          items:
            type: string
          type: array
        destinations:
          items:
            type: string
          type: array
        enabled:
          type: boolean
        fullyPinned:
          type: boolean
        onClose:
          type: boolean
        onInit:
          type: boolean
        ruleGroup:
          type: string
        ruleNumber:
          format: int32
          type: integer
        sourceGroups:
          items:
            type: string
          type: array
        sources:
          items:
            type: string
          type: array
      type: object
    MpmRuleObj:
      properties:
        action:
          enum:
            - PERMIT
            - DENY
          type: string
        apgs:
          items:
            $ref: '#/components/schemas/MpmAppGroupObj'
          type: array
        aps:
          items:
            $ref: '#/components/schemas/MpmAppObj'
          type: array
        description:
          type: string
        dstDgs:
          items:
            $ref: '#/components/schemas/IdValue'
          type: array
        dstEpgs:
          items:
            $ref: '#/components/schemas/MpmEndpointGroupObj'
          type: array
        dstEps:
          items:
            $ref: '#/components/schemas/MpmEndpointObj'
          type: array
        enabled:
          type: boolean
        fullyPinned:
          type: boolean
        id:
          format: uuid
          type: string
        onClose:
          type: boolean
        onInit:
          type: boolean
        ruleGroup:
          type: string
        srcDgs:
          items:
            $ref: '#/components/schemas/IdValue'
          type: array
        srcEpgs:
          items:
            $ref: '#/components/schemas/MpmEndpointGroupObj'
          type: array
        srcEps:
          items:
            $ref: '#/components/schemas/MpmEndpointObj'
          type: array
      type: object
    MpmRuleResp:
      properties:
        natRules:
          items:
            $ref: '#/components/schemas/MpmNatRuleObj'
          type: array
        rules:
          items:
            $ref: '#/components/schemas/MpmRuleObj'
          type: array
      type: object
    MpmRuleRevisionDiff:
      properties:
        action:
          enum:
            - CREATE
            - UPDATE
            - DELETE
            - NO_DIFF
          type: string
        body:
          $ref: '#/components/schemas/MpmRuleRevisionDiffBody'
        id:
          format: uuid
          type: string
      type: object
    MpmRuleRevisionDiffBody:
      properties:
        apgs:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        aps:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        dstDgs:
          $ref: '#/components/schemas/MpmDynamicGroupRelationshipRevisionDiff'
        dstEpgs:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        dstEps:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        info:
          $ref: '#/components/schemas/RuleInfoChange'
        srcDgs:
          $ref: '#/components/schemas/MpmDynamicGroupRelationshipRevisionDiff'
        srcEpgs:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
        srcEps:
          $ref: '#/components/schemas/MpmRelationshipRevisionDiff'
      type: object
    MpmRuleSearchResults:
      properties:
        apgs:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        aps:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        dstEpgs:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        dstEps:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        rules:
          items:
            format: uuid
            type: string
          type: array
        srcEpgs:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        srcEps:
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
      type: object
    MpmRulesPage:
      properties:
        cursor:
          format: uuid
          type: string
        mpmRuleResponse:
          $ref: '#/components/schemas/MpmRuleResp'
      type: object
    MpmSearchCriteriaResp:
      properties:
        searchCriteriaResp:
          items:
            $ref: '#/components/schemas/SearchCriteriaValue'
          type: array
      type: object
    MpmTargetRelationshipDiff:
      properties:
        added:
          items:
            type: string
          type: array
        removed:
          items:
            type: string
          type: array
      type: object
    MultiCloudDefenseManagerApi:
      properties:
        credentialName:
          type: string
        hostDetails:
          items:
            $ref: '#/components/schemas/IntermediaryManagerHostDetails'
          type: array
        id:
          type: string
        status:
          enum:
            - INACTIVE
            - ACTIVE
          type: string
      type: object
    NatMatchInfoChange:
      properties:
        apgs:
          $ref: '#/components/schemas/RelationshipChanges'
        aps:
          $ref: '#/components/schemas/RelationshipChanges'
        dstEpgs:
          $ref: '#/components/schemas/RelationshipChanges'
        dstEps:
          $ref: '#/components/schemas/RelationshipChanges'
        srcEpgs:
          $ref: '#/components/schemas/RelationshipChanges'
        srcEps:
          $ref: '#/components/schemas/RelationshipChanges'
      type: object
    NatRule:
      properties:
        destinationNat:
          $ref: '#/components/schemas/DestinationNat'
        serviceNat:
          $ref: '#/components/schemas/ServiceNat'
        sourceNat:
          $ref: '#/components/schemas/SourceNat'
      type: object
    NatRuleChange:
      properties:
        action:
          enum:
            - CREATE
            - UPDATE
            - DELETE
          type: string
        body:
          $ref: '#/components/schemas/NatRuleChangeBody'
        extId:
          type: string
        id:
          format: uuid
          type: string
      required:
        - action
        - id
      type: object
    NatRuleChangeBody:
      properties:
        info:
          $ref: '#/components/schemas/NatRuleInfoChange'
        matchInfo:
          $ref: '#/components/schemas/NatMatchInfoChange'
        translatedInfo:
          $ref: '#/components/schemas/NatTranslatedInfoChange'
      type: object
    NatRuleChangeError:
      properties:
        apMatchErrs:
          items:
            $ref: '#/components/schemas/NatRuleRelationshipChangesError'
          type: array
        apTranslatedErrs:
          items:
            $ref: '#/components/schemas/NatRuleRelationshipChangesError'
          type: array
        apgMatchErrs:
          items:
            $ref: '#/components/schemas/NatRuleRelationshipChangesError'
          type: array
        dstEpMatchErrs:
          items:
            $ref: '#/components/schemas/NatRuleRelationshipChangesError'
          type: array
        dstEpTranslatedErrs:
          items:
            $ref: '#/components/schemas/NatRuleRelationshipChangesError'
          type: array
        dstEpgMatchErrs:
          items:
            $ref: '#/components/schemas/NatRuleRelationshipChangesError'
          type: array
        duplicateId:
          type: boolean
        id:
          format: uuid
          type: string
        missing:
          type: boolean
        srcEpMatchErrs:
          items:
            $ref: '#/components/schemas/NatRuleRelationshipChangesError'
          type: array
        srcEpTranslatedErrs:
          items:
            $ref: '#/components/schemas/NatRuleRelationshipChangesError'
          type: array
        srcEpgMatchErrs:
          items:
            $ref: '#/components/schemas/NatRuleRelationshipChangesError'
          type: array
        ticketError:
          $ref: '#/components/schemas/TicketError'
      type: object
    NatRuleInfoChange:
      properties:
        appNatType:
          enum:
            - MATCH
            - STATIC
          type: string
        description:
          type: string
        dstNatType:
          enum:
            - MATCH
            - STATIC
          type: string
        enabled:
          type: boolean
        ruleGroup:
          type: string
        srcNatType:
          enum:
            - MATCH
            - STATIC
            - HIDE
          type: string
      type: object
    NatRuleRelationshipChangesError:
      properties:
        add:
          items:
            format: uuid
            type: string
          type: array
        errorMessage:
          type: string
        rem:
          items:
            format: uuid
            type: string
          type: array
        ticketError:
          $ref: '#/components/schemas/TicketError'
      type: object
    NatTranslatedInfoChange:
      properties:
        ap:
          $ref: '#/components/schemas/RelationshipChanges'
        dstEp:
          $ref: '#/components/schemas/RelationshipChanges'
        srcEp:
          $ref: '#/components/schemas/RelationshipChanges'
      type: object
    NetworkDevice:
      properties:
        hostname:
          type: string
        id:
          type: string
        ipAddress:
          type: string
        osVersion:
          type: string
        port:
          format: int32
          type: integer
      required:
        - id
        - port
      type: object
    OtherInternetProtocol:
      properties:
        protocol:
          enum:
            - '{"number":1,"name":"icmp"}'
            - '{"number":2,"name":"igmp"}'
            - '{"number":89,"name":"ospfigp"}'
            - '{"number":112,"name":"vrrp"}'
            - '{"number":57,"name":"skip"}'
            - '{"number":103,"name":"pim"}'
            - '{"number":47,"name":"gre"}'
            - '{"number":50,"name":"esp"}'
            - '{"number":51,"name":"ah"}'
            - '{"number":6,"name":"tcp"}'
            - '{"number":17,"name":"udp"}'
          type: string
        timeout:
          format: int32
          type: integer
      type: object
    PairStringListString:
      properties:
        key:
          type: string
        left:
          type: string
        right:
          items:
            type: string
          type: array
        value:
          items:
            type: string
          type: array
      type: object
    ParentChildRequestPair:
      properties:
        child:
          $ref: '#/components/schemas/ReqIdAndSystem'
        parent:
          $ref: '#/components/schemas/ReqIdAndSystem'
      type: object
    ParentChildZonePair:
      properties:
        childZoneId:
          type: string
        parentZoneId:
          type: string
      type: object
    ParentChildZonePairs:
      properties:
        parentChildZonePairs:
          items:
            $ref: '#/components/schemas/ParentChildZonePair'
          type: array
      type: object
    ParentNatRuleAppRelationship:
      properties:
        behaviour:
          enum:
            - MATCH
            - TRANSLATED
          type: string
        id:
          format: uuid
          type: string
        policyId:
          format: uuid
          type: string
      required:
        - behaviour
        - id
        - policyId
      type: object
    ParentNatRuleEndpointRelationship:
      properties:
        behaviour:
          enum:
            - MATCH
            - TRANSLATED
          type: string
        direction:
          enum:
            - DST
            - SRC
          type: string
        id:
          format: uuid
          type: string
        policyId:
          format: uuid
          type: string
      required:
        - behaviour
        - direction
        - id
        - policyId
      type: object
    ParentRuleRelationship:
      properties:
        direction:
          enum:
            - DST
            - SRC
          type: string
        id:
          format: uuid
          type: string
        policyId:
          format: uuid
          type: string
      required:
        - direction
        - id
        - policyId
      type: object
    PayloadImportTypeDetails:
      format: Payload in agnostic format
      properties:
        policy:
          $ref: '#/components/schemas/MpmPolicyImportBase'
        targetPolicyType:
          enum:
            - SECURITY
            - GOVERNANCE_PREPEND
            - GOVERNANCE_APPEND
            - NAT
          type: string
      type: object
    PbacAllRolesResponse:
      properties:
        roles:
          items:
            $ref: '#/components/schemas/PbacRole'
          properties:
            empty:
              type: boolean
          type: array
      type: object
    PbacPrivilege:
      properties:
        action:
          enum:
            - READ
            - WRITE
          type: string
        createdTime:
          format: date-time
          type: string
        entityId:
          format: uuid
          type: string
        entityType:
          enum:
            - MPM_MANAGER
          type: string
        roleId:
          type: string
      type: object
    PbacPrivilegeActionAndEntities:
      properties:
        action:
          enum:
            - READ
            - WRITE
          type: string
        entityIds:
          items:
            format: uuid
            type: string
          properties:
            empty:
              type: boolean
          type: array
      type: object
    PbacPrivilegeActionAndRoles:
      properties:
        action:
          enum:
            - READ
            - WRITE
          type: string
        roleIds:
          items:
            type: string
          properties:
            empty:
              type: boolean
          type: array
      type: object
    PbacPrivilegeRequest:
      properties:
        action:
          enum:
            - READ
            - WRITE
          type: string
        entityIds:
          items:
            format: uuid
            type: string
          properties:
            empty:
              type: boolean
          type: array
        entityType:
          enum:
            - MPM_MANAGER
          type: string
        roleId:
          type: string
      type: object
    PbacPrivilegeResolution:
      properties:
        actionsAllowed:
          items:
            enum:
              - READ
              - WRITE
            type: string
          type: array
        required:
          type: boolean
      type: object
    PbacPrivilegesForEntityResponse:
      properties:
        allowedActions:
          items:
            $ref: '#/components/schemas/PbacPrivilegeActionAndRoles'
          properties:
            empty:
              type: boolean
          type: array
        entityId:
          format: uuid
          type: string
      type: object
    PbacPrivilegesForRoleResponse:
      properties:
        allowedActions:
          items:
            $ref: '#/components/schemas/PbacPrivilegeActionAndEntities'
          properties:
            empty:
              type: boolean
          type: array
        roleId:
          type: string
      type: object
    PbacPrivilegesResponse:
      properties:
        privileges:
          items:
            $ref: '#/components/schemas/PbacPrivilege'
          properties:
            empty:
              type: boolean
          type: array
      type: object
    PbacRole:
      properties:
        description:
          type: string
        id:
          type: string
      type: object
    PbacRolesResponse:
      properties:
        roles:
          items:
            type: string
          properties:
            empty:
              type: boolean
          type: array
        user:
          type: string
      type: object
    PbacUserToRolesRequest:
      properties:
        roleIds:
          items:
            type: string
          properties:
            empty:
              type: boolean
          type: array
        userId:
          type: string
      type: object
    PbacUsersResponse:
      properties:
        roleId:
          type: string
        users:
          items:
            type: string
          properties:
            empty:
              type: boolean
          type: array
      type: object
    PcmRequest:
      properties:
        createdTime:
          format: date-time
          type: string
        externalReqPayload:
          type: string
        managedStatus:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
        manualStatus:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
        modifiedTime:
          format: date-time
          type: string
        objectIdRef:
          type: string
        reqAction:
          enum:
            - CREATE
            - UPDATE
            - DELETE
          type: string
        reqId:
          format: uuid
          type: string
        reqType:
          enum:
            - POLICY
            - APP_GROUP
            - ENDPOINT_GROUP
          type: string
        revision:
          format: int32
          type: integer
      type: object
    PensandoDscManagerApi:
      properties:
        credentialName:
          type: string
        hostDetails:
          items:
            $ref: '#/components/schemas/IntermediaryManagerHostDetails'
          type: array
        id:
          type: string
        metadata:
          $ref: '#/components/schemas/IntermediaryManagerMetadata'
        parentZoneId:
          type: string
        status:
          description: Monitoring Status
          enum:
            - INACTIVE
            - ACTIVE
          type: string
      required:
        - hostDetails
        - id
        - status
      type: object
    PensandoDscPdtManagerApi:
      properties:
        credentialName:
          type: string
        hostDetails:
          items:
            $ref: '#/components/schemas/IntermediaryManagerHostDetails'
          type: array
        id:
          type: string
        metadata:
          $ref: '#/components/schemas/IntermediaryManagerMetadata'
        parentZoneId:
          type: string
        status:
          description: Monitoring Status
          enum:
            - INACTIVE
            - ACTIVE
          type: string
      required:
        - hostDetails
        - id
        - status
      type: object
    PensandoDscPdtPolicyInformation:
      properties:
        enforcementPointId:
          type: string
        gwSetId:
          type: string
        policyName:
          type: string
      type: object
    PensandoDssManagerAddAddressesApi:
      properties:
        addresses:
          items:
            type: string
          type: array
        parentZoneId:
          type: string
        vlanId:
          format: int32
          type: integer
        vrfId:
          pattern: '[A-Za-z0-9]+[A-Za-z0-9-.]*[A-Za-z0-9]+'
          type: string
      required:
        - addresses
        - vlanId
        - vrfId
      type: object
    PensandoDssManagerApi:
      properties:
        credentialName:
          type: string
        hostDetails:
          items:
            $ref: '#/components/schemas/IntermediaryManagerHostDetails'
          type: array
        id:
          type: string
        metadata:
          $ref: '#/components/schemas/IntermediaryManagerMetadata'
        status:
          description: Monitoring Status
          enum:
            - INACTIVE
            - ACTIVE
          type: string
      required:
        - hostDetails
        - id
        - status
      type: object
    PensandoDssManagerCreateVrfApi:
      properties:
        vrfId:
          pattern: '[A-Za-z0-9]+[A-Za-z0-9-.]*[A-Za-z0-9]+'
          type: string
      required:
        - vrfId
      type: object
    PensandoDssManagerDeleteAddressesApi:
      properties:
        addresses:
          items:
            type: string
          type: array
        vlanId:
          format: int32
          type: integer
        vrfId:
          type: string
      required:
        - addresses
        - vlanId
        - vrfId
      type: object
    PensandoPdtAddAddressesToInfraApi:
      properties:
        address:
          $ref: '#/components/schemas/AddressWithZoneMatch'
        parentZone:
          type: string
      required:
        - address
      type: object
    PinaclVersion:
      properties:
        version:
          type: string
      type: object
    Policy:
      properties:
        natRules:
          items:
            $ref: '#/components/schemas/NatRule'
          type: array
        rules:
          items:
            $ref: '#/components/schemas/Rule'
          type: array
        version:
          format: int64
          type: integer
      type: object
    PolicyApi:
      properties:
        description:
          type: string
        id:
          example: id1
          format: 'Id should match this regex: ^[A-Za-z-_0-9~.]+$'
          type: string
        revision:
          format: int32
          type: integer
        rules:
          items:
            $ref: '#/components/schemas/RuleApi'
          type: array
      type: object
    PolicyChange:
      properties:
        action:
          enum:
            - CREATE
            - UPDATE
            - DELETE
          type: string
        body:
          $ref: '#/components/schemas/PolicyChangeBody'
        extId:
          type: string
        id:
          format: uuid
          type: string
      required:
        - action
        - id
      type: object
    PolicyChangeBody:
      properties:
        info:
          $ref: '#/components/schemas/PolicyInfoChange'
        natRules:
          items:
            $ref: '#/components/schemas/NatRuleChange'
          type: array
        ruleOrder:
          $ref: '#/components/schemas/PolicyRuleOrderChange'
        rules:
          items:
            $ref: '#/components/schemas/RuleChange'
          type: array
        targets:
          $ref: '#/components/schemas/TargetRelationshipChanges'
      type: object
    PolicyChangeError:
      properties:
        duplicateId:
          type: boolean
        duplicateName:
          type: boolean
        id:
          format: uuid
          type: string
        missing:
          type: boolean
        natRuleErrors:
          items:
            $ref: '#/components/schemas/NatRuleChangeError'
          type: array
        ruleErrs:
          items:
            $ref: '#/components/schemas/RuleChangeError'
          type: array
        ruleOrderErr:
          type: string
        targetErrs:
          $ref: '#/components/schemas/TargetRelationshipChangeError'
        ticketError:
          $ref: '#/components/schemas/TicketError'
        undeletedDeviceSetErrs:
          items:
            type: string
          type: array
      required:
        - id
      type: object
    PolicyInfoChange:
      properties:
        description:
          type: string
        name:
          type: string
        policyType:
          enum:
            - SECURITY
            - GOVERNANCE_PREPEND
            - GOVERNANCE_APPEND
            - NAT
          type: string
      type: object
    PolicyReference:
      properties:
        id:
          type: string
        ruleIds:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    PolicyRuleOrderChange:
      properties:
        newOrder:
          items:
            format: uuid
            type: string
          type: array
        oldOrder:
          items:
            format: uuid
            type: string
          type: array
      type: object
    PolicyUserApi:
      properties:
        description:
          type: string
        rules:
          items:
            $ref: '#/components/schemas/RuleApi'
          type: array
      required:
        - rules
      type: object
    ProtocolEnumObj:
      properties:
        name:
          type: string
        number:
          format: int32
          type: integer
      type: object
    ProtocolWithPort:
      properties:
        dstPortEnd:
          format: int32
          type: integer
        dstPortStart:
          format: int32
          type: integer
        dstPostStart:
          format: int32
          type: integer
          writeOnly: true
        protocol:
          enum:
            - '{"number":1,"name":"icmp"}'
            - '{"number":2,"name":"igmp"}'
            - '{"number":89,"name":"ospfigp"}'
            - '{"number":112,"name":"vrrp"}'
            - '{"number":57,"name":"skip"}'
            - '{"number":103,"name":"pim"}'
            - '{"number":47,"name":"gre"}'
            - '{"number":50,"name":"esp"}'
            - '{"number":51,"name":"ah"}'
            - '{"number":6,"name":"tcp"}'
            - '{"number":17,"name":"udp"}'
          type: string
        timeout:
          format: int32
          type: integer
      type: object
    PsmPdtAddAddressResponse:
      properties:
        affectedEntities:
          $ref: '#/components/schemas/PsmPdtTopologyAffectedEntities'
        reqId:
          format: uuid
          type: string
        requestingSystem:
          enum:
            - PCM
            - SDI
            - MPM
            - RED
            - SEEDING
            - TOPOLOGY
            - PCM_TOPOLOGY_CHANGE
            - SDI_TOPOLOGY_CHANGE
            - MPM_SECURITY_TOPOLOGY_CHANGE
            - MPM_POLICY_IMPORT
            - ZONE_PATH_TOPOLOGY_CHANGE
            - MPM_MULTI_POLICY_PUSH
            - GOVERNANCE_POLICY_DYNAMIC_GROUP_CHANGE
          type: string
      type: object
    PsmPdtRetireZoneResponse:
      properties:
        decommissionedGwSet:
          items:
            type: string
          type: array
          uniqueItems: true
        reqId:
          format: uuid
          type: string
        requestingSystem:
          enum:
            - PCM
            - SDI
            - MPM
            - RED
            - SEEDING
            - TOPOLOGY
            - PCM_TOPOLOGY_CHANGE
            - SDI_TOPOLOGY_CHANGE
            - MPM_SECURITY_TOPOLOGY_CHANGE
            - MPM_POLICY_IMPORT
            - ZONE_PATH_TOPOLOGY_CHANGE
            - MPM_MULTI_POLICY_PUSH
            - GOVERNANCE_POLICY_DYNAMIC_GROUP_CHANGE
          type: string
        zoneId:
          type: string
      type: object
    PsmPdtTopologyAffectedEntities:
      properties:
        enforcementPointId:
          type: string
        gwSetId:
          type: string
        zoneId:
          type: string
      type: object
    PushGatewayRequest:
      properties:
        createdTime:
          format: date-time
          type: string
        managedStatus:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
        modifiedTime:
          format: date-time
          type: string
        objectIdRef:
          type: string
        reqId:
          format: uuid
          type: string
      type: object
    PushGatewaySetResponse:
      properties:
        gatewaySetId:
          type: string
        reqId:
          format: uuid
          type: string
        requestingSystem:
          enum:
            - PCM
            - SDI
            - MPM
            - RED
            - SEEDING
            - TOPOLOGY
            - PCM_TOPOLOGY_CHANGE
            - SDI_TOPOLOGY_CHANGE
            - MPM_SECURITY_TOPOLOGY_CHANGE
            - MPM_POLICY_IMPORT
            - ZONE_PATH_TOPOLOGY_CHANGE
            - MPM_MULTI_POLICY_PUSH
            - GOVERNANCE_POLICY_DYNAMIC_GROUP_CHANGE
          type: string
      type: object
    RelationshipChangeError:
      properties:
        add:
          items:
            format: uuid
            type: string
          type: array
        rem:
          items:
            format: uuid
            type: string
          type: array
        ticketError:
          $ref: '#/components/schemas/TicketError'
      type: object
    RelationshipChanges:
      properties:
        add:
          items:
            format: uuid
            type: string
          type: array
        rem:
          items:
            format: uuid
            type: string
          type: array
      type: object
    ReqIdAndReqSystem:
      properties:
        id:
          example: 03502bc3-c140-4951-b467-bd17312a9b0b
          type: string
        requestingSystem:
          enum:
            - PCM
            - SDI
            - MPM
            - RED
            - SEEDING
            - TOPOLOGY
            - PCM_TOPOLOGY_CHANGE
            - SDI_TOPOLOGY_CHANGE
            - MPM_SECURITY_TOPOLOGY_CHANGE
            - MPM_POLICY_IMPORT
            - ZONE_PATH_TOPOLOGY_CHANGE
            - MPM_MULTI_POLICY_PUSH
            - GOVERNANCE_POLICY_DYNAMIC_GROUP_CHANGE
          type: string
      type: object
    ReqIdAndSystem:
      properties:
        reqId:
          format: uuid
          type: string
        reqSystem:
          enum:
            - PCM
            - SDI
            - MPM
            - RED
            - SEEDING
            - TOPOLOGY
            - PCM_TOPOLOGY_CHANGE
            - SDI_TOPOLOGY_CHANGE
            - MPM_SECURITY_TOPOLOGY_CHANGE
            - MPM_POLICY_IMPORT
            - ZONE_PATH_TOPOLOGY_CHANGE
            - MPM_MULTI_POLICY_PUSH
            - GOVERNANCE_POLICY_DYNAMIC_GROUP_CHANGE
          type: string
      type: object
    RequestAndChildrenStatusesResponse:
      properties:
        childRequestStatuses:
          items:
            $ref: '#/components/schemas/ChildRequestStatusResponse'
          type: array
        parentRequestStatus:
          $ref: '#/components/schemas/RequestStatusResponse'
      type: object
    RequestQueryApiResponse:
      properties:
        createdTime:
          format: date-time
          type: string
        errCode:
          enum:
            - INPUT_VALIDATION_ERROR
            - INPUT_VALIDATION_ERROR_OBJECT_DOES_NOT_EXIST
            - INPUT_VALIDATION_ERROR_OBJECT_ALREADY_EXISTS
            - INPUT_VALIDATION_ERROR_INVALID_REVISION
            - INPUT_VALIDATION_ERROR_EP_WITH_NO_ZONE
            - INPUT_VALIDATION_ERROR_PARSING_FAILED
          type: string
        reqId:
          format: uuid
          type: string
        reqStatus:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
        reqSystem:
          enum:
            - PCM
            - SDI
            - MPM
            - RED
            - SEEDING
            - TOPOLOGY
            - PCM_TOPOLOGY_CHANGE
            - SDI_TOPOLOGY_CHANGE
            - MPM_SECURITY_TOPOLOGY_CHANGE
            - MPM_POLICY_IMPORT
            - ZONE_PATH_TOPOLOGY_CHANGE
            - MPM_MULTI_POLICY_PUSH
            - GOVERNANCE_POLICY_DYNAMIC_GROUP_CHANGE
          type: string
        username:
          type: string
      type: object
    RequestResponse:
      properties:
        request:
          $ref: '#/components/schemas/ApiRequest'
      type: object
    RequestStatusResponse:
      properties:
        details:
          items:
            $ref: '#/components/schemas/GatewaySetDetails'
          type: array
        errCode:
          enum:
            - INPUT_VALIDATION_ERROR
            - INPUT_VALIDATION_ERROR_OBJECT_DOES_NOT_EXIST
            - INPUT_VALIDATION_ERROR_OBJECT_ALREADY_EXISTS
            - INPUT_VALIDATION_ERROR_INVALID_REVISION
            - INPUT_VALIDATION_ERROR_EP_WITH_NO_ZONE
            - INPUT_VALIDATION_ERROR_PARSING_FAILED
          type: string
        errMsg:
          type: string
        managedStatus:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
        manualStatus:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
        reqId:
          format: uuid
          type: string
        reqStatus:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
        reqSystem:
          enum:
            - PCM
            - SDI
            - MPM
            - RED
            - SEEDING
            - TOPOLOGY
            - PCM_TOPOLOGY_CHANGE
            - SDI_TOPOLOGY_CHANGE
            - MPM_SECURITY_TOPOLOGY_CHANGE
            - MPM_POLICY_IMPORT
            - ZONE_PATH_TOPOLOGY_CHANGE
            - MPM_MULTI_POLICY_PUSH
            - GOVERNANCE_POLICY_DYNAMIC_GROUP_CHANGE
          type: string
        sdiReqId:
          type: string
      type: object
    RequestStatusResponses:
      properties:
        requestStatuses:
          items:
            $ref: '#/components/schemas/RequestStatusResponse'
          type: array
      type: object
    RequestingSystemRequestDetails:
      properties:
        hasRequestDetail:
          type: boolean
        mpmGovernanceDynamicGroupRequest:
          $ref: '#/components/schemas/MpmGovernancePolicyDynamicGroupRequest'
        mpmRequest:
          items:
            $ref: '#/components/schemas/MpmRequest'
          type: array
        pcmRequest:
          $ref: '#/components/schemas/PcmRequest'
        pushGatewayRequest:
          $ref: '#/components/schemas/PushGatewayRequest'
        sdiRequest:
          $ref: '#/components/schemas/SdiRequest'
        topologyChangeRequest:
          $ref: '#/components/schemas/TopologyChangeRequest'
        topologyRequest:
          $ref: '#/components/schemas/ZoneTopologyRequest'
      type: object
    RequestsResponse:
      properties:
        requests:
          items:
            $ref: '#/components/schemas/ApiRequest'
          type: array
      type: object
    RequestsResponsePage:
      properties:
        cursor:
          example: '2023-06-01T10:20:32.234Z'
          title: Timestamp cursor for the last record on page
          type: string
        requests:
          items:
            $ref: '#/components/schemas/RequestQueryApiResponse'
          type: array
      type: object
    Rule:
      properties:
        action:
          enum:
            - PERMIT
            - DENY
          type: string
        destinations:
          items:
            $ref: '#/components/schemas/IpV4Address'
          type: array
        ruleOptions:
          $ref: '#/components/schemas/RuleOptions'
        services:
          $ref: '#/components/schemas/Services'
        sources:
          items:
            $ref: '#/components/schemas/IpV4Address'
          type: array
      type: object
    RuleApi:
      properties:
        appGroups:
          example:
            - appGroup1
          format: 'AppGroups should match this regex: ^[A-Za-z-_0-9~.]+$'
          items:
            example: '["appGroup1"]'
            format: 'AppGroups should match this regex: ^[A-Za-z-_0-9~.]+$'
            type: string
          type: array
        apps:
          example:
            - 6_ignore_80_80_null
          format: Apps should be a valid list of service strings
          items:
            example: '["6_ignore_80_80_null"]'
            format: Apps should be a valid list of service strings
            type: string
          type: array
        description:
          type: string
        destinationGroups:
          example:
            - destinationGroup1
          format: 'DestinationGroups should match this regex: ^[A-Za-z-_0-9~.]+$'
          items:
            example: '["destinationGroup1"]'
            format: 'DestinationGroups should match this regex: ^[A-Za-z-_0-9~.]+$'
            type: string
          type: array
        destinations:
          items:
            $ref: '#/components/schemas/EndpointWithTagApi'
          type: array
        id:
          example: id1
          format: 'Id should match this regex: ^[A-Za-z-_0-9~.]+$'
          type: string
        sourceGroups:
          example:
            - sourceGroup1
          format: 'SourceGroups should match this regex: ^[A-Za-z-_0-9~.]+$'
          items:
            example: '["sourceGroup1"]'
            format: 'SourceGroups should match this regex: ^[A-Za-z-_0-9~.]+$'
            type: string
          type: array
        sources:
          items:
            $ref: '#/components/schemas/EndpointWithTagApi'
          type: array
      required:
        - id
      type: object
    RuleChange:
      properties:
        action:
          enum:
            - CREATE
            - UPDATE
            - DELETE
          type: string
        body:
          $ref: '#/components/schemas/RuleChangeBody'
        extId:
          type: string
        id:
          format: uuid
          type: string
      required:
        - action
        - id
      type: object
    RuleChangeBody:
      properties:
        apgs:
          $ref: '#/components/schemas/RelationshipChanges'
        aps:
          $ref: '#/components/schemas/RelationshipChanges'
        dstDgs:
          $ref: '#/components/schemas/MpmDynamicGroupRelationshipChanges'
        dstEpgs:
          $ref: '#/components/schemas/RelationshipChanges'
        dstEps:
          $ref: '#/components/schemas/RelationshipChanges'
        info:
          $ref: '#/components/schemas/RuleInfoChange'
        srcDgs:
          $ref: '#/components/schemas/MpmDynamicGroupRelationshipChanges'
        srcEpgs:
          $ref: '#/components/schemas/RelationshipChanges'
        srcEps:
          $ref: '#/components/schemas/RelationshipChanges'
      type: object
    RuleChangeError:
      properties:
        apErrs:
          $ref: '#/components/schemas/RelationshipChangeError'
        apgErrs:
          $ref: '#/components/schemas/RelationshipChangeError'
        dgsInUnpinnedRule:
          type: boolean
        dstDgErrs:
          $ref: '#/components/schemas/MpmDynamicGroupRelationshipChangeError'
        dstEpErrs:
          $ref: '#/components/schemas/RelationshipChangeError'
        dstEpgErrs:
          $ref: '#/components/schemas/RelationshipChangeError'
        duplicateId:
          type: boolean
        id:
          format: uuid
          type: string
        missing:
          type: boolean
        srcDgErrs:
          $ref: '#/components/schemas/MpmDynamicGroupRelationshipChangeError'
        srcEpErrs:
          $ref: '#/components/schemas/RelationshipChangeError'
        srcEpgErrs:
          $ref: '#/components/schemas/RelationshipChangeError'
        ticketError:
          $ref: '#/components/schemas/TicketError'
      required:
        - id
      type: object
    RuleId:
      properties:
        id:
          format: uuid
          type: string
        policyId:
          format: uuid
          type: string
      required:
        - id
        - policyId
      type: object
    RuleInfoChange:
      properties:
        action:
          enum:
            - PERMIT
            - DENY
          type: string
        description:
          type: string
        enabled:
          type: boolean
        fullyPinned:
          type: boolean
        onClose:
          type: boolean
        onInit:
          type: boolean
        ruleGroup:
          type: string
      type: object
    RuleOptions:
      properties:
        logOnClose:
          type: boolean
        logOnInit:
          type: boolean
      type: object
    RuleSetApi:
      properties:
        id:
          type: string
        intermediaryManagerId:
          type: string
      type: object
    SdiRequest:
      properties:
        createdTime:
          format: date-time
          type: string
        externalReqPayload:
          type: string
        managedStatus:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
        manualStatus:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
        modifiedTime:
          format: date-time
          type: string
        reqId:
          format: uuid
          type: string
        reqType:
          enum:
            - PROVISION_FLOWS
          type: string
        sdiReqId:
          type: string
      type: object
    SearchCriteriaValue:
      properties:
        searchCriteria:
          type: string
      type: object
    ServiceNat:
      properties:
        any:
          type: boolean
        original:
          items:
            $ref: '#/components/schemas/ProtocolWithPort'
          type: array
        translation:
          $ref: '#/components/schemas/ProtocolWithPort'
        type:
          enum:
            - MATCH
            - STATIC
          type: string
      type: object
    Services:
      properties:
        applicationProtocols:
          items:
            $ref: '#/components/schemas/ApplicationProtocolImpl'
          type: array
        icmps:
          items:
            $ref: '#/components/schemas/Icmp'
          type: array
        isAnyService:
          type: boolean
        otherInternetProtocols:
          items:
            $ref: '#/components/schemas/OtherInternetProtocol'
          type: array
        protocolWithPorts:
          items:
            $ref: '#/components/schemas/ProtocolWithPort'
          type: array
        servicesAsCanonicalStrings:
          items:
            type: string
          type: array
      type: object
    SourceNat:
      properties:
        original:
          items:
            $ref: '#/components/schemas/IpV4Address'
          type: array
        translation:
          $ref: '#/components/schemas/IpV4Address'
        type:
          enum:
            - MATCH
            - STATIC
            - HIDE
          type: string
      type: object
    StringValue:
      properties:
        value:
          type: string
      type: object
    SubRequest:
      properties:
        errors:
          type: string
        executionCount:
          format: int32
          type: integer
        gatewaySetInfo:
          enum:
            - ACTIVE
            - HELD
            - SKIPPED
            - UNMANAGED
          type: string
        gwSetId:
          type: string
        modifiedTime:
          format: date-time
          type: string
        priorityValue:
          format: int32
          type: integer
        queuedTime:
          format: date-time
          type: string
        reqId:
          format: uuid
          type: string
        retryThreshold:
          format: int32
          type: integer
        subReqStatus:
          enum:
            - READY
            - IN_PROGRESS
            - HELD
            - SKIPPED
            - SUCCEEDED
            - ERRORED
          type: string
      type: object
    SubRequestInQueue:
      properties:
        errors:
          type: string
        executionCount:
          format: int32
          type: integer
        gatewaySetInfo:
          enum:
            - ACTIVE
            - HELD
            - SKIPPED
            - UNMANAGED
          type: string
        modifiedTime:
          format: date-time
          type: string
        position:
          format: int32
          type: integer
        priorityValue:
          format: int32
          type: integer
        queuedTime:
          format: date-time
          type: string
        reqId:
          format: uuid
          type: string
        requestingSystem:
          enum:
            - PCM
            - SDI
            - MPM
            - RED
            - SEEDING
            - TOPOLOGY
            - PCM_TOPOLOGY_CHANGE
            - SDI_TOPOLOGY_CHANGE
            - MPM_SECURITY_TOPOLOGY_CHANGE
            - MPM_POLICY_IMPORT
            - ZONE_PATH_TOPOLOGY_CHANGE
            - MPM_MULTI_POLICY_PUSH
            - GOVERNANCE_POLICY_DYNAMIC_GROUP_CHANGE
          type: string
        retryThreshold:
          format: int32
          type: integer
        status:
          enum:
            - READY
            - IN_PROGRESS
            - HELD
            - SKIPPED
            - SUCCEEDED
            - ERRORED
          type: string
      type: object
    SubRequestQueueResponse:
      properties:
        cursor:
          type: string
        queue:
          items:
            $ref: '#/components/schemas/SubRequestsInQueueByGatewaySet'
          type: array
      type: object
    SubRequestsInQueueByGatewaySet:
      properties:
        gatewaySetId:
          type: string
        subRequestsInQueue:
          items:
            $ref: '#/components/schemas/SubRequestInQueue'
          type: array
      type: object
    TagKeyPage:
      properties:
        cursor:
          type: string
        tagKeys:
          items:
            type: string
          type: array
      type: object
    TargetRelationshipChangeError:
      properties:
        add:
          items:
            type: string
          type: array
        natErrs:
          items:
            type: string
          type: array
        rem:
          items:
            type: string
          type: array
        ticketError:
          $ref: '#/components/schemas/TicketError'
      type: object
    TargetRelationshipChanges:
      properties:
        add:
          items:
            type: string
          type: array
        rem:
          items:
            type: string
          type: array
      type: object
    Task:
      properties:
        allocatedTime:
          format: date-time
          type: string
        completedTime:
          format: date-time
          type: string
        gwSetId:
          type: string
        taskId:
          type: string
        taskStatus:
          enum:
            - ALLOCATED
            - DISCARDED
            - SUCCEEDED
            - FAILED
          type: string
        workerId:
          type: string
      type: object
    TerminalZonePairs:
      properties:
        terminalZonePairs:
          items:
            $ref: '#/components/schemas/FromToZone'
          type: array
      type: object
    TicketError:
      properties:
        invalidTicket:
          type: boolean
        invalidTicketErr:
          type: string
        ticketRequired:
          type: boolean
      type: object
    TokenCredentialDetails:
      properties:
        token:
          type: string
      type: object
    TopologyChangeRequest:
      properties:
        createdTime:
          format: date-time
          type: string
        externalReqPayload:
          type: string
        managedStatus:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
        modifiedTime:
          format: date-time
          type: string
        reqId:
          format: uuid
          type: string
      type: object
    TopologyRequestResponse:
      properties:
        request:
          $ref: '#/components/schemas/ReqIdAndReqSystem'
      type: object
    TopologyRequestsResponse:
      properties:
        requests:
          items:
            $ref: '#/components/schemas/ReqIdAndReqSystem'
          type: array
      type: object
    TopologyTag:
      properties:
        priority:
          format: int32
          type: integer
        tagKey:
          type: string
        tagValue:
          type: string
      required:
        - tagKey
        - tagValue
      type: object
    TopologyTagKey:
      properties:
        id:
          type: string
        mutuallyExclusive:
          type: boolean
        required:
          type: boolean
        strict:
          type: boolean
      required:
        - id
        - mutuallyExclusive
        - required
        - strict
      type: object
    TopologyTagKeysApi:
      properties:
        tagKeys:
          items:
            $ref: '#/components/schemas/TopologyTagKey'
          type: array
      type: object
    TopologyTagsApi:
      properties:
        tags:
          items:
            $ref: '#/components/schemas/TopologyTag'
          type: array
      type: object
    TopologyTagsRequest:
      properties:
        tags:
          description: TopologyTag is combination of key and value pair separated by delimiter
          example:
            - value: tagKey:tagValue
          items:
            $ref: '#/components/schemas/StringValue'
          type: array
      type: object
    UndeletedAppRelationshipErrors:
      properties:
        grpRefs:
          items:
            format: uuid
            type: string
          type: array
        natRuleRefs:
          items:
            $ref: '#/components/schemas/ParentNatRuleAppRelationship'
          type: array
        ruleRefs:
          items:
            $ref: '#/components/schemas/RuleId'
          type: array
      type: object
    UndeletedEndpointRelationshipErrors:
      properties:
        grpRefs:
          items:
            format: uuid
            type: string
          type: array
        natRuleRefs:
          items:
            $ref: '#/components/schemas/ParentNatRuleEndpointRelationship'
          type: array
        ruleRefs:
          items:
            $ref: '#/components/schemas/ParentRuleRelationship'
          type: array
      type: object
    UpdateMonitoringStatusRequest:
      properties:
        managerId:
          type: string
        message:
          type: string
        status:
          type: boolean
      type: object
    UserToRole:
      properties:
        createdTime:
          format: date-time
          type: string
        modifiedTime:
          format: date-time
          type: string
        roleId:
          type: string
        userId:
          type: string
      type: object
    UsernamePasswordCredentialDetails:
      properties:
        password:
          type: string
        username:
          type: string
      type: object
    Zone:
      properties:
        aggregatedStubby:
          type: boolean
        child:
          type: boolean
        createdTime:
          format: date-time
          type: string
        id:
          type: string
        parentZone:
          type: string
        stubby:
          type: boolean
        type:
          enum:
            - DEFAULT
            - PSM_HOST
            - PSM_SUBNET
          type: string
      required:
        - id
      type: object
    ZoneId:
      properties:
        zone:
          type: string
      type: object
    ZoneIdPage:
      properties:
        cursor:
          type: string
        zoneIds:
          items:
            type: string
          type: array
      type: object
    ZoneIds:
      properties:
        zones:
          items:
            $ref: '#/components/schemas/IdValue'
          type: array
      type: object
    ZonePair:
      properties:
        zoneOneId:
          type: string
        zoneTwoId:
          type: string
      required:
        - zoneOneId
        - zoneTwoId
      type: object
    ZonePath:
      properties:
        nodes:
          items:
            $ref: '#/components/schemas/ZonePathNode'
          type: array
      type: object
    ZonePathId:
      properties:
        id:
          format: uuid
          type: string
      type: object
    ZonePathNode:
      properties:
        ids:
          items:
            type: string
          type: array
          uniqueItems: true
        type:
          enum:
            - ZONE
            - DEVICE
          type: string
      type: object
    ZonePathRequest:
      properties:
        zonePath:
          items:
            $ref: '#/components/schemas/ZoneId'
          type: array
      type: object
    ZonePaths:
      properties:
        zonePaths:
          items:
            $ref: '#/components/schemas/ZonePath'
          type: array
      type: object
    ZonePathsApiResponse:
      properties:
        zonePaths:
          items:
            $ref: '#/components/schemas/ZonePathId'
          type: array
      type: object
    ZoneResp:
      properties:
        id:
          type: string
      required:
        - id
      type: object
    ZoneTopologyRequest:
      properties:
        createdTime:
          format: date-time
          type: string
        externalReqPayload:
          type: string
        managedStatus:
          enum:
            - RECEIVED
            - VALIDATED
            - IN_PROGRESS
            - PENDING
            - SUCCEEDED
            - REJECTED
            - NOT_APPLICABLE
          type: string
        modifiedTime:
          format: date-time
          type: string
        reqAction:
          enum:
            - ADD
            - DELETE
          type: string
        reqId:
          format: uuid
          type: string
        reqType:
          enum:
            - ADDRESS
            - TAG
          type: string
        zoneId:
          type: string
      type: object
    Zones:
      properties:
        zones:
          items:
            $ref: '#/components/schemas/Zone'
          type: array
      type: object
  securitySchemes:
    BearerJWT:
      bearerFormat: jwt
      scheme: bearer
      type: http
info:
  title: Mesh Policy Engine API
  version: 6.0.0
openapi: 3.0.3
paths:
  /gateway-sets:
    get:
      description: 'Roles allowed: support,topology-rw'
      operationId: getGatewaySets
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewaySetRespPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get gateway sets
      tags:
        - Gateway
  /gateway-sets/status/{status}:
    get:
      description: 'Roles allowed: support,topology-rw'
      operationId: getGatewaySetsByStatus
      parameters:
        - in: path
          name: status
          required: true
          schema:
            enum:
              - ACTIVE
              - HELD
              - SKIPPED
              - UNMANAGED
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GatewaySetResp'
                type: array
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error
      summary: Retrieve firewalls in a particular status
      tags:
        - Gateway
  /gateway-sets/{id}:
    delete:
      description: |-
        Preconditions for deletion of GatewaySet : 
        GatewaySet is not locked and is in [SKIPPED or UNMANAGED] state
        SubRequests are in [ERRORED,SUCCEDED,SKIPPED,HELD] State
        No Task associated with GatewaySet
        Roles allowed: support,topology-rw
      operationId: deleteGatewaySet
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete gateway set by id
      tags:
        - Gateway
    get:
      description: 'Roles allowed: support,topology-rw'
      operationId: getGatewaySet
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewaySetResp'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get gateway set by id
      tags:
        - Gateway
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: createGatewaySet
      parameters:
        - in: path
          name: id
          required: true
          schema:
            example: id1
            format: 'Id should match this regex: ^[A-Za-z-_0-9~.]+$'
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GatewaySetApi'
        required: true
      responses:
        '200':
          description: Ok
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Add gateway set
      tags:
        - Gateway
    put:
      description: 'Roles allowed: support,topology-rw'
      operationId: updateGatewaySet
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GatewaySetApi'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update gateway set
      tags:
        - Gateway
  /gateway-sets/{id}/activate:
    put:
      description: 'Roles allowed: support,topology-rw'
      operationId: activate
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Set gateway set status to ACTIVE
      tags:
        - Gateway Status
  /gateway-sets/{id}/credential-name:
    patch:
      description: 'Roles allowed: support,topology-rw'
      operationId: updateCredentialName
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialNameRequest'
        required: true
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update gateway set's credential name
      tags:
        - Gateway
  /gateway-sets/{id}/decommission:
    put:
      description: 'Roles allowed: support,topology-rw'
      operationId: decommission
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Set gateway set status to SKIPPED
      tags:
        - Gateway Status
  /gateway-sets/{id}/disable-buckets:
    put:
      description: 'Roles allowed: support,topology-rw'
      operationId: disableUseBuckets
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Set gateway use buckets to false
      tags:
        - Gateway Policy Optimization
  /gateway-sets/{id}/enable-buckets:
    put:
      description: 'Roles allowed: support,topology-rw'
      operationId: enableUseBuckets
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Set gateway use buckets to true
      tags:
        - Gateway Policy Optimization
  /gateway-sets/{id}/maintenance:
    put:
      description: 'Roles allowed: support,topology-rw'
      operationId: maintenanceForFwSet
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Set gateway set status to HELD
      tags:
        - Gateway Status
  /gateway-sets/{id}/unmanaged:
    put:
      description: 'Roles allowed: support,topology-rw'
      operationId: unmanaged
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Set gateway set status to UNMANAGED
      tags:
        - Gateway Status
  /mpm/app-protocols:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getAppProtocols
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApplicationProtocolEnumObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the App Protocols mappings with IANA protocols
      tags:
        - MPM App
  /mpm/changeset:
    post:
      description: 'Roles allowed: support, mpm-rw'
      operationId: createChangeset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MpmChangesetUserApi'
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable, Manual policy manager pipeline is yet to complete the initial setup, please retry in sometime
      summary: Create Changeset
      tags:
        - MPM Changeset
  /mpm/changeset/content/action/{action}:
    post:
      description: 'Roles allowed: support, mpm-rw'
      operationId: createChangesetWithContent
      parameters:
        - in: path
          name: action
          required: true
          schema:
            enum:
              - CREATE
              - REBASE
              - RESOLVE_CONFLICT
              - VALIDATE
              - RESOLVE_ERROR
              - COMMIT
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MpmCreateChangesetWithContentApi'
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable, Manual policy manager pipeline is yet to complete the initial setup, please retry in sometime
      summary: 'Create Changeset with Content '
      tags:
        - MPM Changeset
  /mpm/changeset/{changesetId}:
    delete:
      description: 'Roles allowed: support,mpm-rw'
      operationId: deleteChangeset
      parameters:
        - in: path
          name: changesetId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete the Changeset
      tags:
        - MPM Changeset
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getChangeset
      parameters:
        - in: path
          name: changesetId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmChangeset'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the Changeset using changesetId
      tags:
        - MPM Changeset
    put:
      description: 'Roles allowed: support, mpm-rw'
      operationId: updateChangesetContent
      parameters:
        - in: path
          name: changesetId
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MpmChangesetContent'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update Changeset content
      tags:
        - MPM Changeset
  /mpm/changeset/{changesetId}/action/{action}:
    post:
      description: 'Roles allowed: support, mpm-rw'
      operationId: changesetAction
      parameters:
        - in: path
          name: changesetId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: action
          required: true
          schema:
            enum:
              - CREATE
              - REBASE
              - RESOLVE_CONFLICT
              - VALIDATE
              - RESOLVE_ERROR
              - COMMIT
            type: string
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Perform an action on the Changeset
      tags:
        - MPM Changeset
  /mpm/changeset/{changesetId}/conflict:
    get:
      description: 'Roles allowed: support, mpm-rw,mpm-ro'
      operationId: getChangesetConflict
      parameters:
        - in: path
          name: changesetId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmConflict'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the Changeset conflict using changesetId
      tags:
        - MPM Changeset Rebase
    put:
      description: 'Roles allowed: support, mpm-rw'
      operationId: updateChangesetConflict
      parameters:
        - in: path
          name: changesetId
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MpmConflictUpdate'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update changeset content and conflict objects
      tags:
        - MPM Changeset Rebase
  /mpm/changeset/{changesetId}/error:
    get:
      description: 'Roles allowed: support, mpm-rw,mpm-ro'
      operationId: getChangesetError
      parameters:
        - in: path
          name: changesetId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmChangesetContentError'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the Changeset error using changesetId
      tags:
        - MPM Changeset Validation
    put:
      description: 'Roles allowed: support, mpm-rw'
      operationId: updateChangesetError
      parameters:
        - in: path
          name: changesetId
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MpmChangesetErrorUpdate'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update changeset content and error objects
      tags:
        - MPM Changeset Validation
  /mpm/changesets:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getChangesets
      parameters:
        - in: query
          name: status
          schema:
            enum:
              - DRAFT
              - SUBMITTED
              - CONFLICT_DETECTED
              - ERROR_DETECTED
              - COMMITTED
            type: string
        - in: query
          name: lastTimestamp
          schema:
            type: string
        - in: query
          name: lastChangesetId
          schema:
            format: uuid
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmChangesetsPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get all the changesets
      tags:
        - MPM Changeset
  /mpm/diff/manager/{managerId}/app-group/{appGroupId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getAppGroupChangesBetweenRevisions
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: appGroupId
          required: true
          schema:
            format: uuid
            type: string
        - in: query
          name: leftRevision
          schema:
            format: int32
            type: integer
        - in: query
          name: rightRevision
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmAppGroupRevisionDiff'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the diff of App group between two revisions
      tags:
        - MPM Entities Revision Diff
  /mpm/diff/manager/{managerId}/app/{appId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getAppChangesBetweenRevisions
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: appId
          required: true
          schema:
            format: uuid
            type: string
        - in: query
          name: leftRevision
          schema:
            format: int32
            type: integer
        - in: query
          name: rightRevision
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmAppRevisionDiff'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the diff of App between two revisions
      tags:
        - MPM Entities Revision Diff
  /mpm/diff/manager/{managerId}/endpoint-group/{endpointGroupId}:
    get:
      description: 'Roles allowed: support, mpm-rw,mpm-ro'
      operationId: getEndpointGroupDiffBetweenRevisions
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: endpointGroupId
          required: true
          schema:
            format: uuid
            type: string
        - in: query
          name: leftRevision
          schema:
            format: int32
            type: integer
        - in: query
          name: rightRevision
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmEndpointGroupRevisionDiff'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get endpoint group difference between two revisions
      tags:
        - MPM Entities Revision Diff
  /mpm/diff/manager/{managerId}/endpoint/{endpointId}:
    get:
      description: 'Roles allowed: support, mpm-rw,mpm-ro'
      operationId: getEndpointDiffBetweenRevisions
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: endpointId
          required: true
          schema:
            format: uuid
            type: string
        - in: query
          name: leftRevision
          schema:
            format: int32
            type: integer
        - in: query
          name: rightRevision
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmEndpointRevisionDiff'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get endpoint difference between two revisions
      tags:
        - MPM Entities Revision Diff
  /mpm/diff/manager/{managerId}/policy/{policyId}:
    get:
      description: 'Roles allowed: support, mpm-rw,mpm-ro'
      operationId: getPolicyDiffBetweenRevisions
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: policyId
          required: true
          schema:
            format: uuid
            type: string
        - in: query
          name: leftRevision
          schema:
            format: int32
            type: integer
        - in: query
          name: rightRevision
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmPolicyRevisionDiff'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get policy difference between two revisions
      tags:
        - MPM Entities Revision Diff
  /mpm/entities-referenced-by-rules/dynamic-groups:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getMpmDynamicGroupMpmRuleList
      parameters:
        - in: query
          name: revisionId
          schema:
            format: int32
            type: integer
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmDynamicGroupMpmRulesPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the list of dynamic group Id used in mpm rules based on revision id
      tags:
        - Dynamic Group
  /mpm/head-revision:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getHeadRevision
      responses:
        '200':
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable, Manual policy manager pipeline is yet to complete the initial setup, please retry in sometime
      summary: Get the head revision
      tags:
        - MPM Revision
  /mpm/install-targets/ids/{revisionId}:
    put:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getInstallTargetsByIds
      parameters:
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
              uniqueItems: true
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmGatewaySetResp'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the install-targets by ids for a particular revision
      tags:
        - Install Target
  /mpm/install-targets/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getInstallTargets
      parameters:
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            type: integer
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmGatewaySetsPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the install-targets for a particular revision
      tags:
        - Install Target
  /mpm/manager/{managerId}/app-group/{appGroupId}/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getAppGroup
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: appGroupId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmAppGroupObj'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the app group in a manager at revision
      tags:
        - MPM App Group
  /mpm/manager/{managerId}/app-groups/ids/{revisionId}:
    put:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getAppGroupsByIdsInBulk
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: uuid
                type: string
              type: array
              uniqueItems: true
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmAppGroupObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      summary: Get the app groups in a manager at revision in Bulk
      tags:
        - MPM App Group
  /mpm/manager/{managerId}/app-groups/names/{revisionId}:
    put:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getAppGroupsByNamesInBulk
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
              uniqueItems: true
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmAppGroupObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      summary: Get the app groups in a manager at revision in Bulk
      tags:
        - MPM App Group
  /mpm/manager/{managerId}/app-groups/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getAppGroups
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmAppGroupsPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the app groups in a manager at revision
      tags:
        - MPM App Group
  /mpm/manager/{managerId}/app-groups/{revisionId}/name/{appGroupNamePrefix}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getAppGroupsByAppGroupNamePrefix
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: path
          name: appGroupNamePrefix
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmAppGroupObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the app groups in a manager at revision by appGroup prefix name
      tags:
        - MPM Search
  /mpm/manager/{managerId}/app/{appId}/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getApp
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: appId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmAppObj'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the app in a manager at revision
      tags:
        - MPM App
  /mpm/manager/{managerId}/apps/ids/{revisionId}:
    put:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getAppsByIdsInBulk
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: uuid
                type: string
              type: array
              uniqueItems: true
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmAppObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      summary: Get the apps in a manager at revision in bulk
      tags:
        - MPM App
  /mpm/manager/{managerId}/apps/names/{revisionId}:
    put:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getAppsByNamesInBulk
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
              uniqueItems: true
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmAppObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      summary: Get the apps in a manager at revision in bulk
      tags:
        - MPM App
  /mpm/manager/{managerId}/apps/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getApps
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmAppsPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the apps in a manager at revision
      tags:
        - MPM App
  /mpm/manager/{managerId}/apps/{revisionId}/name/{appNamePrefix}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getAppsByAppNamePrefix
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: path
          name: appNamePrefix
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmAppObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the apps in a manager at revision by app prefix name
      tags:
        - MPM Search
  /mpm/manager/{managerId}/apps/{revisionId}/value:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getAppsAndAppGroupsResultByAppValue
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: query
          name: appValue
          required: true
          schema:
            type: string
        - in: query
          name: searchCriteria
          schema:
            default: CONTAINS
            enum:
              - CONTAINS
              - CONTAINED
              - EQUALS
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmAppsAndAppGroupsResult'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the apps and app-groups in a manager at revision by app value
      tags:
        - MPM Search
  /mpm/manager/{managerId}/endpoint-group/{endpointGroupId}/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getEndpointGroup
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: endpointGroupId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmEndpointGroupObj'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the endpoint group in a manager at revision
      tags:
        - MPM Endpoint Group
  /mpm/manager/{managerId}/endpoint-groups/ids/{revisionId}:
    put:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getEndpointGroupsByIdsInBulk
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: uuid
                type: string
              type: array
              uniqueItems: true
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmEndpointGroupObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      summary: Get the endpoint groups in a manager at revision in bulk
      tags:
        - MPM Endpoint Group
  /mpm/manager/{managerId}/endpoint-groups/names/{revisionId}:
    put:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getEndpointGroupsByNamesInBulk
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
              uniqueItems: true
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmEndpointGroupObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      summary: Get the endpoint groups in a manager at revision in bulk
      tags:
        - MPM Endpoint Group
  /mpm/manager/{managerId}/endpoint-groups/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getEndpointGroups
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmEndpointGroupsPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the endpoint groups in a manager at revision
      tags:
        - MPM Endpoint Group
  /mpm/manager/{managerId}/endpoint-groups/{revisionId}/name/{endpointGroupNamePrefix}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getEndpointGroupsByEndpointGroupNamePrefix
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: path
          name: endpointGroupNamePrefix
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmEndpointObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the endpoint groups in a manager at revision by endpointGroup prefix name
      tags:
        - MPM Search
  /mpm/manager/{managerId}/endpoint/{endpointId}/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getEndpoint
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: endpointId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmEndpointObj'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the endpoint in a manager at revision
      tags:
        - MPM Endpoint
  /mpm/manager/{managerId}/endpoints/ids/{revisionId}:
    put:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getEndpointsByIdsInBulk
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: uuid
                type: string
              type: array
              uniqueItems: true
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmEndpointObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      summary: Get the endpoints in a manager at revision in bulk
      tags:
        - MPM Endpoint
  /mpm/manager/{managerId}/endpoints/names/{revisionId}:
    put:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getEndpointsByNamesInBulk
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
              uniqueItems: true
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmEndpointObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      summary: Get the endpoints in a manager at revision in bulk
      tags:
        - MPM Endpoint
  /mpm/manager/{managerId}/endpoints/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getEndpoints
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmEndpointsPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the endpoints in a manager at revision
      tags:
        - MPM Endpoint
  /mpm/manager/{managerId}/endpoints/{revisionId}/name/{endpointNamePrefix}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getEndpointsByEndpointNamePrefix
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: path
          name: endpointNamePrefix
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmEndpointObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the endpoints in a manager at revision by endpoint prefix name
      tags:
        - MPM Search
  /mpm/manager/{managerId}/endpoints/{revisionId}/value:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getEndpointsAndEndpointGroupsByEndpointValue
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: query
          name: endpointValue
          required: true
          schema:
            type: string
        - in: query
          name: searchCriteria
          schema:
            default: CONTAINS
            enum:
              - CONTAINS
              - CONTAINED
              - EQUALS
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmEndpointsAndEndpointGroupsResult'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the endpoints and endpoint-groups in a manager at revision by endpoint value
      tags:
        - MPM Search
  /mpm/manager/{managerId}/policies/ids/{revisionId}:
    put:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getPoliciesByIdsInBulk
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: uuid
                type: string
              type: array
              uniqueItems: true
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmPolicyWithoutRulesObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      summary: Get the policies in a manager at revision in bulk
      tags:
        - MPM Policy
  /mpm/manager/{managerId}/policies/names/{revisionId}:
    put:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getPoliciesByNamesInBulk
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
              uniqueItems: true
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmPolicyWithoutRulesObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      summary: Get the policies in a manager at revision in bulk
      tags:
        - MPM Policy
  /mpm/manager/{managerId}/policies/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getPolicies
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmPoliciesPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the policies in a manager at revision
      tags:
        - MPM Policy
  /mpm/manager/{managerId}/policies/{revisionId}/name/{policyNamePrefix}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getPoliciesByPolicyNamePrefix
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: path
          name: policyNamePrefix
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmPolicyWithoutRulesObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get policies in a manager at revision by policy prefix name
      tags:
        - MPM Search
  /mpm/manager/{managerId}/policy/{policyId}/all-rules/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getMpmRulesByPagination
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: policyId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: query
          name: cursor
          schema:
            format: uuid
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmRulesPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the Rule Objects in pagination for Manager Id, Policy ID and Revision ID
      tags:
        - MPM Rule
    put:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getRules
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: policyId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: uuid
                type: string
              type: array
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmRuleResp'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the Rule Objects for given Rule IDs, Manager Id, Policy ID and Revision ID
      tags:
        - MPM Rule
  /mpm/manager/{managerId}/policy/{policyId}/rules/{revisionId}:
    put:
      deprecated: true
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getRulesDeprecated
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: policyId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: uuid
                type: string
              type: array
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmRuleObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        '501':
          description: Not supported
      summary: Get the Rule Objects for given Rule IDs, Manager Id, Policy ID and Revision ID
      tags:
        - MPM Rule
  /mpm/manager/{managerId}/policy/{policyId}/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getPolicy
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: policyId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmPolicyObj'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the policy in a manager at revision
      tags:
        - MPM Policy
  /mpm/manager/{managerId}/policy/{policyId}/{revisionId}/search:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: searchRules
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: policyId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: query
          name: srcIp
          schema:
            example: 1.1.1.1/32
            format: Ip should be valid IPV4 address in CIDR notation
            type: string
        - in: query
          name: srcIpSearchCriteria
          schema:
            default: CONTAINS
            enum:
              - CONTAINS
              - CONTAINED
              - EQUALS
            type: string
        - in: query
          name: dstIp
          schema:
            example: 1.1.1.1/32
            format: Ip should be valid IPV4 address in CIDR notation
            type: string
        - in: query
          name: dstIpSearchCriteria
          schema:
            default: CONTAINS
            enum:
              - CONTAINS
              - CONTAINED
              - EQUALS
            type: string
        - in: query
          name: app
          schema:
            example: tcp40-80
            format: App format examples- icmp3:4, tcp80, tcp80-90, skip, pim, etc
            type: string
        - in: query
          name: appSearchCriteria
          schema:
            default: CONTAINS
            enum:
              - CONTAINS
              - CONTAINED
              - EQUALS
            type: string
        - in: query
          name: action
          schema:
            enum:
              - PERMIT
              - DENY
            type: string
        - in: query
          name: enabled
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmRuleSearchResults'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the policy in a manager at revision
      tags:
        - MPM Search
  /mpm/manager/{managerId}/relations/app-group/{appGroupId}/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getRelationsForAppGroup
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: appGroupId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmEntityRelations'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the Policies, Rules and App Groups related to an App Group
      tags:
        - MPM App Group
  /mpm/manager/{managerId}/relations/app/{appId}/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getRelationsForApp
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: appId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmEntityRelations'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the Policies, Rules and App Groups related to an App
      tags:
        - MPM App
  /mpm/manager/{managerId}/relations/endpoint-group/{endpointGroupId}/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getRelationsForEndpointGroup
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: endpointGroupId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmEntityRelations'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the Policies, Rules and Endpoint Groups related to an Endpoint Group
      tags:
        - MPM Endpoint Group
  /mpm/manager/{managerId}/relations/endpoint/{endpointId}/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getRelationsForEndpoint
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: endpointId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmEntityRelations'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the Policies, Rules and Endpoint Groups related to an Endpoint
      tags:
        - MPM Endpoint
  /mpm/manager/{managerId}/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getManager
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmManagerObj'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the manager at revision
      tags:
        - MPM Manager
  /mpm/managers/ids/{revisionId}:
    put:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getManagersByIdsInBulk
      parameters:
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: uuid
                type: string
              type: array
              uniqueItems: true
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmManagerObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      summary: Get the managers at revision in bulk
      tags:
        - MPM Manager
  /mpm/managers/names/{revisionId}:
    put:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getManagersByNamesInBulk
      parameters:
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
              uniqueItems: true
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmManagerObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      summary: Get the managers at revision in bulk
      tags:
        - MPM Manager
  /mpm/managers/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getManagers
      parameters:
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmManagersPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the managers at revision
      tags:
        - MPM Manager
  /mpm/managers/{revisionId}/name/{prefix}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getManagersByNamePrefix
      parameters:
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
        - in: path
          name: prefix
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmManagerObj'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the managers at revision by prefix
      tags:
        - MPM Manager
  /mpm/policy/multi-request:
    post:
      description: 'Roles allowed: support, mpm-rw'
      operationId: createMultiPolicyPushRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MpmMultiPolicyPushRequestApi'
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: 'Create a multi-policy Push Request '
      tags:
        - MPM Policy Push
  /mpm/policy/request:
    post:
      description: 'Roles allowed: support, mpm-rw'
      operationId: createPolicyPushRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MpmPolicyPushRequestApi'
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: 'Create Policy Push Request '
      tags:
        - MPM Policy Push
  /mpm/policy/request/gateway-set/{gwSetId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getPolicyPushRequests
      parameters:
        - in: path
          name: gwSetId
          required: true
          schema:
            type: string
        - in: query
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - in: query
          name: policyId
          required: true
          schema:
            format: uuid
            type: string
        - in: query
          name: lastReqId
          schema:
            format: uuid
            type: string
        - in: query
          name: lastTimestampInEpochMillis
          schema:
            format: int64
            type: integer
        - in: query
          name: multiRequestCursorId
          schema:
            format: uuid
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmPolicyPushRequestsPage'
          description: '200'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get policy push requests for gateway-set and manager
      tags:
        - MPM Policy Push
  /mpm/relations/dynamic-group/{dynamicGroupId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getRelationsForDynamicGroup
      parameters:
        - in: path
          name: dynamicGroupId
          required: true
          schema:
            type: string
        - in: query
          name: revisionId
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmDynamicGroupRelations'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the MPM Managers, Policies, Rules related to the Dynamic Group
      tags:
        - Dynamic Group
  /mpm/requests/{requestId}:
    get:
      description: 'Roles allowed: support,mpm-rw,mpm-ro'
      operationId: getRequest
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullRequestDetails'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get request details
      tags:
        - Request
  /mpm/requests/{requestId}/status:
    get:
      description: 'Roles allowed: support,mpm-rw,mpm-ro'
      operationId: getRequestStatus
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestStatusResponse'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get request status
      tags:
        - Request
  /mpm/revision/{revisionId}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getRevisionById
      parameters:
        - in: path
          name: revisionId
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmRevision'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the Revision by it's ID
      tags:
        - MPM Revision
  /mpm/search-criteria:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getSearchCriteria
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MpmSearchCriteriaResp'
                type: array
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the search criteria values
      tags:
        - MPM App
  /pcm/appgroups/{appGroupId}:
    get:
      description: 'Roles allowed: support,pcm-rw,pcm-ro'
      operationId: getAppGroup1
      parameters:
        - in: path
          name: appGroupId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppGroupApi'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get app group by id
      tags:
        - App Group
    post:
      description: 'Roles allowed: support,pcm-rw'
      operationId: createAppGroup
      parameters:
        - in: path
          name: appGroupId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppGroupUserApi'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Create app group
      tags:
        - App Group
  /pcm/appgroups/{appGroupId}/references:
    get:
      description: 'Roles allowed: support,pcm-rw,pcm-ro'
      operationId: getAppGroupReferences
      parameters:
        - in: path
          name: appGroupId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupReferences'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get all the direct references (Policy/Rules & App Groups) of app group by id
      tags:
        - App Group
  /pcm/appgroups/{appGroupId}/{version}:
    delete:
      description: |-
        Deleting an app group can cause a rule to become invalid when the rule has no other applications defined. Such rules will be removed along with the app group.

        Roles allowed: support,pcm-rw
      operationId: deleteAppGroup
      parameters:
        - in: path
          name: appGroupId
          required: true
          schema:
            type: string
        - in: path
          name: version
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete app group by id
      tags:
        - App Group
    put:
      description: 'Roles allowed: support,pcm-rw'
      operationId: updateAppGroup
      parameters:
        - in: path
          name: appGroupId
          required: true
          schema:
            type: string
        - in: path
          name: version
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppGroupUserApi'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update app group
      tags:
        - App Group
  /pcm/endpointgroups:
    get:
      description: 'Roles allowed: support, pcm-rw, pcm-ro'
      operationId: getAllEndpointGroups
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointGroupPageApi'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get all endpoint groups
      tags:
        - Endpoint Group
    put:
      description: 'Roles allowed: support,pcm-rw,pcm-ro'
      operationId: getExistingAndMissingEndpointGroupsByIdsInBulk
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointGroupIdListUserApi'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExistingAndMissingEndpointGroupsApi'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      summary: Get existing and missing endpoint groups by id in bulk
      tags:
        - Endpoint Group
  /pcm/endpointgroups/idPrefix/{endpointGroupIdPrefix}:
    get:
      description: 'Roles allowed: support, pcm-rw, pcm-ro'
      operationId: getEndpointGroupsByIdPrefix
      parameters:
        - in: path
          name: endpointGroupIdPrefix
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointGroupListApi'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get endpoint groups by ID prefix
      tags:
        - Endpoint Group
  /pcm/endpointgroups/{endpointGroupId}:
    get:
      description: 'Roles allowed: support,pcm-rw,pcm-ro'
      operationId: getEndpointGroup1
      parameters:
        - in: path
          name: endpointGroupId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointGroupApi'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get endpoint group by id
      tags:
        - Endpoint Group
    post:
      description: 'Roles allowed: support,pcm-rw'
      operationId: createEndpointGroup
      parameters:
        - in: path
          name: endpointGroupId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointGroupUserApi'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Create endpoint group
      tags:
        - Endpoint Group
  /pcm/endpointgroups/{endpointGroupId}/references:
    get:
      description: 'Roles allowed: support,pcm-rw,pcm-ro'
      operationId: getEndpointGroupReferences
      parameters:
        - in: path
          name: endpointGroupId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupReferences'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get all the direct references (Policy/Rules & Endpoint Groups) of endpoint group by id
      tags:
        - Endpoint Group
  /pcm/endpointgroups/{endpointGroupId}/{version}:
    delete:
      description: 'Roles allowed: support,pcm-rw'
      operationId: deleteEndpointGroup
      parameters:
        - in: path
          name: endpointGroupId
          required: true
          schema:
            type: string
        - in: path
          name: version
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete endpoint group by id
      tags:
        - Endpoint Group
    put:
      description: 'Roles allowed: support,pcm-rw'
      operationId: updateEndpointGroup
      parameters:
        - in: path
          name: endpointGroupId
          required: true
          schema:
            type: string
        - in: path
          name: version
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointGroupUserApi'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update endpoint group
      tags:
        - Endpoint Group
  /pcm/entities-referenced-by-rules/endpointgroups:
    get:
      description: 'Roles allowed: support, pcm-rw, pcm-ro'
      operationId: getEndpointGroupsReferencedByRules
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointGroupIdPageApi'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get all endpoint groups which are directly referenced by rules
      tags:
        - Endpoint Group
  /pcm/policies/{policyId}:
    get:
      description: |-
        Policy rule content might change over time as endpoint and application groups referenced are modified. If a rule becomes invalid as a result of changes to groups, PINACL will delete the rule on behalf of the user. An example of a rule becoming invalid is if a rule's only source ips are an endpoint group and that group gets deleted.

        Roles allowed: support,pcm-rw,pcm-ro
      operationId: getPolicy1
      parameters:
        - in: path
          name: policyId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyApi'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get current user policy state by policyId
      tags:
        - Policy
    post:
      description: 'Roles allowed: support,pcm-rw'
      operationId: createPolicy
      parameters:
        - in: path
          name: policyId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyUserApi'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Create user policy
      tags:
        - Policy
  /pcm/policies/{policyId}/{version}:
    delete:
      description: 'Roles allowed: support,pcm-rw'
      operationId: deletePolicy
      parameters:
        - in: path
          name: policyId
          required: true
          schema:
            type: string
        - in: path
          name: version
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete user policy
      tags:
        - Policy
    put:
      description: 'Roles allowed: support,pcm-rw'
      operationId: updatePolicy
      parameters:
        - in: path
          name: policyId
          required: true
          schema:
            type: string
        - in: path
          name: version
          required: true
          schema:
            format: int32
            minimum: 1
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyUserApi'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update user policy
      tags:
        - Policy
  /pcm/requests/child-requests/{requestId}/status:
    get:
      description: 'Roles allowed: support, pcm-rw, pcm-ro'
      operationId: getRequestAndChildrenStatuses
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestAndChildrenStatusesResponse'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get request status and its child request statuses
      tags:
        - Request
  /pcm/requests/status:
    post:
      description: 'Roles allowed: support, pcm-rw, pcm-ro'
      operationId: getPcmRequestStatusesBulk
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestsResponse'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestStatusResponses'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      summary: Get PCM request status by request ids
      tags:
        - Request
  /pcm/requests/{requestId}:
    get:
      description: 'Roles allowed: support, pcm-rw, pcm-ro'
      operationId: getRequest_1
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullRequestDetails'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get PCM request details
      tags:
        - Request
  /pcm/requests/{requestId}/manual/status/complete:
    patch:
      description: 'Roles allowed: support'
      operationId: completePcmManualRequestStatus
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Complete PCM manual request status
      tags:
        - Request
  /pcm/requests/{requestId}/status:
    get:
      description: 'Roles allowed: support, pcm-rw, pcm-ro'
      operationId: getRequestStatus_1
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestStatusResponse'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get PCM request status
      tags:
        - Request
  /pcm/requests/{requestId}/status/complete:
    patch:
      description: 'Roles allowed: support'
      operationId: completePcmRequestStatus
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Complete PCM request status
      tags:
        - Request
  /policy-import:
    post:
      description: 'Roles allowed: support, mpm-rw'
      operationId: importPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MpmPolicyImportApi'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      summary: Import policy
      tags:
        - Policy Import Service
  /policy-import/request/{id}:
    get:
      description: 'Roles allowed: support, mpm-rw, mpm-ro'
      operationId: getImportRequestStatus
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmPolicyImportRequestStatusApi'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpmPolicyImportRequestStatusApi'
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get Policy Import Status
      tags:
        - Policy Import Service
  /security/authentication/decode_pinacltoken:
    post:
      description: 'Roles allowed: all'
      operationId: decodePinaclToken
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Decode pinacl token
      tags:
        - Authentication
  /security/authentication/with_cdotoken:
    post:
      description: 'Roles allowed: all'
      operationId: cdoAuthToPinaclToken
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get pinacl token from cdo token
      tags:
        - Authentication
  /security/authentication/with_clientcredentialtoken:
    post:
      description: 'Roles allowed: all'
      operationId: clientCredentialTokenToPinaclToken
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get pinacl token from client credential token
      tags:
        - Authentication
  /security/authentication/with_idtoken:
    post:
      description: 'Roles allowed: all'
      operationId: idTokenToPinaclToken
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get pinacl token from id token
      tags:
        - Authentication
  /security/authentication/with_piamtoken:
    post:
      description: 'Roles allowed: all'
      operationId: piamTokenToPinaclToken
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get pinacl token from piam token
      tags:
        - Authentication
  /security/pbac/create-privileges:
    post:
      description: 'Roles allowed: entitlements-manager'
      operationId: createPrivileges
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PbacPrivilegeRequest'
        required: true
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Add new privileges for a role
      tags:
        - Policy Based Access Control Privilege
  /security/pbac/create-user-roles:
    post:
      description: 'Roles allowed: entitlements-manager'
      operationId: createUserToRoles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PbacUserToRolesRequest'
        required: true
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Assign roles for user
      tags:
        - Policy Based Access Control User
  /security/pbac/delete-privileges:
    post:
      description: 'Roles allowed: entitlements-manager'
      operationId: deletePrivileges
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PbacPrivilegeRequest'
        required: true
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete privileges for a role
      tags:
        - Policy Based Access Control Privilege
  /security/pbac/delete-user-roles:
    post:
      description: 'Roles allowed: entitlements-manager'
      operationId: deleteUserToRoles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PbacUserToRolesRequest'
        required: true
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete roles for user
      tags:
        - Policy Based Access Control User
  /security/pbac/privileges/entities:
    get:
      description: 'Roles allowed: entitlements-manager'
      operationId: getPrivilegesForEntity
      parameters:
        - in: query
          name: entityType
          required: true
          schema:
            enum:
              - MPM_MANAGER
            type: string
        - in: query
          name: entityId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get privileges for an entity
      tags:
        - Policy Based Access Control Privilege
  /security/pbac/privileges/roles/{id}:
    get:
      description: 'Roles allowed: entitlements-manager'
      operationId: getPrivilegesForRole
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get privileges for a role
      tags:
        - Policy Based Access Control Privilege
  /security/pbac/privileges/users:
    get:
      description: 'Roles allowed: entitlements-manager'
      operationId: getPrivilegesForUserForEntityType
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: entityType
          required: true
          schema:
            enum:
              - MPM_MANAGER
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get privileges for user
      tags:
        - Policy Based Access Control Privilege
  /security/pbac/privileges/users/{userId}/entities:
    get:
      description: 'Roles allowed: entitlements-manager'
      operationId: getPrivilegesForUserForEntity
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: entityType
          required: true
          schema:
            enum:
              - MPM_MANAGER
            type: string
        - in: query
          name: entityId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get privileges for user for entity
      tags:
        - Policy Based Access Control Privilege
  /security/pbac/roles:
    get:
      description: 'Roles allowed: entitlements-manager'
      operationId: getAllRoles
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get all roles
      tags:
        - Policy Based Access Control Role
    post:
      description: 'Roles allowed: entitlements-manager'
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PbacRole'
        required: true
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Create new PBAC role
      tags:
        - Policy Based Access Control Role
  /security/pbac/roles/{id}:
    delete:
      description: 'Roles allowed: entitlements-manager'
      operationId: deleteRole
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete existing PBAC role
      tags:
        - Policy Based Access Control Role
    get:
      description: 'Roles allowed: entitlements-manager'
      operationId: getRole
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get a role
      tags:
        - Policy Based Access Control Role
  /security/pbac/roles/{id}/users:
    get:
      description: 'Roles allowed: entitlements-manager'
      operationId: getUsersForRole
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get users for role
      tags:
        - Policy Based Access Control User
  /security/pbac/users/{id}/roles:
    get:
      description: 'Roles allowed: entitlements-manager'
      operationId: getRolesForUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get roles for user
      tags:
        - Policy Based Access Control User
  /security/roleassignments:
    get:
      description: 'Roles allowed: support'
      operationId: getAllRoleAssignments
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserToRole'
                type: array
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get roles assigned to all users
      tags:
        - API Entitlement
  /security/roleassignments/admin/{userId}:
    put:
      description: 'Roles allowed: all'
      operationId: addRoleAdmin
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Assign admin role to user
      tags:
        - API Entitlement
  /security/roleassignments/roles/{roleId}:
    get:
      description: 'Roles allowed: entitlements-manager,support'
      operationId: getUsersInRole
      parameters:
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get users in particular role
      tags:
        - API Entitlement
  /security/roleassignments/users/{userId}:
    get:
      description: 'Roles allowed: entitlements-manager,support'
      operationId: getUserRoles
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get roles of user
      tags:
        - API Entitlement
  /security/roleassignments/{roleId}/users/{userId}:
    delete:
      description: 'Roles allowed: entitlements-manager'
      operationId: deleteUserFromRole
      parameters:
        - in: path
          name: roleId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete role of user
      tags:
        - API Entitlement
    put:
      description: 'Roles allowed: entitlements-manager'
      operationId: addUserToRole
      parameters:
        - in: path
          name: roleId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Assign role to user
      tags:
        - API Entitlement
  /support/all-pinacl-candidate-policies:
    delete:
      description: 'Roles allowed: support'
      operationId: clearGwSetPolicyResults
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '405':
          description: Method Not Allowed
        '500':
          description: Internal Server Error
      summary: Delete all gateway set policies
      tags:
        - Support
  /support/backend-version:
    get:
      description: 'Roles allowed: all'
      operationId: getPinaclBackendVersion
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get backend version
      tags:
        - System Info
  /support/client_credential:
    get:
      description: 'Roles allowed: entitlements-manager'
      operationId: getSecretFromAWS
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCredentials'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get secret value from AWS secret
      tags:
        - AWS Client Credentials
    put:
      description: 'Roles allowed: entitlements-manager'
      operationId: updateSecretToAWS
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCredentials'
        required: true
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update secret value for secret in AWS
      tags:
        - AWS Client Credentials
  /support/frontend-version:
    get:
      description: 'Roles allowed: all'
      operationId: getPinaclFrontendVersion
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinaclVersion'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get frontend version
      tags:
        - System Info
  /support/gateway-set/{gwSetId}/reset-lock-counter:
    patch:
      description: 'Roles allowed: support'
      operationId: resetLockCounterForGatewaySet
      parameters:
        - in: path
          name: gwSetId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: '204'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Reset lock counter for gateway set id to allow policy push. Resetting the locks acquired by different systems internally, can lead to unexpected behaviour.
      tags:
        - Support
  /support/gateway-set/{gwSetId}/sub-request/priority/{priority}:
    put:
      description: 'Roles allowed: support'
      operationId: updatePriorityForSubRequestsByGatewaySetId
      parameters:
        - in: path
          name: gwSetId
          required: true
          schema:
            type: string
        - in: path
          name: priority
          required: true
          schema:
            format: int32
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Number of sub-requests whose priorities got updated
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update the priority value of sub-requests for gateway set
      tags:
        - Support
  /support/pinacl-candidate-policy/{gwSetId}:
    get:
      description: 'Roles allowed: support,topology-rw'
      operationId: retrieveLatestPolicyByGwSetId
      parameters:
        - in: path
          name: gwSetId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GwSetPolicyResponse'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '405':
          description: Method Not Allowed
        '500':
          description: Internal Server Error
      summary: Retrieve latest policy by gateway set id
      tags:
        - Support
  /support/push-gateway-set/{id}:
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: pushGatewaySet
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushGatewaySetResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Push latest policy for gateway set
      tags:
        - Support
  /support/requests:
    get:
      description: 'Roles allowed: support,topology-rw'
      operationId: getRequests
      parameters:
        - in: query
          name: reqSystem
          schema:
            enum:
              - PCM
              - SDI
              - MPM
              - RED
              - SEEDING
              - TOPOLOGY
              - PCM_TOPOLOGY_CHANGE
              - SDI_TOPOLOGY_CHANGE
              - MPM_SECURITY_TOPOLOGY_CHANGE
              - MPM_POLICY_IMPORT
              - ZONE_PATH_TOPOLOGY_CHANGE
              - MPM_MULTI_POLICY_PUSH
              - GOVERNANCE_POLICY_DYNAMIC_GROUP_CHANGE
            type: string
        - in: query
          name: reqStatus
          schema:
            enum:
              - RECEIVED
              - VALIDATED
              - IN_PROGRESS
              - PENDING
              - SUCCEEDED
              - REJECTED
              - NOT_APPLICABLE
            type: string
        - in: query
          name: user
          schema:
            type: string
        - description: ISO-8601 formatted timestamp
          examples:
            first:
              description: time component in minute resolution
              value: 2023-06-07T07:54
            second:
              description: time component in second resolution
              value: '2023-06-07T07:54:37'
            third:
              description: time component in millisecond resolution
              value: '2023-06-07T07:54:37.124Z'
          in: query
          name: startTime
          schema:
            format: date-time
            type: string
        - description: ISO-8601 formatted timestamp
          examples:
            first:
              description: time component in minute resolution
              value: 2023-06-07T07:54
            second:
              description: time component in second resolution
              value: '2023-06-07T07:54:37'
            third:
              description: time component in millisecond resolution
              value: '2023-06-07T07:54:37.124Z'
          in: query
          name: endTime
          schema:
            format: date-time
            type: string
        - in: query
          name: errorCode
          schema:
            enum:
              - INPUT_VALIDATION_ERROR
              - INPUT_VALIDATION_ERROR_OBJECT_DOES_NOT_EXIST
              - INPUT_VALIDATION_ERROR_OBJECT_ALREADY_EXISTS
              - INPUT_VALIDATION_ERROR_INVALID_REVISION
              - INPUT_VALIDATION_ERROR_EP_WITH_NO_ZONE
              - INPUT_VALIDATION_ERROR_PARSING_FAILED
            type: string
        - description: ISO-8601 formatted timestamp
          examples:
            first:
              description: time component in minute resolution
              value: 2023-06-07T07:54
            second:
              description: time component in second resolution
              value: '2023-06-07T07:54:37'
            third:
              description: time component in millisecond resolution
              value: '2023-06-07T07:54:37.124Z'
          in: query
          name: cursor
          schema:
            format: date-time
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestsResponsePage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get Requests
      tags:
        - Support
  /support/requests/{requestId}:
    get:
      description: 'Roles allowed: support,topology-rw'
      operationId: getRequest2
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullRequestDetails'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get request details
      tags:
        - Support
  /support/requests/{requestId}/gateway-sets/{gatewaySetId}/status/complete:
    patch:
      description: 'Roles allowed: support'
      operationId: completeSubRequestStatus
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: gatewaySetId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Complete sub-request status
      tags:
        - Support
  /support/requests/{requestId}/parent:
    get:
      description: 'Roles allowed: support'
      operationId: getParentRequest
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentChildRequestPair'
          description: Parent and child ids and requesting system
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get parent request for child request
      tags:
        - Support
  /support/requests/{requestId}/status:
    get:
      description: 'Roles allowed: support,topology-rw'
      operationId: getRequestStatus2
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestStatusResponse'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get request status
      tags:
        - Support
  /support/reviveSubRequestsByGatewaySetId/{gwSetId}:
    put:
      description: 'Roles allowed: support'
      operationId: reviveSubRequestsByGatewaySetId
      parameters:
        - in: path
          name: gwSetId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Revive the sub-request count for gateway set id
      tags:
        - Support
  /support/sub-requests/queue:
    get:
      description: 'Roles allowed: support,topology-rw'
      operationId: getSubRequestsQueue
      parameters:
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
        - in: query
          name: status
          schema:
            enum:
              - READY
              - IN_PROGRESS
              - HELD
              - SKIPPED
              - SUCCEEDED
              - ERRORED
            type: string
        - in: query
          name: gwSetId
          schema:
            type: string
        - in: query
          name: cursor
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubRequestQueueResponse'
          description: |-
            Sub-requests queue grouped by gateway-set and sorted by priority value and queued time.
            Includes only sub-requests in 'READY'/'IN_PROGRESS' when status param is not provided.
            Includes cursor which should be provided in the next call, if the response is multiple pages.
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get sub-requests queue - sorted by priority value and queued time
      tags:
        - Support
  /topology/default-parent-zone:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro,internal'
      operationId: getDefaultParentZone
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneResp'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get default parent zone
      tags:
        - Zone
  /topology/default-parent-zone/{zoneId}:
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: createDefaultParentZone
      parameters:
        - in: path
          name: zoneId
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Accepted
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Create default parent zone
      tags:
        - Zone
    put:
      description: 'Roles allowed: support,topology-rw'
      operationId: updateDefaultParentZone
      parameters:
        - in: path
          name: zoneId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update default parent zone
      tags:
        - Zone
  /topology/gateway-set/{id}/adjacent-parent-child-zone-pairs:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro,internal'
      operationId: getAdjacentParentChildZonePairsForGatewaySet
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParentChildZonePairs'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get adjacent parent-child zone pairs for gateway set
      tags:
        - Child Zone
  /topology/gateway-set/{id}/terminal-zone-pairs:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro,internal'
      operationId: getTerminalZonesForGatewaySet
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdjacentZones'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get terminal zones for gateway set
      tags:
        - Terminal Zone
  /topology/get-gateway-sets-for-child-zones:
    post:
      description: 'Roles allowed: support,topology-rw,topology-ro,internal'
      operationId: getGatewaySetsForChildZones
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChildZoneIds'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewaySets'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get gateway sets for child zones
      tags:
        - Child Zone
  /topology/get-gateway-sets-for-terminal-zone-pairs:
    post:
      description: 'Roles allowed: support,topology-rw,topology-ro,internal'
      operationId: getGatewaySetsForTerminalZonePairs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TerminalZonePairs'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewaySets'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get gateway sets for terminal zone pairs
      tags:
        - Terminal Zone
  /topology/get-zones-by-addresses-with-tags:
    post:
      description: 'Roles allowed: support,topology-rw,topology-ro,internal'
      operationId: getZonesByAddressWithTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressesWithTags'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressesWithTagsToZones'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get zones by address with tags collection
      tags:
        - Zone Address
  /topology/manager/cdo:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getIntermediaryManagerIds
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntermediaryManagerIdPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get all Intermediary managers
      tags:
        - Intermediary Manager
    patch:
      description: 'Roles allowed: support,topology-rw'
      operationId: updateIntermediaryManagerHosts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntermediaryManagerUpdateApi'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update Intermediary manager hosts
      tags:
        - Intermediary Manager
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: createCdoManager
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CdoManagerRequest'
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Create an intermediary manager for CDO
      tags:
        - Intermediary Manager
  /topology/manager/cdo/asa/gateway-set:
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: createAsaGatewaySetForCdoManager
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CdoAsaGatewaySetRequest'
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Create a gateway set for CDO ASA
      tags:
        - Intermediary Manager
  /topology/manager/cdo/gateway-set/{gwSetId}/manager:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getIntermediaryManagerIdForGatewaySet
      parameters:
        - in: path
          name: gwSetId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntermediaryManagerIdResponse'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get Intermediary manager for a gateway set
      tags:
        - Intermediary Manager
  /topology/manager/cdo/{managerId}:
    delete:
      description: 'Roles allowed: support,topology-rw'
      operationId: deleteIntermediaryManager
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete Intermediary manager
      tags:
        - Intermediary Manager
  /topology/manager/cdo/{managerId}/credential-name:
    patch:
      description: 'Roles allowed: support,topology-rw,internal'
      operationId: updateIntermediaryManagerCredentialName
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialNameRequest'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update Credential Name used by Intermediary Manager
      tags:
        - Intermediary Manager
  /topology/manager/cdo/{managerId}/gateway-sets:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getGatewaySetsForIntermediaryManager
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewaySets'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get gateway sets for an Intermediary manager
      tags:
        - Intermediary Manager
  /topology/manager/cdo/{managerId}/status:
    put:
      description: 'Roles allowed: support,topology-rw,internal'
      operationId: updateIntermediaryManagerStatus
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntermediaryManagerStatusRequest'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Activate /Deactivate Intermediary Manager
      tags:
        - Intermediary Manager
  /topology/manager/multi-cloud-defense:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getIntermediaryManagerIds_1
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntermediaryManagerIdPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get all Intermediary managers
      tags:
        - Intermediary Manager
    patch:
      description: 'Roles allowed: support,topology-rw'
      operationId: updateIntermediaryManagerHosts_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntermediaryManagerUpdateApi'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update Intermediary manager hosts
      tags:
        - Intermediary Manager
    post:
      description: |-
        Lower host priority field values indicate higher priorities during any actions performed by PINACL.

        Roles allowed: support,topology-rw
      operationId: createMultiCloudDefenseManager
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiCloudDefenseManagerApi'
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Create Multi Cloud Defense manager
      tags:
        - Intermediary Manager
  /topology/manager/multi-cloud-defense/gateway-set/{gwSetId}/manager:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getIntermediaryManagerIdForGatewaySet_1
      parameters:
        - in: path
          name: gwSetId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntermediaryManagerIdResponse'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get Intermediary manager for a gateway set
      tags:
        - Intermediary Manager
  /topology/manager/multi-cloud-defense/rule-set:
    post:
      description: |-
        Create a ruleset for multi cloud defense.

        Roles allowed: support,topology-rw
      operationId: createMultiCloudDefenseRuleSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleSetApi'
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Create Multi Cloud Defense Rule set
      tags:
        - Intermediary Manager
  /topology/manager/multi-cloud-defense/{managerId}:
    delete:
      description: 'Roles allowed: support,topology-rw'
      operationId: deleteIntermediaryManager_1
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete Intermediary manager
      tags:
        - Intermediary Manager
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getMultiCloudDefenseManager
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiCloudDefenseManagerApi'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get Multi Cloud Defense manager
      tags:
        - Intermediary Manager
  /topology/manager/multi-cloud-defense/{managerId}/credential-name:
    patch:
      description: 'Roles allowed: support,topology-rw,internal'
      operationId: updateIntermediaryManagerCredentialName_1
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialNameRequest'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update Credential Name used by Intermediary Manager
      tags:
        - Intermediary Manager
  /topology/manager/multi-cloud-defense/{managerId}/gateway-sets:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getGatewaySetsForIntermediaryManager_1
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewaySets'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get gateway sets for an Intermediary manager
      tags:
        - Intermediary Manager
  /topology/manager/multi-cloud-defense/{managerId}/status:
    put:
      description: 'Roles allowed: support,topology-rw,internal'
      operationId: updateIntermediaryManagerStatus_1
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntermediaryManagerStatusRequest'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Activate /Deactivate Intermediary Manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getIntermediaryManagerIds_2
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntermediaryManagerIdPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get all Intermediary managers
      tags:
        - Intermediary Manager
    patch:
      description: 'Roles allowed: support,topology-rw'
      operationId: updateIntermediaryManagerHosts_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntermediaryManagerUpdateApi'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update Intermediary manager hosts
      tags:
        - Intermediary Manager
    post:
      description: |-
        Lower host priority field values indicate higher priorities during any actions performed by PINACL.

        Roles allowed: support,topology-rw
      operationId: createPensandoDscManager
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PensandoDscManagerApi'
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Create Pensando DSC manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc-pdt:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getIntermediaryManagerIds_3
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntermediaryManagerIdPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get all Intermediary managers
      tags:
        - Intermediary Manager
    patch:
      description: 'Roles allowed: support,topology-rw'
      operationId: updateIntermediaryManagerHosts_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntermediaryManagerUpdateApi'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update Intermediary manager hosts
      tags:
        - Intermediary Manager
    post:
      description: |-
        Lower host priority field values indicate higher priorities during any actions performed by PINACL.

        Roles allowed: support,topology-rw
      operationId: createPensandoDscPdtManager
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PensandoDscPdtManagerApi'
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Create Pensando DSC PDT manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc-pdt/address/infra:
    patch:
      description: |-
        Retire subnet zone.

        Roles allowed: support,topology-rw
      operationId: retireSubnetZone
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressApi'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PsmPdtRetireZoneResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Retire Infra Subnet
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc-pdt/address/infra/{address}:
    delete:
      description: |-
        Delete Infra Subnet.

        Roles allowed: support,topology-rw
      operationId: deleteSubnetZone
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Delete Infra Subnet
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc-pdt/gateway-set/{gwSetId}/manager:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getIntermediaryManagerIdForGatewaySet_3
      parameters:
        - in: path
          name: gwSetId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntermediaryManagerIdResponse'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get Intermediary manager for a gateway set
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc-pdt/policy-details/{managerId}:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getPolicyInformationForManager
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PensandoDscPdtManagerApi'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get Policy details for Pensando DSC-PDT manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc-pdt/{managerId}:
    delete:
      description: 'Roles allowed: support,topology-rw'
      operationId: deleteIntermediaryManager_3
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete Intermediary manager
      tags:
        - Intermediary Manager
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getPensandoDscPdtManager
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
        - in: query
          name: includeMetadata
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PensandoDscPdtManagerApi'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get Pensando DSC manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc-pdt/{managerId}/credential-name:
    patch:
      description: 'Roles allowed: support,topology-rw,internal'
      operationId: updateIntermediaryManagerCredentialName_3
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialNameRequest'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update Credential Name used by Intermediary Manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc-pdt/{managerId}/gateway-sets:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getGatewaySetsForIntermediaryManager_3
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewaySets'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get gateway sets for an Intermediary manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc-pdt/{managerId}/pdt/{pdtId}:
    delete:
      description: |-
        Delete pdt from psm.

        Roles allowed: support,topology-rw
      operationId: deletePdtFromPsm
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
        - in: path
          name: pdtId
          required: true
          schema:
            type: string
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestsResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Delete pdt from psm
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc-pdt/{managerId}/pdt/{pdtId}/addresses/app:
    patch:
      description: |-
        Delete application addresses from pdt.

        Roles allowed: support,topology-rw
      operationId: deleteAddressesFromAppPolicy
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
        - in: path
          name: pdtId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressesApi'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Delete app addresses from pdt
      tags:
        - Intermediary Manager
    post:
      description: |-
        Add addresses to app policy for given managerId and pdtId.

        Roles allowed: support,topology-rw
      operationId: addAddressesToAppPolicy
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
        - in: path
          name: pdtId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressWithExactMatch'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PsmPdtAddAddressResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Add application addresses to a pdt
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc-pdt/{managerId}/pdt/{pdtId}/addresses/infra:
    patch:
      description: |-
        Delete infra address from a pdt.

        Roles allowed: support,topology-rw
      operationId: deleteAddressesFromInfraPolicy
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
        - in: path
          name: pdtId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressApi'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Delete infra address from a pdt
      tags:
        - Intermediary Manager
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: addAddressesToInfraPolicy
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
        - in: path
          name: pdtId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PensandoPdtAddAddressesToInfraApi'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PsmPdtAddAddressResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Add infra address to a pdt
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc-pdt/{managerId}/status:
    put:
      description: 'Roles allowed: support,topology-rw,internal'
      operationId: updateIntermediaryManagerStatus_3
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntermediaryManagerStatusRequest'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Activate /Deactivate Intermediary Manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc/addresses:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro,internal'
      operationId: getAddressesForManager
      parameters:
        - in: query
          name: managerId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressesApi'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get addresses for the Pensando DSC Manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc/gateway-set/{gwSetId}/manager:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getIntermediaryManagerIdForGatewaySet_2
      parameters:
        - in: path
          name: gwSetId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntermediaryManagerIdResponse'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get Intermediary manager for a gateway set
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc/monitor:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro,internal'
      operationId: getManagersToMonitor
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntermediaryManagersResponse'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get the Pensando DSC managers to be monitored
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc/monitor/reset-failures:
    patch:
      description: 'Roles allowed: support,topology-rw,internal'
      operationId: resetMonitoringFailures
      parameters:
        - in: query
          name: managerId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Reset the monitoring failures for the Pensando DSC Manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc/monitor/status:
    put:
      description: 'Roles allowed: support,internal'
      operationId: updateMonitoringStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMonitoringStatusRequest'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: 'Update the status after monitoring for the Pensando DSC manager '
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc/zone:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro,internal'
      operationId: getZoneForManager
      parameters:
        - in: query
          name: managerId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneResp'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get child zone for the Pensando DSC Manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc/{managerId}:
    delete:
      description: 'Roles allowed: support,topology-rw'
      operationId: deleteIntermediaryManager_2
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete Intermediary manager
      tags:
        - Intermediary Manager
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getPensandoDscManager
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
        - in: query
          name: includeMetadata
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PensandoDscManagerApi'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get Pensando DSC manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc/{managerId}/credential-name:
    patch:
      description: 'Roles allowed: support,topology-rw,internal'
      operationId: updateIntermediaryManagerCredentialName_2
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialNameRequest'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update Credential Name used by Intermediary Manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc/{managerId}/gateway-sets:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getGatewaySetsForIntermediaryManager_2
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewaySets'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get gateway sets for an Intermediary manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dsc/{managerId}/status:
    put:
      description: 'Roles allowed: support,topology-rw,internal'
      operationId: updateIntermediaryManagerStatus_2
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntermediaryManagerStatusRequest'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Activate /Deactivate Intermediary Manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dss:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getIntermediaryManagerIds_4
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntermediaryManagerIdPage'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get all Intermediary managers
      tags:
        - Intermediary Manager
    patch:
      description: 'Roles allowed: support,topology-rw'
      operationId: updateIntermediaryManagerHosts_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntermediaryManagerUpdateApi'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update Intermediary manager hosts
      tags:
        - Intermediary Manager
    post:
      description: |-
        Lower host priority field values indicate higher priorities during any actions performed by PINACL.

        Roles allowed: support,topology-rw
      operationId: createPensandoDssManager
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PensandoDssManagerApi'
        required: true
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Create Pensando DSS manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dss/add-subnets-to-vlan/{managerId}:
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: addSubnetsToVlan
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PensandoDssManagerAddAddressesApi'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Add subnets to VLAN for the Pensando DSS Manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dss/delete-subnets-from-vlan/{managerId}:
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: deleteSubnetsFromVlan
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PensandoDssManagerDeleteAddressesApi'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete subnets from VLAN for the Pensando DSS Manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dss/gateway-set/{gwSetId}/manager:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getIntermediaryManagerIdForGatewaySet_4
      parameters:
        - in: path
          name: gwSetId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntermediaryManagerIdResponse'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get Intermediary manager for a gateway set
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dss/{managerId}:
    delete:
      description: 'Roles allowed: support,topology-rw'
      operationId: deleteIntermediaryManager_4
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete Intermediary manager
      tags:
        - Intermediary Manager
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getPensandoDssManager
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
        - in: query
          name: includeMetadata
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PensandoDssManagerApi'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get Pensando DSS manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dss/{managerId}/credential-name:
    patch:
      description: 'Roles allowed: support,topology-rw,internal'
      operationId: updateIntermediaryManagerCredentialName_4
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialNameRequest'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Update Credential Name used by Intermediary Manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dss/{managerId}/gateway-sets:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getGatewaySetsForIntermediaryManager_4
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewaySets'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get gateway sets for an Intermediary manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dss/{managerId}/status:
    put:
      description: 'Roles allowed: support,topology-rw,internal'
      operationId: updateIntermediaryManagerStatus_4
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntermediaryManagerStatusRequest'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Activate /Deactivate Intermediary Manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dss/{managerId}/vrf:
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: createVrf
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PensandoDssManagerCreateVrfApi'
        required: true
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Create VRF for the Pensando DSS Manager
      tags:
        - Intermediary Manager
  /topology/manager/pensando-dss/{managerId}/vrf/{vrfId}:
    delete:
      description: 'Roles allowed: support,topology-rw'
      operationId: delete
      parameters:
        - in: path
          name: managerId
          required: true
          schema:
            type: string
        - in: path
          name: vrfId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete VRF from the Pensando DSS Manager
      tags:
        - Intermediary Manager
  /topology/requests/child-requests/{requestId}:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getChildRequestIds
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChildRequestsResponse'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get child request ids
      tags:
        - Request
  /topology/requests/child-requests/{requestId}/status:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getRequestWithChildren
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestAndChildrenStatusesResponse'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get request status and its child request statuses
      tags:
        - Request
  /topology/requests/{requestId}:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getRequest1
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullRequestDetails'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get request details
      tags:
        - Request
  /topology/requests/{requestId}/status:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getRequestStatus1
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestStatusResponse'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get request status
      tags:
        - Request
  /topology/support/decommission-queue:
    get:
      description: 'Roles allowed: support'
      operationId: getDecommissionQueueEntries
      parameters:
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
        - in: query
          name: cursor
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecomGwQueueEntry'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get all gwset entries in decommission queue
      tags:
        - Support
  /topology/support/decommission-queue/{gwSetId}:
    delete:
      description: 'Roles allowed: support'
      operationId: deleteEntryFromDecomQueue
      parameters:
        - in: path
          name: gwSetId
          required: true
          schema:
            type: string
      responses:
        '204':
          content:
            application/json: {}
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete gwset entry from decommission queue
      tags:
        - Support
  /topology/tag-keys:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getTopologyTagKeys
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagKeyPage'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get tag keys
      tags:
        - Topology Tag Key
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: upsertTopologyTagKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopologyTagKeysApi'
        required: true
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Upsert tag keys
      tags:
        - Topology Tag Key
  /topology/tags:
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: upsertTopologyTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopologyTagsApi'
        required: true
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Upsert tags
      tags:
        - Topology Tag
  /topology/zone:
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: createZones
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zones'
        required: true
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      summary: Create zones
      tags:
        - Zone
  /topology/zone-ids:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro,internal'
      operationId: getZoneIds
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            format: int32
            maximum: 256
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneIdPage'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get zone ids
      tags:
        - Zone
  /topology/zone-path:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getZonePathsForTerminalZonePair
      parameters:
        - in: query
          name: srcZone
          required: true
          schema:
            type: string
        - in: query
          name: dstZone
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZonePathsApiResponse'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get zone paths between terminal zones
      tags:
        - Zone Path
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: addZonePath
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZonePathRequest'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateZonePathApiResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Add zone path
      tags:
        - Zone Path
  /topology/zone-path/adj-zone-ds:
    delete:
      description: 'Roles allowed: support,topology-rw'
      operationId: deleteAdjacentZoneToGwSet
      parameters:
        - in: query
          name: zoneOneId
          required: true
          schema:
            type: string
        - in: query
          name: zoneTwoId
          required: true
          schema:
            type: string
        - in: query
          name: deviceSetId
          required: true
          schema:
            type: string
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Remove device set between adjacent zones
      tags:
        - Adjacent Zone
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: addAdjacentZonesToGwSets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdjacentZonesToGatewaySets'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestsResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      summary: Add device set between adjacent zones
      tags:
        - Adjacent Zone
  /topology/zone-path/adjacent-zones:
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: addAdjacentZones
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdjacentZones'
        required: true
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Add Adjacent zones
      tags:
        - Adjacent Zone
  /topology/zone-path/adjacent-zones/with-gateway-sets/zone/{id}:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getAdjacentZonesWithGWSet
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdjacentZonesToGatewaySets'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get Adjacent zones with GW set
      tags:
        - Adjacent Zone
  /topology/zone-path/adjacent-zones/zone/{id}:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getAdjacentZones
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdjacentZones'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get Adjacent zones
      tags:
        - Adjacent Zone
  /topology/zone-path/gateway-set/{id}:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getZonePathsForGatewaySet
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZonePaths'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get zone paths for gateway set id
      tags:
        - Zone Path
  /topology/zone-path/terminal-zone/{zoneId}:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getZonePathsForTerminalZone
      parameters:
        - in: path
          name: zoneId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZonePathsApiResponse'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get zone paths for terminal zone
      tags:
        - Zone Path
  /topology/zone-path/with-gateway-sets/{zonePathId}:
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getZonePathWithGatewaySets
      parameters:
        - in: path
          name: zonePathId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZonePath'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get zone path with device-sets
      tags:
        - Zone Path
  /topology/zone-path/{zonePathId}:
    delete:
      description: 'Roles allowed: support,topology-rw'
      operationId: deleteZonePath
      parameters:
        - in: path
          name: zonePathId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteZonePathApiResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete zone path
      tags:
        - Zone Path
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro'
      operationId: getZonePath
      parameters:
        - in: path
          name: zonePathId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZonePath'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get zone path
      tags:
        - Zone Path
  /topology/zone/{zoneId}:
    delete:
      description: 'Roles allowed: support,topology-rw,internal'
      operationId: deleteZone
      parameters:
        - in: path
          name: zoneId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneIds'
          description: Ok
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete zone
      tags:
        - Zone
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro,internal'
      operationId: getZone
      parameters:
        - in: path
          name: zoneId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get zone by id
      tags:
        - Zone
  /topology/zone/{zoneId}/addresses:
    delete:
      description: 'Roles allowed: support,topology-rw'
      operationId: deleteAllAddressesFromZone
      parameters:
        - in: path
          name: zoneId
          required: true
          schema:
            type: string
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete all addresses from zone
      tags:
        - Zone Address
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro,internal'
      operationId: getAllAddressesForZone
      parameters:
        - in: path
          name: zoneId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressWithZoneMatchApi'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get all addresses for zone
      tags:
        - Zone Address
    patch:
      description: 'Roles allowed: support,topology-rw,internal'
      operationId: deleteAddressesFromZone
      parameters:
        - in: path
          name: zoneId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressesApi'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete addresses from zone
      tags:
        - Zone Address
    post:
      description: 'Roles allowed: support,topology-rw,internal'
      operationId: addAddressesToZone
      parameters:
        - in: path
          name: zoneId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressWithZoneMatchApi'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyRequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Add addresses to zone
      tags:
        - Zone Address
  /topology/zone/{zoneId}/tag/{tag}:
    delete:
      description: 'Roles allowed: support,topology-rw'
      operationId: deleteTagFromZone
      parameters:
        - in: path
          name: zoneId
          required: true
          schema:
            type: string
        - in: path
          name: tag
          required: true
          schema:
            description: TopologyTag is combination of key and value pair separated by delimiter
            example: key:value
            type: string
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestResponse'
          description: Accepted
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete tag from zone
      tags:
        - Zone Tag
  /topology/zone/{zoneId}/tags:
    delete:
      description: 'Roles allowed: support,topology-rw'
      operationId: deleteAllTagsFromZone
      parameters:
        - in: path
          name: zoneId
          required: true
          schema:
            type: string
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestResponse'
          description: Accepted
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Delete all tags from zone
      tags:
        - Zone Tag
    get:
      description: 'Roles allowed: support,topology-rw,topology-ro,internal'
      operationId: getAllTagsForZone
      parameters:
        - in: path
          name: zoneId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyTagsApi'
          description: Ok
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Get all tags for zone
      tags:
        - Zone Tag
    post:
      description: 'Roles allowed: support,topology-rw'
      operationId: addTagsToZone
      parameters:
        - in: path
          name: zoneId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopologyTagsRequest'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestResponse'
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      summary: Add tags to zone
      tags:
        - Zone Tag
security:
  - BearerJWT: []
servers:
  - url: https://api.security.cisco.com/pinacl/api
