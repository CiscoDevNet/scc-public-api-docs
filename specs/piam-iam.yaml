components:
  headers:
    Date:
      schema:
        pattern: ^.*$
        type: string
    Location:
      schema:
        format: uri
        type: string
  responses:
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Insufficient permissions to complete the request
    GeneralError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: An unknown error occurred
      headers:
        Date:
          $ref: '#/components/headers/Date'
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request.
    NoContent:
      description: No content
    NotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Found
      headers:
        Date:
          $ref: '#/components/headers/Date'
    PredefinedFailed:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Predefined Failed - if group role exit for user. it will be returned
    UnableToCreateResource:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The request is not able to be authorized
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The request is not able to be authorized
    ValidationError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The request was invalid
      headers:
        Date:
          $ref: '#/components/headers/Date'
  schemas:
    AddEnterpriseAdminRequestBody:
      description: Represent request body for adding enterprise admin
      properties:
        userId:
          format: uuid
          type: string
      required:
        - userId
      type: object
    AssignedAdmins:
      properties:
        email:
          description: email of the assigned admin
          example: john.doe@xyz.com
          type: string
        id:
          description: id of the admin
          example: 00u251alpxbbASGcC0h8
          type: string
        name:
          description: name of the assigned admin
          example: John Doe
          type: string
    AssignedGroups:
      properties:
        id:
          description: id of the group
          example: 6280494d-dd0f-4655-b558-d36ce9a10655
          type: string
        name:
          description: name of the assigned group
          example: Group A
          type: string
    AssignedSubscriptions:
      properties:
        id:
          description: id of the subscription
          example: subs20251011
          type: string
        skus:
          items:
            properties:
              key:
                example: XDR-ESS
                type: string
              productsInfo:
                description: products on the subscription
                items:
                  properties:
                    assignedEntitlements:
                      description: entitlement quantity shared with the managed org
                      example: 200
                      type: integer
                    product:
                      example: Secure Access
                      type: string
                    productRegion:
                      example: US WEST 2
                      type: string
                  type: object
                type: array
            type: object
          type: array
    AuditLog:
      properties:
        description:
          example: User John doe logged in succesfully
          type: string
        deviceOs:
          example: Windows 11
          type: string
        eventDetails:
          example: John Doe successfully logged in from 192.168.0.1
          type: string
        eventType:
          enum:
            - user_login_success
            - user_login_failure
            - idp_user_created
          example: user_login_success
          type: string
        id:
          example: 9a13c96f-efcd-437f-9447-10ab50c4e9e2
          format: uuid
          type: string
        timestamp:
          description: ISO 8601 timestamp
          example: '2024-01-15T12:00:00Z'
          format: date-time
          type: string
        user:
          example: john_doe@cisco.com
          type: string
      type: object
    AuditLogRequest:
      properties:
        filters:
          properties:
            endDate:
              description: Filter for events before this date (ISO 8601 format)
              example: '2024-01-31T23:59:59Z'
              format: date-time
              type: string
            eventType:
              description: Filter by specific event types
              example:
                - user_login_success
                - user_login_failure
              items:
                enum:
                  - user_login_success
                  - user_login_failure
                  - idp_user_created
                type: string
              type: array
            startDate:
              description: Filter for events after this date (ISO 8601 format)
              example: '2024-01-01T00:00:00Z'
              format: date-time
              type: string
            user:
              description: Filter by specific users
              example:
                - user1
                - user2
              items:
                type: string
              type: array
          type: object
        limit:
          default: 30
          example: 30
          type: integer
        page:
          example: 1
          type: integer
        searchTerm:
          example: find this string
          type: string
        sortBy:
          default: timestamp:desc
          example: timestamp:desc
          type: string
      type: object
    BulkInviteUsersRequestBody:
      description: Represent request body for bulk invite operation
      properties:
        groupIds:
          items:
            type: string
          type: array
        roles:
          items:
            properties:
              roleId:
                type: string
              tenantId:
                type: string
            type: object
          type: array
        users:
          items:
            properties:
              email:
                type: string
              enterpriseRole:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              login:
                type: string
            required:
              - firstname
              - lastname
              - email
              - login
            type: object
          type: array
      required:
        - users
        - groupIds
        - roleIds
      type: object
    DefaultEnterprise:
      properties:
        createdAt:
          format: date-time
          type: string
        enterpriseID:
          format: uuid
          type: string
        userID:
          type: string
      type: object
    DetailedEnterprise:
      allOf:
        - $ref: '#/components/schemas/Enterprise'
        - properties:
            country:
              properties:
                label:
                  type: string
                value:
                  type: string
              type: object
            createdAt:
              format: date-time
              type: string
            domains:
              items:
                $ref: '#/components/schemas/Domain'
              type: array
            id:
              format: uuid
              type: string
            idps:
              items:
                $ref: '#/components/schemas/Idp'
              type: array
            name:
              type: string
            region:
              properties:
                label:
                  type: string
                value:
                  type: string
              type: object
          required:
            - id
            - name
          type: object
      description: An extension of enterprise that contains more sensitive metadata that only an admin would be permitted to see.
      type: object
    Domain:
      properties:
        domain:
          $ref: '#/components/schemas/DomainName'
        status:
          $ref: '#/components/schemas/DomainStatus'
      required:
        - domain
        - status
      type: object
    DomainName:
      example: cisco.com
      pattern: ^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$
      type: string
    DomainStatus:
      enum:
        - pending
        - verified
      type: string
    DomainValidationRequest:
      properties:
        domain:
          $ref: '#/components/schemas/DomainName'
        status:
          $ref: '#/components/schemas/DomainStatus'
        txtRecordValue:
          format: uuid
          type: string
        txtRecrod:
          example: _ciscosxsoverification.acme.com
          type: string
      required:
        - domain
        - txtRecord
        - txtRecordValue
        - status
      type: object
    Enterprise:
      description: Represents a specific enterprise, includes metadata all users associated with the enterprise would be permitted to see.
      properties:
        ManagedOrgIDs:
          items:
            format: uuid
            type: string
          type: array
        ManagerOrgIDs:
          items:
            format: uuid
            type: string
          type: array
        country:
          properties:
            label:
              type: string
            value:
              type: string
          type: object
        createdAt:
          format: date-time
          type: string
        displayName:
          type: string
        id:
          format: uuid
          type: string
        name:
          type: string
        region:
          properties:
            label:
              type: string
            value:
              type: string
          type: object
      required:
        - id
        - name
        - displayName
        - region
      type: object
    EnterpriseCreation:
      properties:
        domain:
          $ref: '#/components/schemas/DomainName'
        name:
          type: string
      required:
        - name
        - domain
      type: object
    EnterpriseDomain:
      properties:
        domain:
          $ref: '#/components/schemas/DomainName'
        enterpriseId:
          format: uuid
          type: string
      required:
        - enterpriseId
        - domain
      type: object
    EnterpriseProduct:
      properties:
        productKey:
          type: string
        productName:
          type: string
        tenants:
          items:
            properties:
              productLaunchURL:
                type: string
              region:
                type: string
              tenantId:
                format: uuid
                type: string
            required:
              - tenantId
              - region
              - productLaunchURL
            type: object
          type: array
      type: object
    EnterpriseSupportAccessStatusRequest:
      properties:
        supportAccessUntil:
          default: '2024-07-10T16:04:03Z'
          format: date-time
          type: string
      type: object
    EnterpriseSupportAccessStatusResponse:
      properties:
        supportAccessAllowed:
          default: false
          type: boolean
        supportAccessUntil:
          default: '2024-07-10T16:04:03Z'
          format: date-time
          type: string
      type: object
    EnterpriseUser:
      properties:
        activated:
          format: date-time
          type: string
        cdoUserId:
          type: string
        created:
          format: date-time
          type: string
        credentialProviderType:
          description: it is referencing same type as [provider object's type](https://developer.okta.com/docs/reference/api/users/#provider-object)
          enum:
            - OKTA
            - ACTIVE_DIRECTORY
            - LDAP
            - FEDERATION
            - SOCIAL
            - IMPORT
          type: string
        disabledBy:
          $ref: '#/components/schemas/ResponsibleActor'
        id:
          type: string
        isAdmin:
          default: false
          type: boolean
        lastLogin:
          format: date-time
          type: string
        lastUpdated:
          format: date-time
          type: string
        passwordChanged:
          format: date-time
          type: string
        profile:
          $ref: '#/components/schemas/EnterpriseUserProfile'
        status:
          enum:
            - STAGED
            - PROVISIONED
            - ACTIVE
            - RECOVERY
            - PASSWORD_EXPIRED
            - LOCKED_OUT
            - SUSPENDED
            - DEPROVISIONED
            - ENTERPRISE_DISABLED
          type: string
        statusChanged:
          format: date-time
          type: string
      required:
        - id
        - status
        - profile
      type: object
    EnterpriseUserFactor:
      properties:
        created:
          format: date-time
          type: string
        factorType:
          type: string
        id:
          type: string
        lastUpdated:
          format: date-time
          type: string
        provider:
          type: string
        status:
          type: string
      required:
        - id
        - factorType
        - provider
        - status
        - created
        - lastUpdated
      type: object
    EnterpriseUserProfile:
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        login:
          type: string
        mobilePhone:
          type: string
        secondEmail:
          type: string
      required:
        - firstName
        - lastName
        - login
        - email
      type: object
    EntitlementManagedOrg:
      example:
        id: 2b63ff9f-02e2-4f8e-ac98-b9e42c9feae1
        subscriptions:
          - id: subs20250110
            skus:
              - key: BPT-SEC
                quantity: 200
              - key: XDR-ESS
                quantity: 100
          - id: subs20250111
            skus:
              - key: UPT-SEC-ESS
                quantity: 200
      properties:
        id:
          description: id of the managed org
          example: 2b63ff9f-02e2-4f8e-ac98-b9e42c9feae1
          type: string
        subscriptions:
          items:
            $ref: '#/components/schemas/EntitlementSubscription'
          type: array
      required:
        - id
    EntitlementShareRequest:
      properties:
        managed_orgs:
          example:
            - id: 2b63ff9f-02e2-4f8e-ac98-b9e42c9feae1
              subscriptions:
                - id: subs20250110
                  skus:
                    - key: BPT-SEC
                      quantity: 200
                    - key: XDR-ESS
                      quantity: 200
                - id: subs20250111
                  skus: []
            - id: 3c74e892-f39d-47e6-8299-5759d941c053
              subscriptions:
                - id: subs20250110
                  skus:
                    - key: BPT-SEC
                      quantity: 200
                    - key: XDR-ESS
                      quantity: 100
                - id: subs20250113
                  skus:
                    - key: UPT-SEC-ESS
                      quantity: 200
          items:
            $ref: '#/components/schemas/EntitlementManagedOrg'
          type: array
      type: object
    EntitlementSubscription:
      properties:
        id:
          description: subscription id
          example: subs20250110
          type: string
        skus:
          items:
            properties:
              key:
                example: XDR-ESS
                type: string
              quantity:
                example: 200
                type: integer
            type: object
          type: array
      type: object
    Error:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
        - code
        - message
      type: object
    ExternalIdpGroupMappingCreateResponse:
      properties:
        enterpriseId:
          format: uuid
          type: string
        idpId:
          format: uuid
          type: string
        samlIdpIssuer:
          type: string
      type: object
    ExternalIdpGroupMappingInput:
      description: Request body for authorizedExternalIdps endpoint
      properties:
        idpId:
          format: uuid
          type: string
      type: object
    ExternalIdpGroupMappingListResponse:
      properties:
        enterpriseId:
          format: uuid
          type: string
        groupMappings:
          items:
            properties:
              idpGroupName:
                type: string
              rbacGroupId:
                format: uuid
                type: string
            required:
              - idpGroupName
              - rbacGroupId
            type: object
          type: array
        idpId:
          format: uuid
          type: string
        idpName:
          type: string
      type: object
    GroupAssignmentIdInput:
      format: uuid
      type: string
    IDPGroupMapping:
      properties:
        enterpriseId:
          format: uuid
          type: string
        groupMappings:
          items:
            properties:
              idpGroupName:
                type: string
              rbacGroupId:
                format: uuid
                type: string
            required:
              - idpGroupName
              - rbacGroupId
            type: object
          type: array
        idpId:
          format: uuid
          type: string
      type: object
    IDPGroupMappingInput:
      description: Represent request body for idp group operation
      properties:
        groupMappings:
          items:
            properties:
              idpGroupName:
                type: string
              idpId:
                format: uuid
                type: string
              isExternalIdp:
                default: false
                type: boolean
              rbacGroupId:
                format: uuid
                type: string
            required:
              - idpGroupName
              - rbacGroupId
            type: object
          type: array
      required:
        - groupMappings
      type: object
    Idp:
      properties:
        id:
          format: uuid
          type: string
        inputs:
          $ref: '#/components/schemas/IdpInputs'
        outputs:
          $ref: '#/components/schemas/IdpOutputs'
      required:
        - id
        - inputs
        - outputs
      type: object
    IdpInputs:
      properties:
        acsUrl:
          type: string
        audienceUrl:
          type: string
        cert:
          type: string
        domain:
          $ref: '#/components/schemas/DomainName'
        idpName:
          type: string
        idpType:
          type: string
        metadataFile:
          type: string
        requireMfa:
          type: boolean
      required:
        - idpName
        - idpType
        - requireMfa
        - domain
      type: object
    IdpOutputs:
      properties:
        acsUrl:
          type: string
        audienceUrl:
          type: string
        cert:
          type: string
        isEnabled:
          type: boolean
        metadataUrl:
          type: string
      required:
        - acsUrl
        - audienceUrl
        - cert
        - metadataUrl
        - isEnabled
      type: object
    IdpStatus:
      properties:
        id:
          format: uuid
          type: string
        isEnabled:
          type: boolean
      required:
        - id
        - isEnabled
      type: object
    InitialUser:
      properties:
        id:
          type: string
        pendingDomains:
          items:
            $ref: '#/components/schemas/PendingDomain'
          type: array
      required:
        - id
      type: object
    InviteUsersResponseBody:
      description: Represent response body for bulk invite or invite via file operation
      properties:
        errors:
          items:
            type: string
          type: array
        invitedUsersCount:
          type: integer
      required:
        - invitedUsersCount
      type: object
    LogoutEvent:
      properties:
        ipaddress:
          description: IP address of the user
          format: ipv4
          type: string
      required:
        - ipaddress
      type: object
    ManagerRelationship:
      properties:
        assigned_admins:
          items:
            $ref: '#/components/schemas/AssignedAdmins'
          type: array
        assigned_groups:
          example:
            - id: 6280494d-dd0f-4655-b558-d36ce9a10655
              name: Group A
          items:
            $ref: '#/components/schemas/AssignedGroups'
          type: array
        id:
          description: id of the org
          example: 2b63ff9f-02e2-4f8e-ac98-b9e42c9feae1
          type: string
        name:
          description: name of the org
          example: CDk Ltd
          type: string
        subscriptions:
          example:
            - id: subs20251011
              skus:
                - key: BPT-SEC-ESS
                  productInfo:
                    - assignedEntitlements: 200
                      product: Cisco XDR
                      productRegion: US-WEST-2
                    - assignedEntitlements: 200
                      product: Cisco Secure Endpoint
                      productRegion: GLOBAL
                    - assignedEntitlements: 200
                      product: Cisco Secure Email Threat Defense
                      productRegion: GLOBAL
          items:
            $ref: '#/components/schemas/AssignedSubscriptions'
          type: array
    MappingsIdPMigrationRequestBody:
      properties:
        groupMappings:
          items:
            properties:
              adIdpGroupId:
                format: uuid
                type: string
              idpGroupName:
                description: Group name must be within 128 characters and may allow specialy characters like hyphens, comma, and underscores but not others.
                type: string
              roles:
                items:
                  description: Role name that's actually a scope in CDO that the user will be recognized for in CDO. A static role for CDO with this scope needs to exist in Prometheus DB.
                  type: string
                type: array
              samlIdPIssuer:
                type: string
            required:
              - idpGroupName
              - samlIdPIssuer
              - roles
            type: object
          type: array
        idPId:
          description: If this IdP belongs the enterprise being requested then the groups are construed to be internal or else external.
          format: uuid
          type: string
        productInstanceId:
          description: This product instance must exist for the enterprise being requested and be for the product mention in the scope.
          format: uuid
          type: string
      required:
        - productInstanceId
        - groupMappings
      type: object
    MappingsIdPMigrationResponseBody:
      properties:
        enterpriseId:
          format: uuid
          type: string
        groupMappings:
          items:
            properties:
              idpGroupName:
                type: string
              rbacGroupId:
                format: uuid
                type: string
              rbacGroupName:
                type: string
              roles:
                items:
                  type: string
                type: array
              samlIdpIssuer:
                type: string
            required:
              - idpGroupName
              - rbacGroupId
              - roles
            type: object
          type: array
        idpId:
          format: uuid
          type: string
        productInstanceId:
          format: uuid
          type: string
      required:
        - enterpriseId
        - productInstanceId
        - groupMappings
      type: object
    OrgDetails:
      properties:
        id:
          description: id of the org
          example: 2b63ff9f-02e2-4f8e-ac98-b9e42c9feae1
          type: string
        name:
          description: name of the org
          example: Test Enterprise
          type: string
    PaginationSegment:
      description: General pagination segment
      properties:
        currentPage:
          type: integer
        pageSize:
          type: integer
        totalItems:
          type: integer
        totalPages:
          type: integer
      required:
        - pageSize
        - currentPage
        - totalPages
        - totalItems
      type: object
    PendingDomain:
      properties:
        createdAt:
          format: date-time
          type: string
        domain:
          type: string
        entityID:
          type: string
        expiresAt:
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/DomainStatus'
        txtRecord:
          example: _ciscosxsoverification.acme.com
          type: string
        txtRecordValue:
          format: uuid
          type: string
      required:
        - entityID
        - domain
      type: object
    PostManagedRelationshipResponse:
      properties:
        id:
          description: id of the org
          example: 2b63ff9f-02e2-4f8e-ac98-b9e42c9feae1
          type: string
        name:
          description: name of the org
          example: Test Enterprise
          type: string
        subscriptions:
          items:
            $ref: '#/components/schemas/AssignedSubscriptions'
          type: array
    RBACCustomRole:
      properties:
        enterpriseId:
          format: uuid
          type: string
        id:
          format: uuid
          type: string
        productId:
          type: integer
        roleDescription:
          type: string
        roleDisplayName:
          type: string
        scopes:
          items:
            type: string
          type: array
      type: object
    RBACCustomRoleHttpGetResp:
      properties:
        enterpriseId:
          format: uuid
          type: string
        id:
          format: uuid
          type: string
        product:
          description: The name of the product
          type: string
        productId:
          type: integer
        productKey:
          type: string
        roleDescription:
          type: string
        roleDisplayName:
          type: string
        scopes:
          items:
            type: string
          type: array
      type: object
    RBACCustomRoleInput:
      properties:
        applicationScopeIdToScope:
          properties:
            applicationScope:
              type: string
            scopes:
              items:
                type: string
              type: array
          type: object
        product:
          type: string
        roleDescription:
          type: string
        roleDisplayName:
          type: string
        scopes:
          items:
            type: string
          type: array
      type: object
    RBACCustomRoleProduct:
      properties:
        id:
          type: integer
        name:
          type: string
        productKey:
          type: string
      type: object
    RBACCustomRoleProductPermission:
      properties:
        description:
          type: string
        name:
          type: string
        productId:
          type: integer
        scope:
          type: string
      type: object
    RBACCustomRoleProductPermissionCreateInput:
      properties:
        description:
          type: string
        name:
          type: string
        scope:
          type: string
      type: object
    RBACCustomRoleProductPermissionPutInput:
      properties:
        description:
          type: string
        name:
          type: string
      type: object
    RBACGroup:
      description: RBAC user group
      properties:
        description:
          type: string
        enterpriseId:
          format: uuid
          type: string
        id:
          format: uuid
          type: string
        name:
          type: string
        type:
          description: Specifies whether the group is local or federated
          enum:
            - Local
            - Federated
          type: string
      required:
        - id
        - name
        - description
        - enterpriseId
      type: object
    RBACGroupAssignmentRole:
      description: Represent entity of RBAC group role assignment
      properties:
        groupId:
          format: uuid
          type: string
        id:
          format: uuid
          type: string
        roleId:
          format: uuid
          type: string
        tenantId:
          format: uuid
          type: string
      required:
        - id
        - groupId
        - roleId
        - tenantId
      type: object
    RBACGroupInputRequestBody:
      description: Represent request body for RBAC user group
      properties:
        description:
          type: string
        name:
          type: string
        type:
          description: Specifies whether the group is local or federated. Defaults to Local
          enum:
            - Local
            - Federated
          type: string
      required:
        - name
      type: object
    RBACListGroupsWithRelations:
      items:
        properties:
          mappedRoles:
            items:
              properties:
                groupId:
                  type: string
                id:
                  type: string
                roleId:
                  type: string
              type: object
            type: array
          rbacGroup:
            properties:
              description:
                type: string
              enterpriseId:
                type: string
              id:
                type: string
              name:
                type: string
            type: object
        type: object
      type: array
    RBACSharedGroupEnterpriseAssignment:
      properties:
        groupId:
          description: UUID of the group.
          type: string
        managedOrgs:
          items:
            properties:
              enterpriseRole:
                enum:
                  - Administrator
                example: Administrator
                type: string
              id:
                format: uuid
                type: string
              name:
                type: string
              region:
                properties:
                  label:
                    type: string
                  value:
                    type: string
                type: object
          type: array
        managerOrgs:
          items:
            properties:
              enterpriseRole:
                enum:
                  - Administrator
                example: Administrator
                type: string
              id:
                format: uuid
                type: string
              name:
                type: string
              region:
                properties:
                  label:
                    type: string
                  value:
                    type: string
                type: object
          type: array
    RBACUserAssignmentGroup:
      description: Represent entity of RBAC user group assignment
      properties:
        enterpriseId:
          format: uuid
          type: string
        groupId:
          format: uuid
          type: string
        id:
          format: uuid
          type: string
        userId:
          type: string
      required:
        - id
        - userId
        - enterpriseId
        - groupId
      type: object
    RBACUserAssignmentRole:
      description: Represent entity of RBAC user role assignment
      properties:
        enterpriseId:
          format: uuid
          type: string
        id:
          format: uuid
          type: string
        roleId:
          format: uuid
          type: string
        tenantId:
          format: uuid
          type: string
        userId:
          type: string
      required:
        - id
        - userId
        - enterpriseId
        - tenantId
        - roleId
      type: object
    RBACUserRole:
      properties:
        delegatable:
          type: boolean
        id:
          format: uuid
          type: string
        name:
          type: string
        product:
          type: string
        productKey:
          type: string
        roleDescription:
          type: string
        roleDisplayName:
          type: string
      type: object
    ResponsibleActor:
      properties:
        disabledAt:
          format: date-time
          type: string
        firstName:
          type: string
        id:
          format: uuid
          type: string
        lastName:
          type: string
      required:
        - id
        - disabledAt
        - firstName
        - lastName
      type: object
    RoleAssignmentIdInput:
      description: role and its tenant id input
      properties:
        roleId:
          format: uuid
          type: string
        tenantId:
          format: uuid
          type: string
      required:
        - roleId
        - tenantId
      type: object
    SharedGroupAccessInput:
      description: Represent request body for assigning shared group of manager enterprise to managed enterprise
      properties:
        groupIds:
          example:
            - 6280494d-dd0f-4655-b558-d36ce9a10655
            - 6280494d-dd0f-4655-b558-d36ce9a10656
          items:
            format: uuid
            type: string
          type: array
        managedOrgIds:
          items:
            format: uuid
            type: string
          type: array
        managedOrgRole:
          enum:
            - Administrator
          example: Administrator
          type: string
      required:
        - managedOrgIds
        - groupIds
        - managedOrgRole
      type: object
    UIAppScopeRepresentation:
      description: Description for UIAppScopeRepresentation
      properties:
        applicationScope:
          type: string
      required:
        - applicationScope
      type: object
    UpdateApplicationScopeForAllCustomRolesInput:
      description: The payload for the update CSW custom role application scope
      properties:
        applicationScope:
          type: string
      required:
        - applicationScope
      type: object
    UpdateEnterpriseRequestBody:
      description: Represent request body for updating enterprise name, displayName and region, required to have at least one param
      properties:
        country:
          properties:
            label:
              type: string
            value:
              type: string
          type: object
        displayName:
          type: string
        name:
          type: string
        region:
          properties:
            label:
              type: string
            value:
              type: string
          type: object
      type: object
    UpdatedIDPGroupMapping:
      properties:
        enterpriseId:
          format: uuid
          type: string
        groupMappings:
          items:
            properties:
              idpGroupName:
                type: string
              idpId:
                format: uuid
                type: string
              rbacGroupId:
                format: uuid
                type: string
            required:
              - idpGroupName
              - rbacGroupId
            type: object
          type: array
      type: object
    User:
      properties:
        adminOf:
          description: Enterprises that user is authorized to administer
          items:
            $ref: '#/components/schemas/DetailedEnterprise'
          type: array
        domains:
          items:
            $ref: '#/components/schemas/Domain'
          type: array
        email:
          format: email
          type: string
        managedBy:
          description: if the user is managed by an enterprise, this will be populated with that enterprise reference
          oneOf:
            - nullable: true
              type: object
            - $ref: '#/components/schemas/Enterprise'
      required:
        - email
      type: object
    UserEnterprise:
      description: Represents an enterprise and the requesting users role in it
      properties:
        country:
          properties:
            label:
              type: string
            value:
              type: string
          type: object
        createdAt:
          format: date-time
          type: string
        displayName:
          type: string
        id:
          format: uuid
          type: string
        isManager:
          type: boolean
        managedOrgIDs:
          items:
            format: uuid
            type: string
          type: array
        managerOrgIDs:
          items:
            format: uuid
            type: string
          type: array
        name:
          type: string
        region:
          properties:
            label:
              type: string
            value:
              type: string
          type: object
        userRole:
          type: string
      required:
        - id
        - name
        - userRole
      type: object
    UserEnumerationRepsBody:
      properties:
        securityCloud:
          items:
            type: string
          type: array
        user:
          $ref: '#/components/schemas/EnterpriseUser'
      required:
        - user
        - securityCloud
      type: object
    UserSettings:
      properties:
        timeZone:
          description: The preferred time zone for displaying times in the UI
          type: string
        visualMode:
          description: Defines if the UI should display light or dark mode
          enum:
            - light
            - dark
          type: string
      type: object
    organaizationsRelationship:
      properties:
        assigned_admins:
          items:
            $ref: '#/components/schemas/AssignedAdmins'
          type: array
        assigned_groups:
          example:
            - id: 6280494d-dd0f-4655-b558-d36ce9a10655
              name: Group A
          items:
            $ref: '#/components/schemas/AssignedGroups'
          type: array
        id:
          description: id of the org
          example: 2b63ff9f-02e2-4f8e-ac98-b9e42c9feae1
          type: string
        name:
          description: name of the org
          example: Test Enterprise
          type: string
        region:
          properties:
            label:
              example: North America
              type: string
            value:
              example: NAM
              type: string
          type: object
        subscriptions:
          example:
            - id: subs20251011
              skus:
                - key: BPT-SEC-ESS
                  productInfo:
                    - assignedEntitlements: 200
                      product: Cisco XDR
                      productRegion: US-WEST-2
                    - assignedEntitlements: 200
                      product: Cisco Secure Endpoint
                      productRegion: GLOBAL
                    - assignedEntitlements: 200
                      product: Cisco Secure Email Threat Defense
                      productRegion: GLOBAL
          items:
            $ref: '#/components/schemas/AssignedSubscriptions'
          type: array
  securitySchemes:
    OpenID:
      openIdConnectUrl: https://auth.example.com/.well-known/openid-configuration
      type: openIdConnect
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
    piamServiceTokenSecurity:
      flows:
        clientCredentials:
          scopes:
            security:attack-surface-mgmt:identity:mappings-migrate: Grants write and read access to Attack Surface Management product mappings migration APIs
            security:cdo:identity:mappings-migrate: Grants write and read access to CDO product mappings migration APIs
            security:cdo:public-api: Grants write and read access to CDO Public Group Directory APIs
            security:duo:identity:mappings-migrate: Grants write and read access to product mappings migration APIs for Duo Security
            security:etd:identity:mappings-migrate: Grants write and read access to Encrypted Traffic Analytics product mappings migration APIs
            security:panoptica:identity:mappings-migrate: Grants write and read access to Panoptica product mappings migration APIs
            security:secure-access:identity:mappings-migrate: Grants write and read access to Secure Access product mappings migration APIs
            security:secure-endpoint:identity:mappings-migrate: Grants write and read access to Secure Endpoint product mappings migration APIs
            security:secure-workload:identity:mappings-migrate: Grants write and read access to Secure Workload product mappings migration APIs
            security:vuln-mgmt:identity:mappings-migrate: Grants write and read access to Vulnerability Management product mappings migration APIs
            security:xdr:identity:mappings-migrate: Grants write and read access to XDR product mappings migration APIs
          tokenUrl: https://auth.example.com/oauth/token
      type: oauth2
info:
  description: APIs for creating and updating the customer enterprise, including user access control.
  title: Enterprise Manager API
  version: 1.4.0
openapi: 3.0.3
paths:
  /defaultEnterprise:
    get:
      description: Retrieves the default enterprise for the authenticated user.
      operationId: getDefaultEnterprise
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultEnterprise'
          description: Successful response with the default enterprise.
        '404':
          $ref: '#/components/responses/NotFoundError'
      summary: Get Default Enterprise
  /defaultEnterprise/{id}:
    put:
      description: Sets the default enterprise for the authenticated user.
      operationId: setDefaultEnterprise
      parameters:
        - description: The ID of the enterprise to set as default.
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultEnterprise'
          description: Successful response with the updated default enterprise.
        '500':
          description: Internal Server Error.
      summary: Set Default Enterprise
  /duoMfa/auth:
    get:
      description: Initiates the SCSO forgot password using Duo flow
      operationId: duoMfaAuth
      parameters:
        - description: URI encoded email of the user initiating the SCSO forgot password using Duo flow
          in: query
          name: email
          required: true
          schema:
            format: email
            properties:
              email:
                type: string
      responses:
        '302':
          description: Redirect URI to Duo prompt
          headers:
            Location:
              schema:
                type: string
  /duoMfa/auth/callback:
    get:
      description: The OAuth callback for the SCSO forgot password using Duo flow
      operationId: duoMfaAuthCallback
      parameters:
        - description: The OAuth state parameter.
          in: query
          name: state
          required: true
          schema:
            format: string
            properties:
              state:
                type: string
        - description: The OAuth code parameter (name duo_code in Duo's flow).
          in: query
          name: duo_code
          required: true
          schema:
            format: string
            properties:
              code:
                type: string
      responses:
        '302':
          description: Redirect URI back to the application with either the reset password URL for the user or the error URL.
          headers:
            Location:
              schema:
                type: string
  /enteprises/{id}/audit-logs:
    post:
      description: Fetch audit log events with pagination and flexible filters.
      operationId: getAuditLogs
      parameters:
        - description: ID of enterprise to fetch
          in: path
          name: id
          required: true
          schema:
            format: uuidÍ
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditLogRequest'
        description: Parameters for fetching audit logs
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  currentPage:
                    example: 1
                    type: integer
                  logs:
                    items:
                      $ref: '#/components/schemas/AuditLog'
                    type: array
                  totalPages:
                    example: 10
                    type: integer
                  totalRecords:
                    example: 100
                    type: integer
                type: object
          description: A list of paginated audit log events
        '400':
          content:
            application/json:
              schema:
                properties:
                  error:
                    example: Invalid filters format
                    type: string
                type: object
          description: Invalid request parameters or filter structure
        '500':
          content:
            application/json:
              schema:
                properties:
                  error:
                    example: Internal server error
                    type: string
                type: object
          description: Server error
      summary: Get paginated audit log events
  /enterprises:
    get:
      description: With no parameters, returns the list of enterprises the caller is an administrator of
      operationId: getEnterprises
      parameters:
        - description: If this query param is present and is value is true, this will additonally return all the enterprises that the user is a member of (regardless of admin status or not)
          in: query
          name: showAllMemberships
          schema:
            type: string
        - description: If this query param is present and is value is true, this will only return all the enterprises that the user is an admin of. This is to accommodate a future change
          in: query
          name: showOnlyAdminMemberships
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      anyOf:
                        - $ref: '#/components/schemas/UserEnterprise'
                    type: array
                type: object
          description: enterprise response
          headers:
            Date:
              $ref: '#/components/headers/Date'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      tags:
        - Org creation
      x-try-it-enabled: true
    post:
      description: API to create an enterprise
      operationId: createEnterprise
      requestBody:
        content:
          application/json:
            schema:
              properties:
                country:
                  properties:
                    label:
                      type: string
                    value:
                      type: string
                  type: object
                displayName:
                  type: string
                email:
                  type: string
                name:
                  type: string
                region:
                  properties:
                    label:
                      type: string
                    value:
                      type: string
                  type: object
              required:
                - email
                - name
                - displayName
                - region
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enterprise'
          description: successful
          headers:
            Date:
              $ref: '#/components/headers/Date'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - Org creation
      x-try-it-enabled: true
  /enterprises/createFromUser:
    post:
      description: |
        Use this method to create an enterprise by inferring a user from attached Authorization Token.
        Once the enterprise has been created, the authenticated user will be made an admin of that enterprise.
      operationId: createEnterpriseFromUser
      requestBody:
        content:
          application/json:
            schema:
              properties:
                country:
                  properties:
                    label:
                      type: string
                    value:
                      type: string
                  type: object
                displayName:
                  type: string
                name:
                  type: string
                region:
                  properties:
                    label:
                      type: string
                    value:
                      type: string
                  type: object
              required:
                - name
                - displayName
                - region
              type: object
        description: ''
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enterprise'
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
            Location:
              $ref: '#/components/headers/Location'
        '400':
          $ref: '#/components/responses/ValidationError'
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/onboardDomain:
    post:
      description: |
        Use this method to create an enterprise via a claimed domain.
        The authenticated user calling this method must have already completed the domain verification process for the domain being sent in the request body or else the enterprise creation will fail.
        Once the enterprise has been created, the authenticated user will be made an admin of that enterprise and the domain ownership will transfer to the enterprise.
      operationId: createEnterpriseFromDomain
      requestBody:
        content:
          application/json:
            schema:
              properties:
                domain:
                  $ref: '#/components/schemas/DomainName'
                name:
                  type: string
              type: object
        description: ''
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedEnterprise'
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
            Location:
              $ref: '#/components/headers/Location'
        '400':
          $ref: '#/components/responses/ValidationError'
  /enterprises/{enterpriseId}/rbac/customRoles/applicationScopes:
    get:
      operationId: getListApplicationScopes
      parameters:
        - description: Enterprise ID
          in: path
          name: enterpriseId
          required: true
          schema:
            format: uuid
            type: string
        - description: Filter application scopes by name (optional)
          in: query
          name: name
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UIAppScopeRepresentation'
                type: array
          description: Application scopes retrieved successfully
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Get list application scopes for a specific enterprise with optional name filtering.
  /enterprises/{enterpriseId}/rbac/customRoles/applicationScopes/{applicationScopeId}:
    delete:
      operationId: deleteApplicationScope
      parameters:
        - description: The ID of the enterprise
          in: path
          name: enterpriseId
          required: true
          schema:
            format: uuid
            type: string
        - description: The ID of the application scope
          in: path
          name: applicationScopeId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Delete application scope for all custom roles.
    put:
      description: Update the application scope for all relevant custom roles using the enterprise ID and application scope ID.
      operationId: updateApplicationScope
      parameters:
        - description: The ID of the enterprise
          in: path
          name: enterpriseId
          required: true
          schema:
            format: uuid
            type: string
        - description: The ID of the application scope
          in: path
          name: applicationScopeId
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApplicationScopeForAllCustomRolesInput'
        description: The input application scope that needs to be updated.
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
  /enterprises/{id}:
    delete:
      description: Deletes an enterprise (testing only), requires a token with prometheus:test:write scope
      operationId: deleteEnterprise
      parameters:
        - description: ID of enterprise to delete
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        default:
          $ref: '#/components/responses/GeneralError'
    get:
      description: Returns a single enterprise
      operationId: getEnterprise
      parameters:
        - description: ID of enterprise to fetch
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Enterprise'
                  - $ref: '#/components/schemas/DetailedEnterprise'
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - Org creation
      x-try-it-enabled: true
    put:
      description: Updates different attributes of an existing enterprise
      operationId: updateEnterprise
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEnterpriseRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Enterprise'
                  - $ref: '#/components/schemas/DetailedEnterprise'
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - Org creation
      x-try-it-enabled: true
  /enterprises/{id}/addManaged:
    post:
      description: Establishes management relationships between the specified manager organization and one or more existing organizations. All organizations must exist before creating relationships.
      operationId: addEnterpriseManagementRelationship
      parameters:
        - description: manager enterprise id. This API works only for the manager enterprise
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitlementShareRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  managedOrgs:
                    items:
                      $ref: '#/components/schemas/PostManagedRelationshipResponse'
                    type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - User is not an admin of the associated enterprise
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - User is not an admin of the associated enterprise
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
        - bearerAuth: []
      summary: Add management relationships to existing organizations
      tags:
        - Management Relationships
  /enterprises/{id}/admins:
    get:
      description: |
        List the admins belonging to the enterprise.

        Note: This api is only available for service accounts
      operationId: listEnterpriseAdmins
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: The numbers of items to return
          in: query
          name: limit
          schema:
            type: integer
        - description: The order, acsending or descending, of the items
          in: query
          name: order
          schema:
            enum:
              - asc
              - desc
              - ASC
              - DESC
            type: string
        - description: The pagination cursor for the next page
          in: query
          name: after
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/EnterpriseUser'
                    type: array
                type: object
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
            Link:
              description: The pagination cursor links
              schema:
                type: string
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
    post:
      description: Adds an already existing enterprise user to the enterprise admin group
      operationId: addEnterpriseAdmin
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddEnterpriseAdminRequestBody'
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/admins/{userId}:
    delete:
      description: |
        Remove an admin from the enterprise.
        Cannot remove itself; cannot remove admin if there is only one admin.
      operationId: removeEnterpriseAdmin
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The user ID
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/authorizedExternalIdps:
    get:
      operationId: listExternalIdp
      parameters:
        - description: The ID of the enterprise.
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/ExternalIdpGroupMappingListResponse'
                    type: array
                type: object
          description: success response
        default:
          $ref: '#/components/responses/GeneralError'
      summary: List authorize external IdP for this enterprise. Requires enterprise admin to invoke this endpoint.
      tags:
        - Authorized External IdPs
    post:
      operationId: addExternalIdp
      parameters:
        - description: The ID of the enterprise.
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalIdpGroupMappingInput'
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalIdpGroupMappingCreateResponse'
          description: 201 response
        default:
          $ref: '#/components/responses/GeneralError'
      summary: Authorize external IdP for this enterprise. Requires enterprise admin to invoke this endpoint.
      tags:
        - Authorized External IdPs
  /enterprises/{id}/authorizedExternalIdps/{idpId}:
    delete:
      operationId: deleteExternalIdp
      parameters:
        - description: The ID of the enterprise.
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: The ID of the authorized external IdP to be removed.
          in: path
          name: idpId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        default:
          $ref: '#/components/responses/GeneralError'
      summary: Delete authorized external IdP for this enterprise, will not delete the actual IdP. Requires enterprise admin to invoke this endpoint.
      tags:
        - Authorized External IdPs
  /enterprises/{id}/createManaged:
    post:
      description: Creates a new organization and establishes it as managed by the specified manager organization. This forms a management relationship between the two organizations.
      operationId: createEnterpriseManagementRelationship
      parameters:
        - description: manager enterprise id. This API works only for the manager enterprise
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                country:
                  properties:
                    label:
                      type: string
                    value:
                      type: string
                  type: object
                displayName:
                  type: string
                name:
                  type: string
                region:
                  properties:
                    label:
                      type: string
                    value:
                      type: string
                  type: object
              required:
                - name
                - displayName
                - region
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  managedOrgs:
                    items:
                      $ref: '#/components/schemas/PostManagedRelationshipResponse'
                    type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - User is not an admin of the associated enterprise
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden - User is not an admin of the associated enterprise
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
        - bearerAuth: []
      summary: Create a new managed organization
      tags:
        - Management Relationships
  /enterprises/{id}/domains:
    get:
      description: Reads from the domains table first to see if it has any verified domains. If such a one exists, it returns that domain. Else this API will read from the pending_domains table and return all the unverified domains the enterprise has. After 30 days, if the domain is unverified, the entry will be deleted by the TTL in DDB and thus this API will not return it.
      operationId: getEnterpriseDomains
      parameters:
        - description: ID of enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/PendingDomain'
                    type: array
                type: object
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
    post:
      description: Will begin the domain verification process for the enterprise. Action needs to done by the admin of the enterprise
      operationId: initiatePendingEnterpriseDomain
      parameters:
        - description: ID of enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                domain:
                  $ref: '#/components/schemas/DomainName'
              type: object
        description: ''
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingDomain'
          description: success
          headers:
            Date:
              $ref: '#/components/headers/Date'
            Location:
              $ref: '#/components/headers/Location'
        '400':
          $ref: '#/components/responses/ValidationError'
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/domains/{domain}:
    delete:
      description: Deletes a domain (testing only), requires a token with prometheus:test:write scope
      operationId: deleteDomain
      parameters:
        - description: Enterprise Id
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Domain name to be deleted
          in: path
          name: domain
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/domains/{domain}/verify:
    post:
      description: Will trigger the backend to attempt to verify the domain for the enterprise
      operationId: verifyPendingEnterpriseDomain
      parameters:
        - description: ID of enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: domain to verify
          in: path
          name: domain
          required: true
          schema:
            $ref: '#/components/schemas/DomainName'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
          description: Verification was successful, domain will be marked as verified
          headers:
            Date:
              $ref: '#/components/headers/Date'
            Location:
              $ref: '#/components/headers/Location'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: verification/claim was not successful
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/groupMappings:
    put:
      operationId: createIdpGroupMapping
      parameters:
        - description: The ID of the enterprise.
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDPGroupMappingInput'
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatedIDPGroupMapping'
          description: ''
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Create or update an IDP group mapping, if a set of group mappings exist for the IDP already, this should be updated in-place. Requires enterprise admin to invoke this endpoint.
  /enterprises/{id}/idps:
    get:
      description: returns list of idps associated with enterprise
      operationId: getEnterpriseIdps
      parameters:
        - description: ID of enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/Idp'
                    type: array
                type: object
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
    post:
      description: Creates an Identity Provider(IdP)
      operationId: createEnterpriseIdp
      parameters:
        - description: ID of enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpInputs'
        description: the input parameters for the IdP
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Idp'
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/idps/{idpId}:
    delete:
      description: Delete an IdP
      operationId: deleteEnterpriseIdp
      parameters:
        - description: UUID of enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: UUID of the IdP
          in: path
          name: idpId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
    get:
      description: get an IdP
      operationId: getEnterpriseIdp
      parameters:
        - description: ID of enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the IdP
          in: path
          name: idpId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Idp'
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
    put:
      description: update an idp
      operationId: updateEnterpriseIdp
      parameters:
        - description: ID of enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the IdP
          in: path
          name: idpId
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpInputs'
        description: the input parameters for the IdP
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Idp'
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/idps/{idpId}/activate:
    post:
      description: activates the policies and routing rules for the idp
      operationId: activateEnterpriseIdp
      parameters:
        - description: ID of enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the IdP
          in: path
          name: idpId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpStatus'
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
            Location:
              $ref: '#/components/headers/Location'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/idps/{idpId}/deactivate:
    post:
      description: deactivates the policies and routing rules for the idp
      operationId: deactivateEnterpriseIdp
      parameters:
        - description: ID of enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the IdP
          in: path
          name: idpId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpStatus'
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/idps/{idpId}/groupMappings:
    get:
      operationId: listIdpGroupMappings
      parameters:
        - description: The ID of the enterprise.
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: The ID of the IDP.
          in: path
          name: idpId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDPGroupMapping'
                type: object
          description: returns an empty list when no mapping exists
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: List IDP Group Mappings for an IDP, requires enterprise admin to invoke this endpoint.
  /enterprises/{id}/idps/{idpId}/groupMappings/idpGroups:
    get:
      operationId: getAuthorizedGroups
      parameters:
        - description: The ID of the enterprise.
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: The ID of the IDP.
          in: path
          name: idpId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  rbac_groups:
                    items:
                      $ref: '#/components/schemas/RBACGroup'
                    type: array
                type: object
          description: ''
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: List groups that are Federated either by type or based on the users in it, requires enterprise admin to invoke this endpoint.
  /enterprises/{id}/idps/{idpId}/metadata:
    get:
      description: gets the SAML metadata for the IdP
      operationId: getIdpMetadata
      parameters:
        - description: ID of enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the IdP
          in: path
          name: idpId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/managed:
    get:
      operationId: getEnterpriseManagementRelationshipManaged
      parameters:
        - content:
            application/json:
              schema:
                type: string
          description: ID of the manager org or the managed org
          in: path
          name: id
          required: true
        - content:
            application/json:
              schema:
                type: string
          description: offset to paginated results
          in: query
          name: page
          required: false
        - content:
            application/json:
              schema:
                type: string
          description: to limit the management relationship array response
          in: query
          name: limit
          required: false
        - content:
            application/json:
              schema:
                type: string
          description: |
            filter or search on fields such as organizations or subscriptions.
            For example, `filter="oyo"` will return all organizations where Enterprise name like "Toyota", as well as subscription IDs like "subs_oyo123" and product names like  "prod_oyo123".
          in: query
          name: filter
          required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  limit:
                    example: 10
                    type: integer
                  organaizations:
                    items:
                      $ref: '#/components/schemas/organaizationsRelationship'
                    type: array
                  page:
                    example: 1
                    type: integer
                  relationshipType:
                    example: managed
                    type: string
                  totalItems:
                    example: 100
                    type: integer
          description: ok
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Get all management relationship for the maanager organaization
      tags:
        - Management Relations
    post:
      description: create relationship between manager org and managed orgs. And then share entitlements with managed org
      operationId: createEnterpriseManagementRelationship
      parameters:
        - description: manager enterprise id. This API works only for the manager enterprise
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitlementShareRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  managedOrgs:
                    items:
                      $ref: '#/components/schemas/PostManagedRelationshipResponse'
                    type: array
                  provisioningErrors:
                    items:
                      properties:
                        error:
                          example: 'Product tenant: Cisco Secure Access already exists on the enterprise'
                          type: string
                        managedOrgId:
                          example: be58b7ce-1dc0-43f6-8fac-31cae02e4510
                          type: string
                      type: object
                    type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ValidationError'
          description: Bad Request - Entitlement Quantities exceeds available or Product already exists or Quantity is less than minimum for the product
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized - User is not an admin of the associated enterprise
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFoundError'
          description: Multi-Org not found or sub-org not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/responses/GeneralError'
          description: Internal Server Error
      security:
        - bearerAuth: []
      summary: create relationship between manager org and managed orgs. And then share entitlements with managed org
      tags:
        - Management Relations
  /enterprises/{id}/manager:
    get:
      operationId: getEnterpriseManagementRelationshipManager
      parameters:
        - content:
            application/json:
              schema:
                type: string
          description: ID of the manager org or the managed org
          in: path
          name: id
          required: true
        - content:
            application/json:
              schema:
                type: string
          description: offset to paginated results
          in: query
          name: page
          required: false
        - content:
            application/json:
              schema:
                type: string
          description: to limit the management relationship array response
          in: query
          name: limit
          required: false
        - content:
            application/json:
              schema:
                type: string
          description: |
            filter or search on fields such as organizations or subscriptions.
            For example, `filter="cdk"` will return all organizations where Enterprise name like "cdkLimited", as well as subscription IDs like "subs_cdk123" and product names like  "prod_cdk123".
          in: query
          name: filter
          required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  limit:
                    example: 10
                    type: integer
                  organaizations:
                    items:
                      $ref: '#/components/schemas/organaizationsRelationship'
                    type: array
                  page:
                    example: 1
                    type: integer
                  relationshipType:
                    example: manager
                    type: string
                  totalItems:
                    example: 100
                    type: integer
          description: ok
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Get all management relationship of managed organaization
      tags:
        - Management Relations
  /enterprises/{id}/migrateMappings:
    put:
      description: |
        Migrates the Group Mappings that a product team provides into our Idp Group Mappings table. It validates
        the incoming product instance and enterprise and finds an IdP for it. Then for each new product group provided in the request
        it creates a new RBAC group or finds the existing RBAC group for it and finds the static roles associated with the provided scopes. Then it assigns 
        those static roles to the new RBAC group for the product instance. Finally it creates a new Idp Group Mapping entry in DDB
        either for internal or external idp based on the ownership of the IdP by the requested enterprise.
      operationId: migrateEnterpriseAdmin
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MappingsIdPMigrationRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsIdPMigrationResponseBody'
                type: object
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - piamServiceTokenSecurity:
            - security:duo:identity:mappings-migrate
            - security:etd:identity:mappings-migrate
            - security:panoptica:identity:mappings-migrate
            - security:secure-access:identity:mappings-migrate
            - security:secure-endpoint:identity:mappings-migrate
            - security:secure-workload:identity:mappings-migrate
            - security:vuln-mgmt:identity:mappings-migrate
            - security:attack-surface-mgmt:identity:mappings-migrate
            - security:cdo:identity:mappings-migrate
            - security:xdr:identity:mappings-migrate
            - security:cdo:public-api
  /enterprises/{id}/productTiles:
    get:
      operationId: getProductTiles
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/EnterpriseProduct'
                    type: array
                type: object
          description: API will return the array object of product tiles with the productKey, productName, and an array of objects for tenants, that will have tenantId, region,productLaunchURL
        '404':
          $ref: '#/components/responses/NotFoundError'
      summary: Get all the product tiles and their details associated with an user
  /enterprises/{id}/productsInfo:
    get:
      operationId: getProductsInfo
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: Okta access token for enterprise admin
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/EnterpriseProduct'
                    type: array
                type: object
          description: success response
        '404':
          $ref: '#/components/responses/NotFoundError'
      summary: Get list of products provisioned for an enterprise and fetch their tenant launch URLs from the S3 JSON config
  /enterprises/{id}/rbac/customRoles:
    get:
      operationId: getCustomRoles
      parameters:
        - description: The ID of the enterprise.
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  customRoles:
                    items:
                      $ref: '#/components/schemas/RBACCustomRoleHttpGetResp'
                    type: array
                type: object
          description: 201 response
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Get the custom roles defined for an enterprise.
    post:
      operationId: createCustomRole
      parameters:
        - description: The ID of the enterprise.
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                roleId:
                  $ref: '#/components/schemas/RBACCustomRoleInput'
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACCustomRole'
          description: success response
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Creates a custom role.
  /enterprises/{id}/rbac/customRoles/{roleId}:
    delete:
      operationId: deleteCustomRole
      parameters:
        - description: The ID of the enterprise.
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: The ID of the custom role.
          in: path
          name: roleId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Delete a custom role.
    get:
      operationId: getCustomRole
      parameters:
        - description: The ID of the enterprise.
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: The ID of the custom role.
          in: path
          name: roleId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACCustomRoleHttpGetResp'
          description: success response
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Get a custom role.
    put:
      operationId: updateCustomRole
      parameters:
        - description: The ID of the enterprise.
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: The ID of the custom role.
          in: path
          name: roleId
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                roleId:
                  $ref: '#/components/schemas/RBACCustomRoleInput'
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACCustomRole'
          description: success response
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Update a custom role.
  /enterprises/{id}/rbac/groups:
    get:
      description: List all RBAC user groups related to the enterprise
      operationId: listRBACUserGroups
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  rbac_groups:
                    items:
                      $ref: '#/components/schemas/RBACGroup'
                    type: array
                type: object
          description: ''
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - User group management
      x-try-it-enabled: true
    post:
      description: Create new RBAC user group for the enterprise
      operationId: createRBACUserGroup
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RBACGroupInputRequestBody'
        description: the input parameters for the RBAC user group
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACGroup'
          description: ''
        '400':
          $ref: '#/components/responses/ValidationError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - User group management
      x-try-it-enabled: true
  /enterprises/{id}/rbac/groups/{groupId}:
    delete:
      description: Deletes a RBAC user group by id from the enterprise
      operationId: deleteRBACUserGroup
      parameters:
        - description: ID of enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: The RBAC user group Id to delete
          in: path
          name: groupId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
    get:
      description: Get RBAC user group by id
      operationId: getRBACUserGroup
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: The RBAC user group Id to get
          in: path
          name: groupId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACGroup'
          description: ''
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
    put:
      description: update RBAC user group by id for the enterprise
      operationId: updateRBACUserGroup
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: The RBAC user group Id to update
          in: path
          name: groupId
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RBACGroupInputRequestBody'
        description: the input parameters for the RBAC user group
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACGroup'
          description: ''
        '400':
          $ref: '#/components/responses/ValidationError'
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/rbac/groups/{groupId}/roles:
    get:
      description: List all RBAC group roles assignments related to the group
      operationId: listRBACGroupRolesAssignments
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the group
          in: path
          name: groupId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  rbac_group_roles:
                    items:
                      $ref: '#/components/schemas/RBACGroupAssignmentRole'
                    type: array
                type: object
          description: ''
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - RBAC
      x-try-it-enabled: true
    post:
      description: Create new RBAC group role assignment
      operationId: createRBACGroupRoleAssignment
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the group
          in: path
          name: groupId
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                roleId:
                  $ref: '#/components/schemas/RoleAssignmentIdInput'
              type: object
        description: ''
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACGroupAssignmentRole'
          description: ''
        '400':
          $ref: '#/components/responses/ValidationError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - RBAC
      x-try-it-enabled: true
  /enterprises/{id}/rbac/groups/{groupId}/roles/{entityId}:
    delete:
      description: Deletes a RBAC group role assignment by id
      operationId: deleteRBACGroupRoleAssignment
      parameters:
        - description: ID of enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the group
          in: path
          name: groupId
          required: true
          schema:
            format: uuid
            type: string
        - description: The RBAC group role assignment ID to delete
          in: path
          name: entityId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
    get:
      description: Get RBAC group role assignment entity by id
      operationId: getRBACGroupRoleAssignment
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the group
          in: path
          name: groupId
          required: true
          schema:
            format: uuid
            type: string
        - description: The RBAC group role assignment ID to get
          in: path
          name: entityId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACGroupAssignmentRole'
          description: ''
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
    put:
      description: update RBAC group role assignment by id for the group
      operationId: updateRBACGroupRole
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the group
          in: path
          name: groupId
          required: true
          schema:
            format: uuid
            type: string
        - description: The RBAC group role assignment ID to update
          in: path
          name: entityId
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                roleId:
                  $ref: '#/components/schemas/RoleAssignmentIdInput'
              type: object
        description: ''
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACGroupAssignmentRole'
          description: ''
        '400':
          $ref: '#/components/responses/ValidationError'
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/rbac/groups/{groupId}/users:
    get:
      description: List all RBAC users assigned to the group
      operationId: listRBACUserGroupAssignmentsByGroup
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the group
          in: path
          name: groupId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  rbac_users_by_group:
                    items:
                      $ref: '#/components/schemas/RBACUserAssignmentGroup'
                    type: array
                type: object
          description: ''
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/rbac/roles:
    get:
      description: Retrieves RBAC User Roles Collection.
      operationId: getRBACRolesCollection
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  rbac_roles:
                    items:
                      $ref: '#/components/schemas/RBACUserRole'
                    type: array
                type: object
          description: Successful response with the rbac user roles collection.
      security:
        - bearerAuth: []
      summary: Get RBAC Roles Collection
  /enterprises/{id}/rbac/roles/{rbacRoleId}:
    get:
      description: Retrieves RBAC User Roles Entity by given entity id.
      operationId: getRBACRoleEntity
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of RBAC Role
          in: path
          name: rbacRoleId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACUserRole'
          description: Successful response with rbac user role entity.
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
      summary: Get RBAC Role Entity
  /enterprises/{id}/rbac/roles/{rbacRoleId}/groups:
    get:
      description: List all RBAC user groups, having current role mapped, for the current enterprise.
      operationId: listRBACGroupsByRoleId
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of RBAC Role
          in: path
          name: rbacRoleId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  rbacGroups:
                    items:
                      $ref: '#/components/schemas/RBACListGroupsWithRelations'
                    type: array
                type: object
          description: ''
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
  /enterprises/{id}/rbac/roles/{roleId}/users:
    get:
      description: List all RBAC user roles assignments related to the particular role
      operationId: listRBACUserRolesAssignmentsByRole
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the role
          in: path
          name: roleId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  rbac_users_by_role:
                    items:
                      $ref: '#/components/schemas/RBACUserAssignmentRole'
                    type: array
                type: object
          description: ''
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/rbac/sharedGroups/{groupId}:
    get:
      description: Retrieves the mapping of RBAC shared groups between manager and managed organizations. Shows which organizations can access the specified group.
      operationId: GetRBACSharedGroupEnterpriseAssignments
      parameters:
        - description: ID of the managed org or manager org
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the RBAC group
          in: path
          name: groupId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACSharedGroupEnterpriseAssignment'
          description: ''
        default:
          $ref: '#/components/responses/GeneralError'
      summary: Get shared group assignments across organizations
      tags:
        - Manage Access
  /enterprises/{id}/rbac/users/{userId}/groups:
    get:
      description: List all RBAC user group assignments related to the user
      operationId: listRBACUserGroupAssignments
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the user from okta
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  rbac_user_groups_assignments:
                    items:
                      $ref: '#/components/schemas/RBACUserAssignmentGroup'
                    type: array
                type: object
          description: ''
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - User group management
      x-try-it-enabled: true
    post:
      description: Create new RBAC user group assignment
      operationId: createRBACUserGroupAssignment
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the user from okta
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                groupId:
                  $ref: '#/components/schemas/GroupAssignmentIdInput'
              type: object
        description: ''
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACUserAssignmentGroup'
          description: ''
        '400':
          $ref: '#/components/responses/ValidationError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - User group management
      x-try-it-enabled: true
  /enterprises/{id}/rbac/users/{userId}/groups/{entityId}:
    delete:
      description: Deletes a RBAC user group assignment by id
      operationId: deleteRBACUserGroupAssignment
      parameters:
        - description: ID of enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the user from okta
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: The RBAC user group assignment ID to delete
          in: path
          name: entityId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
    get:
      description: Get RBAC user group assignment entity by id
      operationId: getRBACUserGroupAssignment
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the user from okta
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: The RBAC user group assignment ID to get
          in: path
          name: entityId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACUserAssignmentGroup'
          description: ''
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
    put:
      description: update RBAC user group assignment by id for the enterprise
      operationId: updateRBACUserGroupAssignment
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the user from okta
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: The RBAC user group assignment ID to update
          in: path
          name: entityId
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                groupId:
                  $ref: '#/components/schemas/GroupAssignmentIdInput'
              type: object
        description: ''
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACUserAssignmentGroup'
          description: ''
        '400':
          $ref: '#/components/responses/ValidationError'
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/rbac/users/{userId}/groupsWithRoleRelations:
    get:
      description: List all RBAC user group assignments and their mapped rbac roles, related to the user
      operationId: listRBACUserGroupAssignmentsWithRelations
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the user from okta
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  rbacGroups:
                    items:
                      $ref: '#/components/schemas/RBACListGroupsWithRelations'
                    type: array
                type: object
          description: ''
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/rbac/users/{userId}/roles:
    delete:
      description: Delete Product Direct User Roles related to the user
      operationId: DeleteRBACUserDirectRolesAssignmentsForProduct
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: user ID from okta
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: productkey
          in: query
          name: product
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '412':
          $ref: '#/components/responses/PredefinedFailed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GeneralError'
    get:
      description: List all RBAC user roles assignments related to the user
      operationId: listRBACUserRolesAssignments
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the user from okta
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  rbac_user_roles_assignments:
                    items:
                      $ref: '#/components/schemas/RBACUserAssignmentRole'
                    type: array
                type: object
          description: ''
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - RBAC
      x-try-it-enabled: true
    post:
      description: Create new RBAC user role assignment
      operationId: createRBACUserRoleAssignment
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the user from okta
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                roleId:
                  $ref: '#/components/schemas/RoleAssignmentIdInput'
              type: object
        description: ''
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACUserAssignmentRole'
          description: ''
        '400':
          $ref: '#/components/responses/ValidationError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - RBAC
      x-try-it-enabled: true
  /enterprises/{id}/rbac/users/{userId}/roles/{entityId}:
    delete:
      description: Deletes a RBAC user role assignment by id
      operationId: deleteRBACUserRoleAssignment
      parameters:
        - description: ID of enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the user from okta
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: The RBAC user role assignment ID to delete
          in: path
          name: entityId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
    get:
      description: Get RBAC user role assignment entity by id
      operationId: getRBACUserRoleAssignment
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the user from okta
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: The RBAC user role assignment ID to get
          in: path
          name: entityId
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACUserAssignmentRole'
          description: ''
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
    put:
      description: update RBAC user role assignment by id for the enterprise
      operationId: updateRBACUserRoleAssignment
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: ID of the user from okta
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: The RBAC user role assignment ID to update
          in: path
          name: entityId
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                roleId:
                  $ref: '#/components/schemas/RoleAssignmentIdInput'
              type: object
        description: ''
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACUserAssignmentRole'
          description: ''
        '400':
          $ref: '#/components/responses/ValidationError'
        default:
          $ref: '#/components/responses/GeneralError'
  /enterprises/{id}/supportAccessStatus:
    get:
      operationId: getEnterpriseSupportAccess
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseSupportAccessStatusResponse'
                type: object
          description: API will return the object containing a bool with the allow status and timestamp indicating when the access will expire.
        '404':
          $ref: '#/components/responses/NotFoundError'
      summary: Get the enterprise's support access status
    patch:
      operationId: updateEnterpriseSupportAccess
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnterpriseSupportAccessStatusRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseSupportAccessStatusResponse'
                type: object
          description: API will return the object containing a bool with the allow status and timestamp indicating when the access will expire.
        '404':
          $ref: '#/components/responses/NotFoundError'
      summary: Update the enterprise's support access status
  /enterprises/{id}/userInvitations:
    post:
      description: Invite users operation
      operationId: addUser
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkInviteUsersRequestBody'
        description: the input parameters for the user invite
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteUsersResponseBody'
          description: Successful response with bulk invited users list.
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Invite users
  /enterprises/{id}/users:
    get:
      description: Lists the users belonging to the enterprise
      operationId: listEnterpriseUsers
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: The numbers of items to return
          in: query
          name: limit
          schema:
            type: integer
        - description: The order, ascending or descending, of the items
          in: query
          name: order
          schema:
            enum:
              - asc
              - desc
              - ASC
              - DESC
            type: string
        - description: The pagination cursor for the next page
          in: query
          name: after
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/EnterpriseUser'
                    type: array
                type: object
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
            Link:
              description: The pagination cursor links
              schema:
                type: string
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - User Management
      x-try-it-enabled: true
    post:
      description: |
        ### Add a user to the enterprise.
        Adds an existing user to enterprise, If the user does not exist in the Okta org, it will create a new account first.
        New user accounts will created for Okta-managed credentials(i.e., `credType=OKTA`) unless the enterprise is configured with an identity provider for the user's email domain (i.e., `credType=FEDERATION`).
        As a side effect of creating a new `credType=OKTA` account, an account activation email will be sent by Okta to the user.
      operationId: addEnterpriseUser
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnterpriseUserProfile'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseUser'
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - User Management
      x-try-it-enabled: true
  /enterprises/{id}/users/{userId}:
    delete:
      description: Remove an user from the enterprise
      operationId: removeEnterpriseUser
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The user ID
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - Enterprise Users
    get:
      description: Returns a specific enterprise user
      operationId: getEnterpriseUser
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The user ID
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseUser'
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - Enterprise Users
    put:
      description: Update a username or user info
      operationId: updateEnterpriseUser
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The user ID
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnterpriseUserProfile'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseUser'
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - Enterprise Users
  /enterprises/{id}/users/{userId}/factors:
    get:
      description: List MFA factors for a user
      operationId: listEnterpriseUserFactors
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The user ID
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/EnterpriseUserFactor'
                    type: array
                type: object
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - Enterprise Users
  /enterprises/{id}/users/{userId}/factors/{factorId}/reset:
    post:
      description: Reset the MFA factor for a user
      operationId: resetEnterpriseUserFactor
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The user ID
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: The factor ID
          in: path
          name: factorId
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - Enterprise Users
  /enterprises/{id}/users/{userId}/lifecycle/disable:
    post:
      description: |
        ### Disable an enterprise user
        Add an user to `enterprise-disabled-{enterpriseId}` group to disable their access rights.
        Further, all access control checks would be verified if user is present in `enterprise-disabled-{enterpriseId}` group or not.
      operationId: disableEnterpriseUser
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The user ID
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - Enterprise Users
  /enterprises/{id}/users/{userId}/lifecycle/enable:
    post:
      description: |
        ### Enable an enterprise user
        Removes an user from `enterprise-disabled-{enterpriseId}` group to re-enable any existing access rights.
        Further, all access control checks would be verified if user is present in `enterprise-disabled-{enterpriseId}` group or not.
      operationId: enableEnterpriseUser
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The user ID
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - Enterprise Users
  /enterprises/{id}/users/{userId}/lifecycle/resetPassword:
    post:
      description: Reset the password of an enterprise user
      operationId: resetEnterpriseUserPassword
      parameters:
        - description: ID of the enterprise
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The user ID
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - Enterprise Users
  /enterprises/{id}/users/{userId}/logoutEvent:
    post:
      description: Logs the details of a user logout event.
      operationId: logoutUser
      parameters:
        - description: ID of the enterprise to get
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: ID of the user to get
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutEvent'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  message:
                    example: Logout event recieved successfully
                    type: string
                type: object
          description: Logout event recieved successfully
      summary: Capture logout event
  /enterprises/{managedId}/manager/{managerId}:
    get:
      operationId: getEnterpriseManagementRelationshipManagerDetails
      parameters:
        - description: ID of the manager org
          in: path
          name: managerId
          required: true
          schema:
            type: string
        - description: ID of the managed org
          in: path
          name: managedId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  organaizations:
                    items:
                      $ref: '#/components/schemas/organaizationsRelationship'
                    type: array
                  relationshipType:
                    example: manager
                    type: string
          description: ok
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: get management relationship details of an associated org
      tags:
        - Management Relations
  /enterprises/{managerId}/managed/{managedId}:
    delete:
      operationId: deleteEnterpriseManagementRelationship
      parameters:
        - content:
            application/json:
              schema:
                type: string
          description: ID of the manager org
          in: path
          name: managerId
          required: true
        - content:
            application/json:
              schema:
                type: string
          description: ID of the managed org
          in: path
          name: managedId
          required: true
      responses:
        '204':
          content:
            NoContent: {}
          description: ok
      security:
        - bearerAuth: []
      summary: revokes management relationship of an org
      tags:
        - Management Relations
    get:
      operationId: getEnterpriseManagementRelationshipManagedDetails
      parameters:
        - description: ID of the manager org
          in: path
          name: managerId
          required: true
          schema:
            type: string
        - description: ID of the managed org
          in: path
          name: managedId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  organaizations:
                    items:
                      $ref: '#/components/schemas/organaizationsRelationship'
                    type: array
                  relationshipType:
                    enum:
                      - managed
                    type: string
          description: ok
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: get management relationship details of an associated org
      tags:
        - Management Relations
  /enterprises/{managerId}/rbac/sharedgroups:
    put:
      description: Creates assignments for RBAC shared groups from a manager organization to its managed organizations. Enables centralized access control across organizations.
      operationId: SharedRBACUserGroupAssignment
      parameters:
        - description: The ID of the manager org
          in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedGroupAccessInput'
        description: ''
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  failedGroupIDs:
                    example:
                      - 2b63ff9f-02e2-4f8e-ac98-b9e42c9feae1
                    items:
                      type: string
                    type: array
                  successfulGroupIDs:
                    example:
                      - 2b63ff9f-02e2-4f8e-ac98-b9e42c9feae1
                    items:
                      type: string
                    type: array
                type: object
          description: Successfully added group to the managed org
        '400':
          $ref: '#/components/responses/ValidationError'
        default:
          $ref: '#/components/responses/GeneralError'
      summary: Assign shared RBAC groups to managed organizations
      tags:
        - Manage Access
  /enterprises/{managerId}/rbac/{managedID}/sharedgroups/{groupID}:
    delete:
      description: Removes a shared RBAC group assignment between a manager and managed organization. This revokes the managed organization's access to the shared group.
      operationId: DeleteSharedRBACUserGroupAssignment
      parameters:
        - description: managerOrgId ID of the enterprise
          in: path
          name: managerId
          required: true
          schema:
            format: uuid
            type: string
        - description: managedOrgId ID of the enterprise
          in: path
          name: managedID
          required: true
          schema:
            format: uuid
            type: string
        - description: groupID ID of the enterprise
          in: path
          name: groupID
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Remove shared group assignment
      tags:
        - Manage Access
  /rbac/customRoles/products:
    get:
      operationId: getListCustomRoleProducts
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  custom_role_products:
                    items:
                      $ref: '#/components/schemas/RBACCustomRoleProduct'
                    type: array
                type: object
          description: success response
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Get list of products with custom role permissions.
  /rbac/customRoles/products/{productId}/permissions:
    get:
      operationId: getCustomRolePermissions
      parameters:
        - description: The ID of the product.
          in: path
          name: productId
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  custom_role_permissions:
                    items:
                      $ref: '#/components/schemas/RBACCustomRoleProductPermission'
                    type: array
                type: object
          description: success response
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Get custom role permissions for a product.
    post:
      operationId: createCustomRolePermission
      parameters:
        - description: The ID of the product.
          in: path
          name: productId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                roleId:
                  $ref: '#/components/schemas/RBACCustomRoleProductPermissionCreateInput'
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACCustomRoleProductPermission'
          description: success response
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/UnableToCreateResource'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Create a custom role permission for a product.
  /rbac/customRoles/products/{productId}/permissions/{scope}:
    delete:
      operationId: deleteCustomRolePermission
      parameters:
        - description: The ID of the product.
          in: path
          name: productId
          required: true
          schema:
            type: integer
        - description: The scope of the custom role permission for a product.
          in: path
          name: scope
          required: true
          schema:
            type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NoContent'
          description: 204 response
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Delete a custom role product permission.
    get:
      operationId: getCustomRolePermission
      parameters:
        - description: The ID of the product.
          in: path
          name: productId
          required: true
          schema:
            type: integer
        - description: The scope of the custom role permission for a product.
          in: path
          name: scope
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACCustomRoleProductPermission'
          description: success response
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Get a custom role product permission.
    put:
      operationId: updateCustomRolePermission
      parameters:
        - description: The ID of the product.
          in: path
          name: productId
          required: true
          schema:
            type: integer
        - description: The scope of the custom role permission for a product.
          in: path
          name: scope
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                roleId:
                  $ref: '#/components/schemas/RBACCustomRoleProductPermissionPutInput'
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RBACCustomRoleProductPermission'
          description: success response
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Update a custom role product permission.
  /services/rbac/claims/:
    post:
      description: |
        This endpoint looks up the managed orgs, for the orgid in the user jwt token passed in the request body.
        Returns the users enterprise admin claims, for the orgid and any managed orgs.  
        Note:
        1. Pass service token in the header
        2. The userid is read from the user tokens uid field.
        3. The orgid is parsed from the user tokens security-cloud scope.
        4. The response shouldnt be cached.
      operationId: getUsersEnterpriseClaims
      requestBody:
        content:
          application/json:
            schema:
              properties:
                token:
                  description: authenticated user jwt token (three Base64-URL strings separated by dots)
                  format: byte
                  type: string
              required:
                - token
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  securityCloud:
                    items:
                      type: string
                    type: array
                  userId:
                    type: string
                type: object
          description: Successful response with enterprise admin claims for the user.
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Get users enterprise claims for the userId and orgId in the token parameter. For a manager org, the claims will also include managed org claims.
  /services/rbac/userEnumerations/:
    get:
      operationId: getUsers
      parameters:
        - description: The ID of the product instance.
          in: query
          name: productInstanceId
          required: true
          schema:
            format: uuid
            type: string
        - description: The ID of the user we want to filter on, should not be used in conjunction with cdoUserId query parameter.
          in: query
          name: userId
          required: false
          schema:
            format: Okta user Id
            type: string
        - description: The UUID of the user we want to filter on, should not be used in conjunction with userId query parameter.
          in: query
          name: cdoUserId
          required: false
          schema:
            format: uuid
            type: string
        - description: The email of the user we want to filter on exact match with input email, should not be used in conjunction with userId query parameter. Email needs to be URL encoded.
          in: query
          name: email
          required: false
          schema:
            type: string
        - description: The page number we want to work with. By default its 1.
          in: query
          name: page
          required: false
          schema:
            type: integer
        - description: Defining the pagie size, eg the results per page. By default its 25.
          in: query
          name: pageSize
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    items:
                      $ref: '#/components/schemas/PaginationSegment'
                    type: object
                  users_enumerated:
                    items:
                      $ref: '#/components/schemas/UserEnumerationRepsBody'
                    type: array
                type: object
          description: Successful response with users enumerated.
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - bearerAuth: []
      summary: Get users with their assignments for particular tenant.
  /user/:
    get:
      description: Get information about the currently authenticated user
      operationId: getUser
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/InitialUser'
                    type: array
                type: object
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        default:
          $ref: '#/components/responses/GeneralError'
  /user/domains:
    post:
      deprecated: true
      description: Will begin the domain verification process for the calling user.
      operationId: createPendingDomain
      requestBody:
        content:
          application/json:
            schema:
              properties:
                domain:
                  $ref: '#/components/schemas/DomainName'
              type: object
        description: ''
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainValidationRequest'
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
            Location:
              $ref: '#/components/headers/Location'
        '400':
          $ref: '#/components/responses/ValidationError'
        default:
          $ref: '#/components/responses/GeneralError'
  /user/domains/{domain}/verify:
    post:
      deprecated: true
      description: Will trigger the backend to attempt to verify the domain for the authenticated user
      operationId: verifyPendingDomain
      parameters:
        - description: domain to edit
          in: path
          name: domain
          required: true
          schema:
            $ref: '#/components/schemas/DomainName'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
          description: Verification was successful, domain will be marked as verified
          headers:
            Date:
              $ref: '#/components/headers/Date'
            Location:
              $ref: '#/components/headers/Location'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: verification was not successful
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
  /user/settings:
    get:
      description: Gets the current user settings
      operationId: getUserSettings
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/UserSettings'
                    type: array
                type: object
          description: ''
          headers:
            Date:
              $ref: '#/components/headers/Date'
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - User Settings
    patch:
      description: |
        Updates the current user's settings. This operation allows for updating individual fields.
        If the field is not present in the request body, the existing value is retained.
      operationId: patchUserSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettings'
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
          description: ''
        default:
          $ref: '#/components/responses/GeneralError'
      tags:
        - User Settings
  /userInfo/{userId}:
    get:
      description: test desc
      operationId: getOktaUserProfileInfo
      parameters:
        - description: The id or email of the okta user
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseUserProfile'
          description: Successful response with the user profile information
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      summary: Get User profile information from OKTA
  /users/{user}/enterprises:
    get:
      description: Get enterprises for a user. Takes an escaped email address or an Okta ID
      operationId: getUserEnterprises
      parameters:
        - description: Okta user ID or login email of user
          in: path
          name: user
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      anyOf:
                        - $ref: '#/components/schemas/UserEnterprise'
                    type: array
                type: object
          description: enterprise response
          headers:
            Date:
              $ref: '#/components/headers/Date'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - piamServiceTokenSecurity:
            - security:cdo:public-api
      tags:
        - Users APIs
security:
  - OpenID: []
  - bearerAuth: []
servers:
  - url: https://api.dev.security.cisco.com/piam-iam
    variables:
      domain:
        default: https://sso-apps-preview.myverysecuresignon.name