components:
  schemas:
    gorm.DeletedAt:
      properties:
        time:
          type: string
        valid:
          description: Valid is true if Time is not NULL
          type: boolean
      type: object
    model.ActivationStatus:
      properties:
        activationStatus:
          $ref: '#/components/schemas/model.ProvisioningStatus'
        activationTime:
          type: string
        isActive:
          type: boolean
        productInstanceId:
          type: string
        productName:
          type: string
        tenantId:
          type: string
      type: object
    model.AdditionalTenantMetadata:
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    model.Body:
      properties:
        activation_code:
          type: string
        id:
          type: string
        meta:
          $ref: '#/components/schemas/model.Meta'
      type: object
    model.ClaimCodeProduct:
      properties:
        id:
          type: string
        is_use_existing_tenant_set:
          type: boolean
        name:
          type: string
        region:
          $ref: '#/components/schemas/model.Region'
      required:
        - id
        - region
      type: object
    model.ClaimCodeServices:
      properties:
        id:
          type: string
        is_use_existing_tenant_set:
          type: boolean
        name:
          type: string
      required:
        - id
      type: object
    model.ClaimStatus:
      properties:
        claimCode:
          type: string
        claimedAt:
          type: string
        claimedByEmail:
          type: string
        enterpriseId:
          type: string
        enterpriseName:
          type: string
        isClaimable:
          type: boolean
        isClaimed:
          type: boolean
      type: object
    model.ClaimSubscription:
      properties:
        claim_code:
          type: string
        enterprise_id:
          type: string
        enterprise_name:
          type: string
        products:
          items:
            $ref: '#/components/schemas/model.ClaimCodeProduct'
          type: array
        services:
          items:
            $ref: '#/components/schemas/model.ClaimCodeServices'
          type: array
      type: object
    model.Contact:
      properties:
        contactType:
          type: string
        emailId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
      type: object
    model.DefaultResponse:
      properties:
        message:
          type: string
        status:
          type: integer
      type: object
    model.EnableFirewallForEnterpriseRequest:
      properties:
        cdoTenantUid:
          type: string
        contactEmail:
          type: string
        enterpriseId:
          type: string
      required:
        - cdoTenantUid
        - contactEmail
        - enterpriseId
      type: object
    model.Enterprise:
      properties:
        enterpriseId:
          type: string
        enterpriseName:
          type: string
      type: object
    model.EnterpriseProductInstances:
      properties:
        enterpriseName:
          type: string
        isLicensed:
          type: boolean
        productInstancesInfo:
          items:
            $ref: '#/components/schemas/model.MergedProductInstancesInfo'
          type: array
      type: object
    model.Entitlement:
      properties:
        description:
          type: string
        isService:
          type: boolean
        name:
          type: string
        productType:
          type: string
        value:
          type: string
      type: object
    model.EntitlementInstance:
      properties:
        Deleted:
          $ref: '#/components/schemas/gorm.DeletedAt'
        createdAt:
          type: string
        entitlement:
          $ref: '#/components/schemas/model.Entitlement'
        id:
          type: string
        is_trial:
          type: boolean
        quantity:
          type: integer
        subscription:
          $ref: '#/components/schemas/model.Subscription'
        trial:
          $ref: '#/components/schemas/model.Trial'
        updatedAt:
          type: string
      type: object
    model.Error:
      properties:
        error:
          type: string
        message:
          type: string
      type: object
    model.FollowOn:
      properties:
        followOnDetails:
          items:
            $ref: '#/components/schemas/model.FollowOnDetails'
          type: array
        followOnSubRefId:
          type: string
      type: object
    model.FollowOnDetails:
      properties:
        cancelEligSubRefId:
          type: string
      type: object
    model.Health:
      properties:
        currentTime:
          type: string
        healthStatus:
          type: string
        serviceName:
          type: string
        serviceStatus:
          type: string
      type: object
    model.InvitationStatus:
      enum:
        - invitation_pending
        - invitation_rejected
        - invitation_accepted
        - invitation_fulfilled
      type: string
      x-enum-varnames:
        - InvitationStatusPending
        - InvitationStatusRejected
        - InvitationStatusAccepted
        - InvitationStatusFulfilled
    model.LegacyProductInvitation:
      properties:
        id:
          type: string
        product_external_tenant_id:
          type: string
        product_id:
          type: integer
        region:
          type: string
      type: object
    model.LegacyProductInvite:
      properties:
        email:
          type: string
        invitationId:
          type: string
        productExternalTenantId:
          type: string
        productName:
          type: string
        region:
          type: string
        status:
          $ref: '#/components/schemas/model.InvitationStatus'
      type: object
    model.MSPClaimSubscription:
      properties:
        claim_code:
          type: string
        enterprise_id:
          type: string
        enterprise_name:
          type: string
        products:
          items:
            $ref: '#/components/schemas/model.ClaimCodeProduct'
          type: array
      type: object
    model.MajorLine:
      properties:
        action:
          minLength: 1
          type: string
        offerType:
          type: string
        partyAccounts:
          items:
            $ref: '#/components/schemas/model.PartyAccount'
          type: array
        provInfoEmail:
          type: string
        requestedStartDate:
          minLength: 1
          type: string
      required:
        - action
        - requestedStartDate
      type: object
    model.ManagedOrgProductsList:
      properties:
        name:
          example: Multi cloud defense
          type: string
        quantity:
          example: 200
          type: integer
      type: object
    model.ManagedOrgsList:
      properties:
        id:
          example: 2b63ff9f-02e2-4f8e-ac98-b9e42c9feae1
          format: uuid
          type: string
        name:
          example: Managed org 1
          type: string
        products:
          items:
            $ref: '#/components/schemas/model.ManagedOrgProductsList'
          type: array
      type: object
    model.MarketplaceCreate:
      properties:
        allowedEmailDomains:
          items:
            type: string
          type: array
        authClients:
          items:
            type: string
          type: array
        description:
          type: string
        isExplicitCancellationAllowed:
          type: boolean
        isImplicitCancellationActivated:
          type: boolean
        maximumInitialTermDays:
          maximum: 32767
          minimum: 0
          type: integer
        maximumRemainingTermDays:
          maximum: 32767
          minimum: 0
          type: integer
        maximumTotalTermDays:
          maximum: 32767
          minimum: 0
          type: integer
        name:
          type: string
        skus:
          items:
            $ref: '#/components/schemas/model.SkuConfigUpdate'
          type: array
      required:
        - allowedEmailDomains
        - authClients
        - description
        - isExplicitCancellationAllowed
        - isImplicitCancellationActivated
        - maximumInitialTermDays
        - maximumRemainingTermDays
        - maximumTotalTermDays
        - name
      type: object
    model.MarketplaceUpdate:
      properties:
        allowedEmailDomains:
          items:
            type: string
          type: array
        authClients:
          items:
            type: string
          type: array
        description:
          type: string
        isExplicitCancellationAllowed:
          type: boolean
        isImplicitCancellationActivated:
          type: boolean
        maximumInitialTermDays:
          maximum: 32767
          minimum: 0
          type: integer
        maximumRemainingTermDays:
          maximum: 32767
          minimum: 0
          type: integer
        maximumTotalTermDays:
          maximum: 32767
          minimum: 0
          type: integer
        name:
          type: string
        skus:
          items:
            $ref: '#/components/schemas/model.SkuConfigUpdate'
          type: array
      type: object
    model.MergedProductInstancesInfo:
      properties:
        additionalTenantMetadata:
          items:
            $ref: '#/components/schemas/model.AdditionalTenantMetadata'
          type: array
        entitlements:
          items:
            type: object
          type: array
        externalTenantId:
          type: string
        id:
          type: string
        isOrgEntitled:
          type: boolean
        isPlatformProduct:
          description: cleanup this once discoveryAPIEnhancement flag is enabled
          type: boolean
        productName:
          type: string
        productType:
          type: string
        provisioningStatus:
          type: string
        region:
          $ref: '#/components/schemas/model.Region'
      type: object
    model.Meta:
      properties:
        additionalTenantMetadata:
          items:
            $ref: '#/components/schemas/model.AdditionalTenantMetadata'
          type: array
        created:
          $ref: '#/components/schemas/model.XSDSupportingDateTime'
        lastModified:
          $ref: '#/components/schemas/model.XSDSupportingDateTime'
        location:
          type: string
        resourceType:
          type: string
      type: object
    model.MigrateAdditionalProductsTenantRequest:
      properties:
        cdoTenantUid:
          type: string
        contactEmail:
          type: string
        enterpriseId:
          type: string
        isHypershieldTenant:
          type: boolean
        isMcdTenant:
          type: boolean
        productInstanceId:
          type: string
      required:
        - cdoTenantUid
        - contactEmail
        - enterpriseId
        - productInstanceId
      type: object
    model.MigrateCdoTenantRequest:
      properties:
        cdoTenantUid:
          type: string
        contactEmail:
          description: initial admin of the enterprise
          type: string
        isHypershieldTenant:
          type: boolean
        isMcdTenant:
          type: boolean
        organizationName:
          type: string
        region:
          type: string
        salesOrderNumber:
          type: string
        ssxTenantUid:
          type: string
        tenantName:
          type: string
        tenantPayType:
          type: string
      required:
        - cdoTenantUid
        - contactEmail
        - region
        - ssxTenantUid
      type: object
    model.MigrateCdoTenantRollbackRequest:
      properties:
        enterpriseId:
          type: string
      required:
        - enterpriseId
      type: object
    model.MigrateCdoTenantWithEnterpriseRequest:
      properties:
        cdoTenantUid:
          type: string
        contactEmail:
          type: string
        enterpriseId:
          type: string
        isHypershieldTenant:
          type: boolean
        isMcdTenant:
          type: boolean
        salesOrderNumber:
          type: string
        tenantPayType:
          type: string
      required:
        - cdoTenantUid
        - contactEmail
        - enterpriseId
      type: object
    model.MinorLine:
      properties:
        actionType:
          minLength: 1
          type: string
        partName:
          minLength: 1
          type: string
        quantity:
          minLength: 1
          type: string
      required:
        - actionType
        - partName
        - quantity
      type: object
    model.MspEntitlementInstance:
      properties:
        Deleted:
          $ref: '#/components/schemas/gorm.DeletedAt'
        createdAt:
          type: string
        entitlement:
          $ref: '#/components/schemas/model.Entitlement'
        id:
          type: string
        msp_available_quantity:
          type: integer
        msp_total_quantity:
          type: integer
        operand:
          type: integer
        operation:
          type: string
        quantity:
          type: integer
        subscription:
          $ref: '#/components/schemas/model.MspSubscription'
        trial:
          $ref: '#/components/schemas/model.Trial'
        updatedAt:
          type: string
      type: object
    model.MspOrgEntitlementInstance:
      properties:
        Deleted:
          $ref: '#/components/schemas/gorm.DeletedAt'
        createdAt:
          type: string
        entitlement:
          $ref: '#/components/schemas/model.OrgEntitlement'
        id:
          type: string
        msp_available_quantity:
          type: integer
        msp_total_quantity:
          type: integer
        operand:
          type: integer
        operation:
          type: string
        quantity:
          type: integer
        subscription:
          $ref: '#/components/schemas/model.MspSubscription'
        trial:
          $ref: '#/components/schemas/model.Trial'
        updatedAt:
          type: string
      type: object
    model.MspProductInstance:
      properties:
        activationCode:
          type: string
        createdAt:
          type: string
        entitlement_instances:
          description: EntitlementInstances are the actual entitlement this product instance has
          items:
            $ref: '#/components/schemas/model.MspEntitlementInstance'
          type: array
        external_tenant_id:
          type: string
        id:
          type: string
        initialAdmin:
          type: string
        isActive:
          type: boolean
        isEA:
          type: boolean
        isHidden:
          type: boolean
        isLegacy:
          type: boolean
        isOrgEntitled:
          type: boolean
        is_trial:
          type: boolean
        is_use_existing_tenant_set:
          type: boolean
        org_entitlement_instances:
          description: OrgEntitlementInstances which are associated with product instances
          items:
            $ref: '#/components/schemas/model.MspOrgEntitlementInstance'
          type: array
        product:
          $ref: '#/components/schemas/model.Product'
        provisioning_metadata:
          items:
            $ref: '#/components/schemas/model.ProvisioningQuestionAnswer'
          type: array
        provisioning_status:
          $ref: '#/components/schemas/model.ProvisioningStatus'
        region:
          allOf:
            - $ref: '#/components/schemas/model.Region'
          description: Region is where this ProductInstance is (or will be) provisioned
          type: object
        updatedAt:
          type: string
      type: object
    model.MspSku:
      properties:
        availableEntitlements:
          type: integer
        minEntitlementsQuantity:
          type: integer
        productsList:
          items:
            $ref: '#/components/schemas/model.ProductConf'
          type: array
        reservedEntitlements:
          type: integer
        sharedEntitlements:
          items:
            $ref: '#/components/schemas/model.SharedEntitlement'
          type: array
        skuName:
          type: string
      type: object
    model.MspSubscription:
      properties:
        Deleted:
          $ref: '#/components/schemas/gorm.DeletedAt'
        cancelledSkus:
          $ref: '#/components/schemas/model.SkusMap'
        createdAt:
          type: string
        externalId:
          type: string
        id:
          type: string
        is_external:
          type: boolean
        is_provisionable:
          type: boolean
        is_provisionable_email_sent:
          type: boolean
        manager_subscription_id:
          $ref: '#/components/schemas/uuid.NullUUID'
        msp_manager_org_details:
          properties:
            id:
              format: uuid
              type: string
            name:
              type: string
          type: object
        requested_start_date:
          type: string
        subscription_end_date:
          type: string
        subscription_start_date:
          type: string
        updatedAt:
          type: string
      type: object
    model.Option:
      properties:
        description:
          description: Description is the human-readable description of this option
          type: string
        display_text:
          allOf:
            - $ref: '#/components/schemas/model.ProductText'
          description: Text linked to selected Option
          type: object
        value:
          description: Value is the machine-readable option that gets passed downstream
          type: string
      type: object
    model.OrderHeader:
      properties:
        dealId:
          type: string
        orderId:
          type: string
        webOrderId:
          type: string
      type: object
    model.OrderLine:
      properties:
        majorLine:
          $ref: '#/components/schemas/model.MajorLine'
        minorLines:
          items:
            $ref: '#/components/schemas/model.MinorLine'
          minItems: 1
          type: array
      required:
        - minorLines
      type: object
    model.OrderPayload:
      properties:
        callbackUrl:
          minLength: 1
          type: string
        cancelType:
          type: string
        orderAction:
          type: string
        orderRequest:
          $ref: '#/components/schemas/model.OrderRequest'
        orderSource:
          type: string
        serviceEffectiveDate:
          type: string
        serviceProvisioningId:
          minLength: 1
          type: string
        subscriptionMasterId:
          minLength: 1
          type: string
      required:
        - callbackUrl
        - orderRequest
        - serviceProvisioningId
        - subscriptionMasterId
      type: object
    model.OrderRequest:
      properties:
        followOn:
          items:
            $ref: '#/components/schemas/model.FollowOn'
          type: array
        orderHeader:
          $ref: '#/components/schemas/model.OrderHeader'
        orderLines:
          items:
            $ref: '#/components/schemas/model.OrderLine'
          maxItems: 1
          minItems: 1
          type: array
        provisioningRequest:
          $ref: '#/components/schemas/model.SbpProvisioningRequest'
        sender:
          $ref: '#/components/schemas/model.SbpSender'
        upgrade:
          items:
            $ref: '#/components/schemas/model.OrderRequestUpgrade'
          type: array
      required:
        - orderHeader
        - orderLines
      type: object
    model.OrderRequestUpgrade:
      properties:
        subRefId:
          type: string
        upgradeDetails:
          items:
            $ref: '#/components/schemas/model.UpgradeDetail'
          type: array
        webOrderId:
          type: string
      type: object
    model.OrderSbpPayload:
      properties:
        orderPayload:
          $ref: '#/components/schemas/model.OrderPayload'
      type: object
    model.OrgEntitlement:
      properties:
        access_type:
          type: string
        description:
          type: string
        is_service:
          type: boolean
        name:
          type: string
        productType:
          type: string
        value:
          type: string
      type: object
    model.OrgEntitlementInstance:
      properties:
        Deleted:
          $ref: '#/components/schemas/gorm.DeletedAt'
        createdAt:
          type: string
        entitlement:
          $ref: '#/components/schemas/model.OrgEntitlement'
        id:
          type: string
        is_trial:
          type: boolean
        quantity:
          type: integer
        subscription:
          $ref: '#/components/schemas/model.Subscription'
        trial:
          $ref: '#/components/schemas/model.Trial'
        updatedAt:
          type: string
      type: object
    model.OrgEntitlements:
      properties:
        pagination:
          $ref: '#/components/schemas/model.PaginationInfo'
        subscriptions:
          items:
            $ref: '#/components/schemas/model.SubnSku'
          type: array
      type: object
    model.PaginationInfo:
      properties:
        limit:
          type: integer
        offset:
          type: integer
        totalRecords:
          type: integer
      type: object
    model.PartyAccount:
      properties:
        businessName:
          type: string
        contacts:
          items:
            $ref: '#/components/schemas/model.Contact'
          type: array
        name:
          type: string
        siteUseId:
          type: integer
        type:
          type: string
      type: object
    model.PatchUpdateSubscription:
      properties:
        endDate:
          type: string
        sendClaimCodeTo:
          type: string
        skus:
          items:
            $ref: '#/components/schemas/model.SubscriptionSkusInfo'
          type: array
        startDate:
          type: string
      type: object
    model.PostCancelSubscription:
      properties:
        action:
          enum:
            - create
            - cancel
          type: string
        id:
          type: string
      required:
        - id
      type: object
    model.PostCreateSubscription:
      properties:
        action:
          enum:
            - create
            - cancel
          type: string
        endDate:
          type: string
        id:
          type: string
        isTrial:
          type: boolean
        metadata:
          items:
            $ref: '#/components/schemas/model.ProvisioningInfo'
          type: array
        sendClaimCodeTo:
          type: string
        skus:
          items:
            $ref: '#/components/schemas/model.SubscriptionSkusInfo'
          type: array
        startDate:
          type: string
      required:
        - id
        - sendClaimCodeTo
        - skus
        - startDate
      type: object
    model.ProcessedSBPPayload:
      properties:
        callbackUrl:
          type: string
        orderLines:
          items:
            $ref: '#/components/schemas/model.OrderLine'
          type: array
        subscription:
          items:
            $ref: '#/components/schemas/model.Subscription'
          type: array
        subscriptionMasterId:
          type: string
      type: object
    model.Product:
      properties:
        display_text:
          allOf:
            - $ref: '#/components/schemas/model.ProductText'
          description: It is the default text linked to a product
          type: object
        is_unified_onboarding_supported:
          type: boolean
        name:
          description: Name is the human readable name of the product.
          type: string
        product_allowed_regions:
          description: AllowedRegions are where this product may be provisioned
          items:
            $ref: '#/components/schemas/model.Region'
          type: array
        provisioning_questions:
          items:
            $ref: '#/components/schemas/model.ProvisioningQuestion'
          type: array
      type: object
    model.ProductConf:
      properties:
        activationStatus:
          type: string
        name:
          type: string
        operand:
          type: integer
        operator:
          type: string
        region:
          type: string
      type: object
    model.ProductConfigUpdateTakeoverEmailRequest:
      properties:
        takeoverEmail:
          type: string
      type: object
    model.ProductInfo:
      properties:
        assignedEntitlements:
          type: integer
        product:
          type: string
        productRegion:
          type: string
      type: object
    model.ProductInstance:
      properties:
        activationCode:
          type: string
        createdAt:
          type: string
        entitlement_instances:
          description: EntitlementInstances are the actual entitlement this product instance has
          items:
            $ref: '#/components/schemas/model.EntitlementInstance'
          type: array
        external_tenant_id:
          type: string
        id:
          type: string
        initialAdmin:
          type: string
        isActive:
          type: boolean
        isEA:
          type: boolean
        isHidden:
          type: boolean
        isLegacy:
          type: boolean
        isOrgEntitled:
          type: boolean
        is_trial:
          type: boolean
        is_use_existing_tenant_set:
          type: boolean
        org_entitlement_instances:
          description: OrgEntitlementInstances which are associated with product instances
          items:
            $ref: '#/components/schemas/model.OrgEntitlementInstance'
          type: array
        product:
          $ref: '#/components/schemas/model.Product'
        provisionCheck:
          $ref: '#/components/schemas/model.ProvisionCheck'
        provisioning_metadata:
          items:
            $ref: '#/components/schemas/model.ProvisioningQuestionAnswer'
          type: array
        provisioning_status:
          $ref: '#/components/schemas/model.ProvisioningStatus'
        region:
          allOf:
            - $ref: '#/components/schemas/model.Region'
          description: Region is where this ProductInstance is (or will be) provisioned
          type: object
        updatedAt:
          type: string
      type: object
    model.ProductInstanceApplyLicensesRequest:
      properties:
        sourceInstanceId:
          type: string
      type: object
    model.ProductInstanceInfo:
      properties:
        body:
          $ref: '#/components/schemas/model.Body'
        response_code:
          type: integer
      type: object
    model.ProductInstanceProvisionRequest:
      properties:
        additional_metadata:
          items:
            $ref: '#/components/schemas/model.ProvisioningQuestionAnswer'
          type: array
        create_new_tenant:
          type: boolean
        initial_admin:
          type: string
        region:
          type: string
      type: object
    model.ProductText:
      properties:
        description:
          type: string
        value:
          type: string
      type: object
    model.ProvisionCheck:
      properties:
        is_blocked:
          type: boolean
        message:
          type: string
        product_to_auto_apply:
          type: string
        product_to_clean_up:
          type: string
        type:
          type: string
      type: object
    model.ProvisionedSKU:
      properties:
        name:
          type: string
        productInfo:
          items:
            $ref: '#/components/schemas/model.ProductInfo'
          type: array
      type: object
    model.ProvisionedSubscription:
      properties:
        id:
          type: string
        skus:
          items:
            $ref: '#/components/schemas/model.ProvisionedSKU'
          type: array
      type: object
    model.ProvisioningInfo:
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    model.ProvisioningQuestion:
      properties:
        createdAt:
          type: string
        description:
          type: string
        display_name:
          type: string
        id:
          type: integer
        name:
          type: string
        options:
          description: Options are the acceptable answers to this question
          items:
            $ref: '#/components/schemas/model.Option'
          type: array
        type:
          description: Type signifies how to render this question in the UI, valid types SHOULD be ['choices', 'string']
          type: string
        updatedAt:
          type: string
      type: object
    model.ProvisioningQuestionAnswer:
      properties:
        createdAt:
          type: string
        id:
          type: string
        name:
          type: string
        updatedAt:
          type: string
        value:
          type: string
      type: object
    model.ProvisioningStatus:
      enum:
        - NEW
        - IN_PROGRESS
        - FINISHED
        - ERROR
        - ACTION_REQUIRED
      type: string
      x-enum-varnames:
        - ProvisioningStatusNew
        - ProvisioningStatusInProgress
        - ProvisioningStatusFinished
        - ProvisioningStatusError
        - ProvisioningStatusActionRequired
    model.Region:
      properties:
        description:
          type: string
        name:
          description: Name identifies the region and is the primary key
          type: string
      type: object
    model.ReplaceExternalIdDetails:
      properties:
        newExternalID:
          type: string
        newRegion:
          type: string
        oldExternalID:
          type: string
        oldRegion:
          type: string
        productName:
          type: string
      type: object
    model.RevokeManagedOrgs:
      properties:
        managedOrgs:
          example:
            - id: 2b63ff9f-02e2-4f8e-ac98-b9e42c9feae1
              name: Managed org 1
              products:
                - name: Multi cloud defense
                  quantity: 200
                - name: HyperShield
                  quantity: 100
                - name: Secure Access
                  quantity: 200
            - id: 3c74e892-f39d-47e6-8299-5759d941c053
              name: Managed org 2
              products:
                - name: Secure Access
                  quantity: 200
                - name: Firewall
                  quantity: 200
          items:
            $ref: '#/components/schemas/model.ManagedOrgsList'
          type: array
      type: object
    model.SKU:
      properties:
        name:
          type: string
        quantity:
          type: integer
      type: object
    model.SKUActionType:
      enum:
        - add
        - modify
        - cancel
        - no_change
        - unknown
      type: string
      x-enum-varnames:
        - SKUActionTypeAdd
        - SKUActionTypeModify
        - SKUActionTypeCancel
        - SKUActionTypeNoChange
        - SKUActionTypeUnknown
    model.SbpEaSku:
      properties:
        fulfillmentSkus:
          items:
            type: string
          type: array
        quantity:
          type: integer
        skuName:
          type: string
      type: object
    model.SbpProvisioningInfoPair:
      properties:
        paramName:
          type: string
        paramValue:
          type: string
      type: object
    model.SbpProvisioningRequest:
      properties:
        provisiningInfo:
          items:
            $ref: '#/components/schemas/model.SbpProvisioningInfoPair'
          type: array
        provisioningInfo:
          items:
            $ref: '#/components/schemas/model.SbpProvisioningInfoPair'
          type: array
        skus:
          items:
            $ref: '#/components/schemas/model.SbpEaSku'
          type: array
      type: object
    model.SbpSender:
      properties:
        applicationName:
          type: string
      type: object
    model.SharedEntitlement:
      properties:
        assignedEntitlements:
          type: integer
        managedOrgId:
          type: string
        productsList:
          items:
            $ref: '#/components/schemas/model.ProductConf'
          type: array
      type: object
    model.SkuConfigUpdate:
      properties:
        canSubmitPaidSubscriptions:
          type: boolean
        canSubmitTrialSubscriptions:
          type: boolean
        name:
          type: string
      required:
        - name
      type: object
    model.SkusMap:
      additionalProperties:
        type: integer
      type: object
    model.SmartAccountKey:
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name
      type: object
    model.SmartAccountKeysAssociationRecord:
      properties:
        enterpriseId:
          type: string
        smartAccountKeys:
          items:
            $ref: '#/components/schemas/model.SmartAccountKey'
          type: array
        userId:
          type: string
      required:
        - enterpriseId
        - smartAccountKeys
        - userId
      type: object
    model.SmartAccountRecord:
      properties:
        associated:
          type: boolean
        expiryDate:
          type: string
        id:
          type: integer
        name:
          type: string
        status:
          type: string
      type: object
    model.SmartAccounts:
      properties:
        smartAccounts:
          items:
            $ref: '#/components/schemas/model.SmartAccountRecord'
          type: array
        totalRecords:
          type: integer
      type: object
    model.SmartAccountsUserRole:
      properties:
        role:
          type: string
        userId:
          type: string
      type: object
    model.SmartLicense:
      properties:
        accountDomain:
          type: string
        accountId:
          type: integer
        accountName:
          type: string
        expiryDate:
          type: string
        id:
          type: string
        status:
          type: string
        updatedAt:
          type: string
      type: object
    model.SmartLicenses:
      properties:
        smartLicenses:
          items:
            $ref: '#/components/schemas/model.SmartLicense'
          type: array
        totalRecords:
          type: integer
      type: object
    model.SourceATO:
      properties:
        sourceATO:
          type: string
      type: object
    model.SubnSku:
      properties:
        endDate:
          type: string
        externalSubscriptionId:
          type: string
        licenseType:
          type: string
        skus:
          additionalProperties:
            $ref: '#/components/schemas/model.MspSku'
          type: object
      type: object
    model.Subscription:
      properties:
        Deleted:
          $ref: '#/components/schemas/gorm.DeletedAt'
        cancelledSkus:
          $ref: '#/components/schemas/model.SkusMap'
        createdAt:
          type: string
        externalId:
          type: string
        id:
          type: string
        is_external:
          type: boolean
        is_provisionable:
          type: boolean
        is_provisionable_email_sent:
          type: boolean
        manager_subscription_id:
          $ref: '#/components/schemas/uuid.NullUUID'
        requested_start_date:
          type: string
        subscription_end_date:
          type: string
        subscription_start_date:
          type: string
        updatedAt:
          type: string
      type: object
    model.SubscriptionProvisioningError:
      properties:
        error:
          type: string
        subscriptionId:
          type: string
      type: object
    model.SubscriptionSkusInfo:
      properties:
        actionType:
          allOf:
            - $ref: '#/components/schemas/model.SKUActionType'
          type: object
        name:
          type: string
        quantity:
          minimum: 1
          type: integer
      required:
        - actionType
        - name
        - quantity
      type: object
    model.Trial:
      properties:
        Deleted:
          $ref: '#/components/schemas/gorm.DeletedAt'
        callback_url:
          type: string
        createdAt:
          type: string
        customerId:
          type: string
        externalId:
          type: string
        id:
          type: string
        product_name:
          type: string
        provisioning_contact_email:
          type: string
        skus:
          $ref: '#/components/schemas/model.SkusMap'
        trial_end_date:
          type: string
        trial_start_date:
          type: string
        updatedAt:
          type: string
      type: object
    model.TrialInfo:
      properties:
        callbackUrl:
          type: string
        createdAt:
          type: string
        customerID:
          type: string
        endCustomerName:
          type: string
        enterpriseID:
          type: string
        enterpriseName:
          type: string
        externalId:
          description: key could be any of this `json:"trialId"` or `json:"externalId"`
          type: string
        id:
          type: string
        metadata:
          description: '"-" tag ignores this field when writing to DB'
          items:
            $ref: '#/components/schemas/model.ProvisioningInfo'
          type: array
        productName:
          type: string
        provisioningContactEmail:
          type: string
        skus:
          items:
            $ref: '#/components/schemas/model.TrialsSku'
          type: array
        sseTenantID:
          type: string
        trialEndDate:
          type: string
        trialStartDate:
          type: string
      type: object
    model.TrialsSku:
      properties:
        quantity:
          type: integer
        skuName:
          type: string
      type: object
    model.UpdateEntitlementResponse:
      properties:
        endDate:
          type: string
        id:
          type: string
        licenseType:
          type: string
        provisioningErrors:
          items:
            $ref: '#/components/schemas/model.SubscriptionProvisioningError'
          type: array
        subscriptions:
          items:
            $ref: '#/components/schemas/model.ProvisionedSubscription'
          type: array
      type: object
    model.UpdateEntitlementsRequest:
      properties:
        subscriptions:
          items:
            $ref: '#/components/schemas/model.UserSubscription'
          type: array
      type: object
    model.UpgradeDetail:
      properties:
        sourceATOs:
          items:
            $ref: '#/components/schemas/model.SourceATO'
          type: array
        targetATO:
          type: string
      type: object
    model.UpstreamSubscription:
      properties:
        activationStatus:
          items:
            $ref: '#/components/schemas/model.ActivationStatus'
          type: array
        claimStatus:
          $ref: '#/components/schemas/model.ClaimStatus'
        createdAt:
          type: string
        endDate:
          type: string
        id:
          type: string
        isCancelled:
          type: boolean
        isProvisionable:
          type: boolean
        isTrial:
          type: boolean
        sendClaimCodeTo:
          type: string
        skus:
          $ref: '#/components/schemas/model.SkusMap'
        startDate:
          type: string
        updatedAt:
          type: string
      type: object
    model.UserSubscription:
      properties:
        id:
          type: string
        skus:
          items:
            $ref: '#/components/schemas/model.SKU'
          type: array
      type: object
    model.XSDSupportingDateTime:
      properties:
        time.Time:
          type: string
      type: object
    routes.EnterpriseResponse:
      properties:
        country:
          type: string
        createdAt:
          type: string
        name:
          type: string
        region:
          type: string
        uid:
          type: string
      type: object
    routes.MarketplaceErrorResponse:
      properties:
        code:
          type: integer
        error:
          type: string
        message:
          type: string
      type: object
    routes.MarketplaceResponse:
      properties:
        allowedEmailDomains:
          items:
            type: string
          type: array
        authClients:
          items:
            type: string
          type: array
        createdAt:
          type: string
        description:
          type: string
        id:
          type: string
        isExplicitCancellationAllowed:
          type: boolean
        isImplicitCancellationActivated:
          type: boolean
        maximumInitialTermDays:
          type: integer
        maximumRemainingTermDays:
          type: integer
        maximumTotalTermDays:
          type: integer
        name:
          type: string
        skus:
          items:
            $ref: '#/components/schemas/routes.SkuResponse'
          type: array
        updatedAt:
          type: string
      type: object
    routes.SkuResponse:
      properties:
        canSubmitPaidSubscriptions:
          type: boolean
        canSubmitTrialSubscriptions:
          type: boolean
        createdAt:
          type: string
        name:
          type: string
        updatedAt:
          type: string
      type: object
    routes.UpstreamSubscriptionCanceled:
      properties:
        isCancelled:
          type: boolean
      type: object
    routes.UpstreamSubscriptionError:
      properties:
        code:
          type: integer
        error:
          properties: {}
          type: object
        message:
          type: string
      type: object
    uuid.NullUUID:
      properties:
        uuid:
          type: string
        valid:
          description: Valid is true if UUID is not NULL
          type: boolean
      type: object
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: X-API-Key
      type: apiKey
info:
  contact: {}
  description: Phanes microservice is used for provisioning
  title: Phanes microservice APIs
  version: 1.0.0
openapi: 3.0.1
paths:
  /all-trials:
    get:
      description: Get all Duplicate Trials when is_duplicate_trials is set to true or else get all Trials from the phanes database
      parameters:
        - description: Duplicate Trials
          in: query
          name: is_duplicate_trials
          required: true
          schema:
            type: string
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Trial'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request
      summary: Get all Duplicate Trials or Trials
      tags:
        - Trials
  /claim-code/claim:
    post:
      description: Read Claim Code
      parameters:
        - description: Access Token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/model.ClaimSubscription'
        description: Read Claim Code
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ProductInstance'
          description: OK
      summary: Claim Code
      tags:
        - Claim Code
      x-codegen-request-body-name: order
  /claim-code/read:
    post:
      description: Read Claim Code
      parameters:
        - description: Access Token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/model.ClaimSubscription'
        description: Read Claim Code
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ProductInstance'
          description: OK
      summary: Read Claim Code
      tags:
        - Claim Code
      x-codegen-request-body-name: order
  /customers:
    get:
      description: Get Customer's Product Instance from phanes database by Enterprise Id
      parameters:
        - description: Enterprise Id
          in: query
          name: enterprise_id
          required: true
          schema:
            type: string
        - description: Access Token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ProductInstance'
          description: OK
      summary: Get Customer's Product Instance By Enterprise Id
      tags:
        - Customers
  /enable-firewall:
    post:
      description: Enable firewall functionality by creating a subscription for the firewall offering
      parameters:
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/model.EnableFirewallForEnterpriseRequest'
        description: Details of the subscription
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      enterpriseId:
                        type: string
                      status:
                        type: string
                    type: object
          description: Success
        '400':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                      message:
                        type: string
                    type: object
          description: Unrecognized request body
        '401':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                      message:
                        type: string
                    type: object
          description: User is not an admin of the given enterprise
        '500':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                    type: object
          description: Error creating the subscription
      summary: Enable firewall functionality
      x-codegen-request-body-name: body
  /enterprise:
    get:
      parameters:
        - description: name string
          in: query
          name: name
          required: true
          schema:
            type: string
        - description: Okta access token (Okta access token (callers must have okta access token with scope security:provisioning:tenants:read)
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.EnterpriseResponse'
          description: Details of enterprises matching the name query (both partial and exact matches).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unauthorized - Authentication credentials were missing or incorrect.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Forbidden - The request is understood, but it has been refused or access is not allowed.
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal Server Error
      summary: Get list of enterprises by name
      tags:
        - Enterprise
  /enterprise/{enterpriseId}/products:
    get:
      description: |-
        API accepts security cloud enterprise ID  and returns:
        1. The enterprise name
        2. The enterprise license state
        3. The list of product instances contained within the enterprise, each including:
        - The product instance ID
        - The product type
        - The product’s external tenant ID
        - The region of the product instance
        - Provisioning state e.g., "NEW", "IN_PROGRESS", "FINISHED", "ERROR"
        - Is the product a platform product or not
      parameters:
        - description: enterprise Id(uuid)
          in: path
          name: enterpriseId
          required: true
          schema:
            type: string
        - description: Okta access token (Okta access token (callers must have okta access token with scope security:provisioning:tenants:read) or the UI access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.EnterpriseProductInstances'
          description: API returns enterprise name, enterprise license state The list of product instances contained within the enterprise.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unauthorized - Authentication credentials were missing or incorrect.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Forbidden - The request is understood, but it has been refused or access is not allowed.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal Server Error
      summary: Get list of Product Instances By Enterprise Id
      tags:
        - Enterprise
  /enterprises/{enterprise_id}/smart-licenses:
    get:
      description: Get the list of smart account licenses records with their status and farthest expiry date associated with the enterprise. User has to be a member of the enterprise to be able to get list of smart account licenses info.
      parameters:
        - description: Enterprise id of the user
          in: path
          name: enterprise_id
          required: true
          schema:
            type: string
        - description: Smart license filter query that will help filter records bases on name and status. We will support the query Ex, name co SSE and status eq ACTIVE, apart from 'and' we will also support 'or'
          in: query
          name: filter
          schema:
            type: string
        - description: Offset position of the first response record
          in: query
          name: offset
          schema:
            type: integer
        - description: Limit to number of records in the response
          in: query
          name: limit
          schema:
            type: integer
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SmartLicenses'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request - Invalid enterprise_id
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Forbidden - User is not part of the enterprise
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal Server error - Unable to provide the associated Smart Licenses list.
      summary: Get all the Smart Account Licenses associated with the enterprise
      tags:
        - SmartAccounts
  /enterprises/{enterprise_id}/smart-licenses/{smart_license_uuid}:
    delete:
      description: Removes the smart account licenses record from the enterprise. user has to be an admin of the enterprise to be able to perform this operation.
      parameters:
        - description: Enterprise id of the user
          in: path
          name: enterprise_id
          required: true
          schema:
            type: string
        - description: Id of the smart account license record to be removed from the enterprise
          in: path
          name: smart_license_uuid
          required: true
          schema:
            type: string
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content: {}
          description: Successfully removed the smart account license record from the enterprise
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request - Specified Smart Account ID or Enterprise ID does not exists
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Forbidden - User is not part of the enterprise or user is not an enterprise admin
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal Server error - Unable to remove the Smart Account.
      summary: Removes a smart account license record from the enterprise
      tags:
        - SmartAccounts
    get:
      description: Retrieves a list of all active subscriptions for a marketplace. Specific scopes are required to access the API `security:global:provisioning-subscription:write`. Client credentials are issued by IAM team individually
      parameters:
        - description: Bearer TOKEN
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Marketplace ID
          in: path
          name: marketplace_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/model.UpstreamSubscription'
                type: array
          description: List of active subscriptions
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Unauthorized - Authentication credentials were missing or incorrect
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Forbidden - The request is understood, but it has been refused or access is not allowed
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Internal server error
      summary: List all subscriptions
      tags:
        - Subscriptions
    post:
      description: Creates a new subscription entry, or cancels the existing subscription (depends on action parameter in body. Options ("create", "cancel")).  Specific scopes are required to access the API `security:global:provisioning-subscription:write`. Client credentials are issued by IAM team individually.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionCanceled'
          description: Subscription canceled (action - cancel)
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.UpstreamSubscription'
          description: Subscription successfully created (action - create)
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Unauthorized - Authentication credentials were missing or incorrect.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Forbidden - The request is understood, but it has been refused or access is not allowed.
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Internal server error
      summary: Create a subscription or cancel subscription (different payload)
      tags:
        - Subscriptions
  /enterprises/{managerId}/manageEntitlements/{managedOrgId}:
    patch:
      description: Modifies the quantity of entitlements shared from a manager organization to a managed organization. Requires admin access to both organizations.
      operationId: updateEntitlements
      parameters:
        - description: Manager Organization ID (UUID)
          in: path
          name: managerId
          required: true
          schema:
            type: string
        - description: Managed Organization ID (UUID)
          in: path
          name: managedOrgId
          required: true
          schema:
            type: string
        - description: Authorization token (user must be admin of both manager and managed orgs)
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.UpdateEntitlementsRequest'
        description: Request body containing subscription and SKU details to update
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.UpdateEntitlementResponse'
          description: Successfully updated entitlements
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Invalid UUID format, request body, minimum quantity not met, or managed org not found
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: User is not an admin of manager or managed org
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal server error
      summary: Update shared entitlements between organizations
      tags:
        - Manage Entitlements
  /enterprises/{managerOrgID}/manageEntitlements/{managedOrgID}:
    get:
      description: List all the active entitlements at the SKU level between a manager and managed org. User has to be a member of the enterprise to be able to get list of entitlements info.
      parameters:
        - description: ManagerOrgID(UUID)
          in: path
          name: managerOrgID
          required: true
          schema:
            type: string
        - description: ManagedOrgID(UUID)
          in: path
          name: managedOrgID
          required: true
          schema:
            type: string
        - description: Number of results per page (default 10)
          in: query
          name: limit
          schema:
            default: 10
            type: integer
        - description: Pagination offset (default 0)
          in: query
          name: offset
          schema:
            default: 0
            minimum: 0
            type: integer
        - description: Filter results by subscription name/SKU
          in: query
          name: search
          schema:
            type: string
        - description: Okta access token (user must be an admin of the specified organization)
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.OrgEntitlements'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Invalid enterprise ID, limit, or offset value
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unauthorized - User is not admin of the organization
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal server error
      summary: Get entitlements for an organization
      tags:
        - Manage Entitlements
  /enterprises/{managerOrgId}/revoke-info:
    put:
      parameters:
        - description: Id of the Manager Org whose Managed Orgs are revoked
          in: path
          name: managerOrgId
          required: true
          schema:
            type: string
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.RevokeManagedOrgs'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request - Error in parsing request body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal Server Error
      summary: Get the revoked managed orgs info for a given manager enterprise and update the status
      tags:
        - MSP Revoke Info
  /marketplaces/{marketplace_id}/subscriptions/{external_id}:
    get:
      description: Retrieves a subscription by its external ID.  Specific scopes are required to access the API `security:global:provisioning-subscription:write`. Client credentials are issued by IAM team individually.
      parameters:
        - description: Bearer TOKEN
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Marketplace ID
          in: path
          name: marketplace_id
          required: true
          schema:
            type: string
        - description: External ID of the subscription
          in: path
          name: external_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.UpstreamSubscription'
          description: Active subscription data
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Unauthorized - Authentication credentials were missing or incorrect.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Forbidden - The request is understood, but it has been refused or access is not allowed.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Not Found - No subscription found by requested external ID
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Internal server error.
      summary: Get subscription by external ID
      tags:
        - Subscriptions
    patch:
      description: Update subscription for marketplace.  Specific scopes are required to access the API `security:global:provisioning-subscription:write`. Client credentials are issued by IAM team individually.
      parameters:
        - description: Bearer TOKEN
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Marketplace ID
          in: path
          name: marketplace_id
          required: true
          schema:
            type: string
        - description: External ID of the subscription
          in: path
          name: external_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.PatchUpdateSubscription'
        description: Subscription update data
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.UpstreamSubscription'
          description: Subscription updated
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Unauthorized - Authentication credentials were missing or incorrect.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Forbidden - The request is understood, but it has been refused or access is not allowed.
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Internal server error
      summary: Update subscription
      tags:
        - Subscriptions
      x-codegen-request-body-name: UpdateSubscription
  /marketplaces/{marketplace_id}/subscriptions/{external_id}/resendclaimcode:
    post:
      description: Re-send welcome email with claim code for the given subscription. Cannot be re-sent if subscription was already claimed.  Specific scopes are required to access the API `security:global:provisioning-subscription:write`. Client credentials are issued by IAM team individually.
      parameters:
        - description: Bearer TOKEN
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Marketplace ID
          in: path
          name: marketplace_id
          required: true
          schema:
            type: string
        - description: External ID of the subscription
          in: path
          name: external_id
          required: true
          schema:
            type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: string
          description: Email with claim code sent successfully.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Unauthorized - Authentication credentials were missing or incorrect.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Not Found - The URI requested is invalid or the resource requested does not exist.
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routes.UpstreamSubscriptionError'
          description: Internal server error
      summary: Resend claim code
      tags:
        - Subscriptions
  /migrate-cdo-tenant:
    post:
      description: Migrate a CDO tenant by creating a new enterprise and associating the CDO tenant with the enterprise
      parameters:
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/model.MigrateCdoTenantRequest'
        description: Details of the tenant to migrate
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      enterpriseId:
                        type: string
                      status:
                        type: string
                    type: object
          description: Success
        '400':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                      message:
                        type: string
                    type: object
          description: Unrecognized request body
        '401':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                      message:
                        type: string
                    type: object
          description: Invalid or missing scope in token
        '409':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                    type: object
          description: Product instance already exists for tenant
        '500':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                    type: object
          description: Error migrating tenant
      summary: Migrate CDO tenant to new enterprise
      x-codegen-request-body-name: body
  /migrate-cdo-tenant-rollback:
    post:
      description: Remove the resources of a failed CDO tenant migration
      parameters:
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/model.MigrateCdoTenantRollbackRequest'
        description: Details of the migration to roll back
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      enterpriseId:
                        type: string
                      status:
                        type: string
                    type: object
          description: Success
        '400':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                      message:
                        type: string
                    type: object
          description: Unrecognized request body
        '401':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                      message:
                        type: string
                    type: object
          description: Invalid or missing scope in token
        '500':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                    type: object
          description: Error during rollback
      summary: Rollback CDO migration
      x-codegen-request-body-name: body
  /migrate-cdo-tenant-with-enterprise:
    post:
      description: Migrate a CDO tenant by associating the CDO tenant with an existing enterprise
      parameters:
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/model.MigrateCdoTenantWithEnterpriseRequest'
        description: Details of the tenant to migrate
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      enterpriseId:
                        type: string
                      status:
                        type: string
                    type: object
          description: Success
        '400':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                      message:
                        type: string
                    type: object
          description: Unrecognized request body
        '401':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                      message:
                        type: string
                    type: object
          description: Invalid or missing scope in token
        '409':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                    type: object
          description: Product instance already exists for tenant
        '500':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                    type: object
          description: Error migrating tenant
      summary: Migrate CDO tenant to an existing enterprise
      x-codegen-request-body-name: body
  /migrate-mcd-hypershield-tenants:
    post:
      description: Migrate Multicloud and/or Hypershield tenants currently associated with a CDO tenant
      parameters:
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/model.MigrateAdditionalProductsTenantRequest'
        description: Details of the tenants to migrate
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      enterpriseId:
                        type: string
                      status:
                        type: string
                    type: object
          description: Success
        '400':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                      message:
                        type: string
                    type: object
          description: Unrecognized request body
        '401':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                      message:
                        type: string
                    type: object
          description: Invalid or missing scope in token
        '500':
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - properties:
                      error:
                        type: string
                    type: object
          description: Error migrating tenants
      summary: Migrate Multicloud and/or Hypershield tenants
      x-codegen-request-body-name: body
  /move-subscription:
    post:
      description: Checks for existence of both enterprises and if user is admin of both, allows to move subscription between them. Also updates license and correspondingly platform services for both enterprises. Also leads to outbox events to let prometheus update this info in its dynamoDB. Also makes downstream calls to produce topics for product instances of concerned subscription to be know of the change in enterprise
      responses:
        '200':
          content: {}
          description: OK
      summary: Move a subscription from an enterprise to another enterprise
      tags:
        - Subscriptions
  /msp-claim-code/claim:
    post:
      description: Claim MSP Claim Code
      parameters:
        - description: Access Token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/model.MSPClaimSubscription'
        description: Claim MSP Claim Code
        required: true
      responses:
        '200':
          content: {}
          description: OK
      summary: Claim Code
      tags:
        - Claim Code
      x-codegen-request-body-name: order
  /orders/sbp-notify:
    post:
      description: Saves Provision Order payload from the OPL in the phanes database
      parameters:
        - description: Okta Access Token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/model.OrderSbpPayload'
        description: Save Provision order from sbp
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ProcessedSBPPayload'
          description: OK
      summary: Saves Provision Order payload from the SBP in the phanes database
      tags:
        - Provision Order
      x-codegen-request-body-name: order
  /ping:
    get:
      description: Get Server Health by checking if db is active
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Health'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request
      summary: Get Server Health
      tags:
        - Health Check
  /product-instance/:instanceId/reset:
    put:
      description: Resets the external ID and other values of a product instance for common provisioning
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ProductInstance'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request - Invalid request payload or empty external IDs
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unauthorized - Invalid scope
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unexpected error when resetting product instance
      summary: Reset the external ID and other values of a product instance
      tags:
        - Product Instance
  /product-instance/:instanceId/status:
    post:
      description: Saves Product Instance status in the phanes database
      parameters:
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/model.ProductInstanceInfo'
        description: 'Save product instance '
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.ProductInstanceInfo'
          description: OK
      summary: Saves Product Instance status in the phanes database
      tags:
        - Product Instance
      x-codegen-request-body-name: productInstanceInfo
  /product-instance/:instanceId/updatemetadata:
    put:
      description: Updates the Additional Tenant Metadata of a product instance for common provisioning
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.Meta'
        description: Details of the Additional Tenant Metadata to be replaced
        required: true
      responses:
        '200':
          content: {}
          description: OK - additional tenant meta data updated successfully
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: 'Bad Request - Invalid request payload '
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unauthorized - Invalid scope
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: 'Unexpected error '
      summary: Replace the Additional Tenant Meta data of a product instance
      tags:
        - Product Instance
      x-codegen-request-body-name: body
  /product-instance/replaceExternalId:
    put:
      description: Updates the external ID of a product instance for common provisioning
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.ReplaceExternalIdDetails'
        description: Details of the external ID to be replaced
        required: true
      responses:
        '200':
          content: {}
          description: OK - External ID updated successfully
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request - Invalid request payload or empty external IDs
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unauthorized - Invalid scope
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unexpected error when replacing external ID
      summary: Replace the external ID of a product instance
      tags:
        - Product Instance
      x-codegen-request-body-name: body
  /product-instance/{productInstanceId}/enterprise:
    get:
      description: API accepts security cloud product instance id and returns enterprise id and enterprise name to which it belongs
      parameters:
        - description: Product Instance Id
          in: path
          name: productInstanceId
          required: true
          schema:
            type: string
        - description: Okta access token (callers must have okta access token with scope security:provisioning:tenants:read)
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Enterprise'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unauthorized - Invalid scope
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Forbidden - The request is understood, but it has been refused or access is not allowed.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal Server Error
      summary: Get Customer's Enterprise Id and Name by Product Instance Id
      tags:
        - Product Instance
  /productInstance/{instanceId}/applyLicenses:
    post:
      description: Applies licenses from a source product instance to a target product instance
      parameters:
        - description: ID of the product instance to which licenses are being applied
          in: path
          name: instanceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.ProductInstanceApplyLicensesRequest'
        description: Details of the source instance ID from which to apply licenses
        required: true
      responses:
        '200':
          content: {}
          description: OK - Licenses applied successfully
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request - Invalid instance ID or mismatch in customer or product details
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unauthorized - User is not an admin of the associated enterprise
        '412':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Precondition Required - Customer for product instance and source product instance do not match
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal Server Error - Error applying licenses to the product instance
      summary: Apply licenses to a product instance
      tags:
        - Product Instance
      x-codegen-request-body-name: body
  /productInstance/{instanceId}/provision:
    post:
      description: Provisions a product instance with the given ID
      parameters:
        - description: ID of the product instance to provision
          in: path
          name: instanceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.ProductInstanceProvisionRequest'
        description: Provisioning request details
        required: true
      responses:
        '200':
          content: {}
          description: OK - Provisioning completed successfully
        '202':
          content: {}
          description: Accepted - Provisioning is in progress
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request - Invalid instance ID or request payload
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unauthorized - User is not an admin of the associated enterprise
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Forbidden - Product is not provisionable via API
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unprocessable Entity - Error during provisioning
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal Server Error - Unexpected error during provisioning
      summary: Provision a product instance
      tags:
        - Product Instance
      x-codegen-request-body-name: body
  /productInstanceInvitation:
    get:
      description: Get all GetUserProductInvites for an user's email
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/model.LegacyProductInvite'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request
      summary: Get GetUserProductInvites for given email
      tags:
        - Product Instance Invitation
    post:
      description: Creates a new legacy product invitation and sends out an email for admins to register the product with an enterprise
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model.LegacyProductInvite'
        description: Legacy Product Invitation Creation Data
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.LegacyProductInvitation'
          description: Invitation created successfully
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request - Unable to parse request or region is not defined
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unauthorized - Invalid scope
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal Server Error - Error creating legacy product invitation
      security:
        - ApiKeyAuth: []
      summary: Create a legacy product invitation
      tags:
        - Product Instance Invitation
      x-codegen-request-body-name: body
  /productInstanceInvitation/{id}:
    delete:
      description: Deletes a legacy product invitation by ID
      parameters:
        - description: Invitation ID
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: Bearer token with required scope
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content: {}
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request - Not a valid UUID
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unauthorized - Scope is invalid or token is missing
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal Server Error - Error deleting legacy product invitation
      summary: Delete legacy product invitation
      tags:
        - Product Instance Invitation
  /productInstanceInvitation/{id}/accept:
    post:
      description: Accepts a legacy product invitation and associates the product with an enterprise
      parameters:
        - description: Invitation ID
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: Bearer token with required scope
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.LegacyProductInvite'
          description: Successfully accepted the invitation
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request - Not a valid UUID or invalid request body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unauthorized - User is not an admin of the given enterprise
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Not Found - Invitation not found for the user
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Conflict - Product already exists for enterprise
        '412':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Precondition Failed - Invitation already accepted, not in pending state, or already associated to product instance
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal Server Error - Error during the acceptance process
      summary: Accept legacy product invitation
      tags:
        - Product Instance Invitation
  /productInstanceInvitation/{id}/reject:
    post:
      description: Rejects a legacy product invitation based on the provided invitation ID
      parameters:
        - description: Invitation ID
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: Bearer token with required scope
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.LegacyProductInvite'
          description: Successfully rejected the invitation
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request - Not a valid UUID
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Not Found - Invitation not found for the email or already handled
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal Server Error - Error during the rejection process
      summary: Reject legacy product invitation
      tags:
        - Product Instance Invitation
  /smart-accounts:
    get:
      description: Get all Smart Account Details associated with the user_id as admin of the smart account. User has to be an admin of the enterprise and user_id provided has to be an admin of the smart accounts to be able to perform this operation.
      parameters:
        - description: Enterprise id of the user
          in: query
          name: enterprise_id
          required: true
          schema:
            type: string
        - description: user_id is the CECID of the smart account admin
          in: query
          name: user_id
          required: true
          schema:
            type: string
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Smart license server access token of the user provided in user_id
          in: header
          name: X-SL-TOKEN
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SmartAccounts'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request - Invalid enterprise_id
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Forbidden - User is not part of the enterprise or user is not an enterprise admin or user_id is not an smart account admin
      summary: Get all the Smart Account details
      tags:
        - SmartAccounts
    post:
      description: Associates the list of smart accounts with the enterprise. user has to be an admin of the enterprise and userId provided has to be an admin of the smart accounts to be able to perform this operation.
      parameters:
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Smart license server access token of the user provided in user_id
          in: header
          name: X-SL-TOKEN
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/model.SmartAccountKeysAssociationRecord'
        description: Smart Accounts keys for Association with Enterprise
        required: true
      responses:
        '200':
          content: {}
          description: Ok
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request - One or more Smart Account Keys are invalid or invalid EnterpriseId
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Forbidden - User is not part of the enterprise or user is not an enterprise admin or userId is not an admin of smart accounts
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal Server error - Unable to associate the Smart Accounts in the list to the Enterprise.
      summary: Associate a list of smart accounts with enterprise
      tags:
        - SmartAccounts
      x-codegen-request-body-name: smartAccountKeysAssociationRecord
  /smart-accounts/users/role:
    get:
      description: Get the role of user_id in smart accounts. user has to be a member of the enterprise to be able to perform this operation.
      parameters:
        - description: Enterprise id of the user
          in: query
          name: enterprise_id
          required: true
          schema:
            type: string
        - description: user_id is the CECID of the smart account user
          in: query
          name: user_id
          required: true
          schema:
            type: string
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
        - description: Smart license server access token of the user provided in user_id
          in: header
          name: X-SL-TOKEN
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.SmartAccountsUserRole'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request - Invalid enterprise_id
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Forbidden - User is not part of the enterprise or user is not an enterprise admin
      summary: Get the user role from Smart Accounts
      tags:
        - SmartAccounts
  /smart-licenses/sync:
    post:
      description: Update all smart licenses of all enterprises with latest data fetched from snowflake DB
      parameters:
        - description: Client credentials token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '202':
          content: {}
          description: Accepted
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Unauthorised - Invalid scope
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Internal Server error - Unable to sync Smart Licenses.
      summary: Sync all the smart licenses for all enterprises with updated data from snowflake DB
      tags:
        - SmartAccounts
  /trials:
    post:
      description: Saves Trial in the phanes database
      parameters:
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/model.TrialInfo'
        description: Save trial
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.TrialInfo'
          description: OK
      summary: Saves Trial in the phanes database
      tags:
        - Trials
      x-codegen-request-body-name: trial
  /trials/{id}:
    delete:
      description: Delete trial from the phanes database by using id
      parameters:
        - description: id
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.DefaultResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request
      summary: Delete trial by Id
      tags:
        - Trials
    get:
      description: Get trial from the phanes database by using trialID
      parameters:
        - description: id
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Okta access token
          in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Trial'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model.Error'
          description: Bad Request
      summary: Get trial by Id
      tags:
        - Trials
servers:
  - url: https://api.dev.security.cisco.com/piam-provisioning
x-original-swagger-version: '2.0'